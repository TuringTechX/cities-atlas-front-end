{"version":3,"sources":["assets/branding/growth-lab-logo.png","assets/icons/cities-logo.svg","components/general/howToRead/static/treemap.png","components/general/howToRead/static/industry_space.png","components/general/howToRead/static/swot.png","assets/icons/population.svg","assets/icons/ranking.svg","assets/icons/gdppercapita.svg","assets/icons/datareliability.svg","assets/icons/topindustries.svg","assets/icons/topknowledgecluster.svg","assets/icons/topsimilarcities.svg","assets/branding/growth-lab-dark.png","assets/icons/cities-logo-dark.svg","components/templates/informationalPage/assets/facebook.svg","components/templates/informationalPage/assets/twitter.svg","components/templates/informationalPage/assets/linkedin.svg","components/templates/informationalPage/assets/youtube.svg","components/templates/informationalPage/assets/applepodcast.svg","assets/icons/arrow.svg","components/map/ClusterLandingMap.tsx","styling/GlobalGrid.ts","styling/styleUtils.ts","styling/GlobalStyles.tsx","components/map/Utils.ts","components/map/ClusterMapSettingsComponent.tsx","routing/routes.ts","pages/landing/HighlightedTooltip.tsx","routing/Utils.ts","contextProviders/getFluentLocalizationContext.ts","hooks/useFluent.ts","hooks/useCurrentCityId.ts","contextProviders/appContext.ts","components/navigation/header/index.tsx","components/standardModal/index.tsx","components/standardModal/BasicModal.tsx","pages/landing/Heading.tsx","pages/landing/Utils.ts","components/analytics/googleAnalyticsEvent.ts","components/general/Tooltip.tsx","components/transitionStateComponents/SimpleLoader.tsx","components/transitionStateComponents/SimpleError.tsx","pages/landing/index.tsx","styling/utils/panelSearchKeywordFormatter.tsx","pages/landing/SearchBar.tsx","hooks/useQueryParams.ts","pages/landing/Overlay.tsx","types/graphQL/graphQLTypes.ts","components/navigation/Utils.ts","hooks/useGlobalLocationData.ts","hooks/useCurrentCity.ts","components/navigation/secondaryHeader/UtilityBar.tsx","components/general/dataDisclaimer/index.tsx","components/navigation/secondaryHeader/guide/FirstTimeModal.tsx","components/navigation/secondaryHeader/guide/CitiesGuide.tsx","components/navigation/secondaryHeader/guide/index.tsx","components/navigation/secondaryHeader/share/shareFn.ts","components/navigation/secondaryHeader/share/ShareModal.tsx","components/navigation/secondaryHeader/share/index.tsx","hooks/useGlobalIndustriesData.ts","components/transitionStateComponents/VizLoadingBlock.tsx","components/dataViz/ErrorBoundary.tsx","Utils.ts","components/transitionStateComponents/SimpleTextLoading.tsx","components/general/searchIndustryInGraphDropdown/index.tsx","utilities/rapidTooltip.ts","hooks/useAggregateIndustriesData.ts","components/transitionStateComponents/QuickError.tsx","components/dataViz/treeMap/CompositionTreeMap.tsx","hooks/useGlobalClusterData.ts","components/dataViz/treeMap/ClusterCompositionTreeMap.tsx","components/dataViz/legend/Label.tsx","components/dataViz/legend/CategoryLabels.tsx","hooks/useSectorMap.ts","hooks/useClusterMap.ts","pages/cities/profiles/economicComposition/cityComposition/DownloadImageOverlay.tsx","components/dataViz/legend/EducationLegend.tsx","components/dataViz/legend/WageLegend.tsx","components/general/Utils.ts","components/general/searchIndustryInGraphDropdown/ToggleDropdown.tsx","components/general/PreChartRow.tsx","components/dataViz/settings/CurrentSettingsTooltip.tsx","components/dataViz/settings/RCAThresholdSlider.tsx","components/dataViz/settings/index.tsx","components/general/howToRead/index.tsx","components/dataViz/comparisonBarChart/cityIndustryComparisonQuery.ts","components/general/StandardSideTextBlock.tsx","components/transitionStateComponents/StandardSideTextLoading.tsx","pages/cities/profiles/economicComposition/cityComposition/SideText.tsx","pages/cities/profiles/economicComposition/cityComposition/index.tsx","pages/cities/profiles/economicComposition/index.tsx","components/dataViz/comparisonBarChart/industryQueries.ts","components/dataViz/comparisonBarChart/clusterQueries.ts","components/navigation/secondaryHeader/comparisons/AddComparisonModal.tsx","components/dataViz/industrySpace/chart/useRCAData.ts","pages/cities/profiles/overview/widgets/styleUtils.ts","pages/cities/profiles/overview/widgets/topRow/index.tsx","hooks/useCurrentBenchmark.ts","components/dataViz/legend/PresenceToggle.tsx","pages/cities/profiles/overview/widgets/bottomRow/TopRCA.tsx","components/dataViz/similarCitiesMap/useProximityData.ts","pages/cities/profiles/overview/widgets/bottomRow/TopCities.tsx","pages/cities/profiles/overview/widgets/bottomRow/index.tsx","pages/cities/profiles/overview/widgets/DisclaimerText.tsx","pages/cities/profiles/overview/widgets/index.tsx","pages/cities/profiles/overview/concepts/index.tsx","pages/cities/profiles/overview/map/MapSettings.tsx","pages/cities/profiles/overview/map/CityMap.tsx","pages/cities/profiles/overview/map/index.tsx","pages/cities/profiles/overview/index.tsx","components/dataViz/verticalBarChart/getNiceLogValues.ts","components/dataViz/verticalBarChart/Industries.tsx","components/dataViz/verticalBarChart/Clusters.tsx","hooks/useClusterRCAData.ts","components/dataViz/legend/BenchmarkLegend.tsx","components/dataViz/verticalBarChart/RCABarChart.tsx","components/dataViz/zoomableComparisonBarChart/Chart.tsx","pages/cities/profiles/goodAt/SideText.tsx","routing/TrackedRoute.tsx","components/dataViz/comparisonBarChart/Chart.tsx","components/dataViz/comparisonBarChart/TopIndustryComparisonBarChart.tsx","components/dataViz/industrySpace/chart/Utils.ts","components/dataViz/zoomableComparisonBarChart/IndustryZoomableBarChart.tsx","pages/cities/profiles/goodAt/absolutePresence/index.tsx","pages/cities/profiles/goodAt/index.tsx","components/dataViz/industrySpace/chart/createChart.ts","components/dataViz/industrySpace/chart/useLayoutData.ts","hooks/useRCAData.ts","components/dataViz/industrySpace/chart/index.tsx","components/dataViz/industrySpace/index.tsx","components/dataViz/legend/IntensityLegend.tsx","components/dataViz/legend/NodeLegend.tsx","components/dataViz/industrySpace/chart/miniMap/createChart.ts","components/dataViz/industrySpace/chart/miniMap/index.tsx","components/dataViz/industrySpace/MiniMap.tsx","pages/cities/profiles/industrySpacePosition/industrySpace/IndustryDistanceTable.tsx","pages/cities/profiles/industrySpacePosition/industrySpace/SideText.tsx","pages/cities/profiles/industrySpacePosition/industrySpace/index.tsx","pages/cities/profiles/industrySpacePosition/index.tsx","components/dataViz/pswotTable/Table.tsx","components/dataViz/pswotChart/BenchmarkAxisLegend.tsx","components/dataViz/pswotChart/NAICSChart.tsx","components/dataViz/pswotChart/ClusterChart.tsx","components/dataViz/pswotTable/TableRow.tsx","components/dataViz/pswotTable/ColumnFilterBox.tsx","components/dataViz/pswotTable/TextFilter.tsx","components/dataViz/pswotTable/useRcaAndDensityOptions.ts","pages/cities/profiles/index.tsx","components/dataViz/pswotTable/NAICSTable.tsx","components/dataViz/pswotTable/ClusterTable.tsx","components/dataViz/pswotTable/index.tsx","pages/cities/profiles/growthOpportunities/NodeLegendIndustries.tsx","pages/cities/profiles/growthOpportunities/NodeLegendClusters.tsx","pages/cities/profiles/growthOpportunities/SideText.tsx","pages/cities/profiles/growthOpportunities/index.tsx","components/navigation/secondaryHeader/CitySearch.tsx","components/navigation/secondaryHeader/index.tsx","components/navigation/sideNav/MobileMenu.tsx","components/navigation/sideNav/index.tsx","components/templates/InnerPage.tsx","components/templates/informationalPage/Footer.tsx","components/dataViz/similarCitiesMap/MapOptionsAndSettings.tsx","components/templates/informationalPage/index.tsx","components/dataViz/similarCitiesMap/FilterBar.tsx","pages/cities/similarity/similarCities/Settings.tsx","components/dataViz/similarCitiesMap/useLayoutData.ts","pages/cities/similarity/similarCities/NodeSizeLegend.tsx","pages/cities/similarity/similarCities/FilterBar.tsx","components/dataViz/similarCitiesMap/Utils.ts","components/dataViz/simpleRings/createChart.ts","components/dataViz/similarCitiesMap/index.tsx","components/dataViz/simpleRings/Chart.tsx","components/dataViz/simpleRings/SimilarCitiesRings.tsx","components/dataViz/legend/CityProximityLegend.tsx","pages/cities/similarity/similarCities/Header.tsx","pages/cities/similarity/similarCities/Visualizations.tsx","pages/cities/similarity/similarCities/index.tsx","pages/cities/similarity/index.tsx","components/templates/informationalPage/Content.tsx","pages/informational/about/AboutWhatIs.tsx","pages/informational/about/AboutTeam.tsx","pages/informational/about/AboutPilotUserGroup.tsx","pages/informational/about/AboutResearch.tsx","pages/informational/about/AboutGrowthLab.tsx","pages/informational/about/index.tsx","pages/informational/contact/index.tsx","pages/informational/faq/GlossaryItem.tsx","pages/informational/faq/index.tsx","pages/informational/index.tsx","components/analytics/SurveyWidget.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/icons/benchmark_comparator.svg"],"names":["module","exports","zoom","breakPointValues","medium","mediumSmall","small","breakPoints","lines","pageTop","preHeaderTop","preHeaderBottom","headerTop","headerBottom","secondaryHeaderTop","secondaryHeaderBottom","preContentTop","preContentBottom","contentTop","contentBottom","postContentTop","postContentBottom","footerTop","footerBottom","postFooterTop","postFooterBottom","pageBottom","pageLeft","navLeft","navRight","contentLeft","contentRight","pageRight","Root","styled","div","InformationalPageRoot","PrimaryHeaderContainer","SecondaryHeaderContainer","NavigationContainer","ContentContainer","DefaultContentWrapper","primaryColorRange","sectorColorMap","id","color","clusterColorMap","intensityColorRange","educationColorRange","wageColorRange","primaryFont","secondaryFont","noOutlineOnFocus","css","ContentGrid","ContentScrollGrid","fadeIn","keyframes","fadeInAnimation","SearchContainerDark","span","rgba","SearchContainerLight","BlockButton","button","BlockButtonHighlighted","FullPageOverlay","radioButtonCss","$checked","ContentTitle","h2","ContentParagraph","p","ButtonBase","Mult","FractionMult","GlobalStyles","createGlobalStyle","togglePointer","mapEl","cursor","getCanvas","style","getBounds","coordinates","allLatitudes","allLongitudes","forEach","lng","lat","push","extent","minLat","maxLat","minLng","maxLng","undefined","MapSettingsComponent","props","map","mapCallback","unclusteredPointCallback","useState","haveSettingsBeenSet","setSettings","on","e","features","queryRenderedFeatures","point","layers","clusterId","properties","cluster_id","getSource","getClusterExpansionZoom","err","easeTo","center","geometry","match","_data","find","duration","Fragment","Mapbox","ReactMapboxGl","accessToken","process","maxZoom","attributionControl","dimensions","window","innerWidth","innerHeight","ClusterMode","DefaultMap","children","padding","maxBounds","fitBounds","clearPopup","settings","containerStyle","height","width","fitBoundsOptions","linear","onClick","Consumer","CityRoutes","CityBase","CityOverview","CityEconomicComposition","CityGoodAt","CityGoodAtAbsolutePresence","CityGoodAtAbsolutePresenceComparison","CityIndustrySpacePosition","CityGrowthOpportunities","CityGrowthOpportunitiesTable","CitySimilarCities","AboutRoutes","AboutBase","AboutWhatIs","AboutTeam","AboutPilotUserGroup","AboutResearch","AboutGrowthLab","Routes","Landing","ContactBase","FaqBase","NodeSizing","defaultClusterMode","outline","ColorBy","CityNodeSizing","defaultNodeSizing","cityEmployees","CityColorBy","ClusterLevel","AggregationMode","defaultCityNodeSizing","population","Action","defaultAggregationMode","industries","defaultClusterLevel","C3","defaultColorBy","sector","createRoute","route","cityId","replace","messages","generateBundles","bundle","FluentBundle","_locales","addMessages","localizationAndBundle","localization","ReactLocalization","LocalizationAndBundleContext","createContext","getLocalizationInfo","appLocalizationAndBundle","AppLocalizationAndBundleContext","possessive","word","length","ordinalNumber","input","j","k","ordinalSuffix","useContext","getString","prevCity","history","useHistory","matchPath","location","pathname","params","initialWindowDimension","windowDimensions","useWindowWidth","setWindowDimensions","useEffect","updateWindowDimensions","debounce","addEventListener","removeEventListener","citiesLogoSVG","cityIconSVG","NavSection","Logo","h1","MobileLogo","StyledLink","Link","H2","defaultPadding","$active","MobileH2","NavIcon","MobileNavIcon","MobileMenuButton","Icon","Bar","CenterBar","MobileMenu","Header","useFluent","mobileMenuOpen","setMobileMenuOpen","matchCity","useRouteMatch","matchSimilarCities","matchAbout","matchContact","matchFaq","currentCityId","useCurrentCityId","similarCitiesRoute","profileCitiesOverviewRoute","menuButtonText","closeMenu","to","aria-label","dangerouslySetInnerHTML","__html","transform","Boolean","zIndex","position","opacity","className","OverlayPortal","tabIndex","Overlay","Container","Content","Modal","onClose","overlayPortalContainerNodeRef","useRef","isModalRendered","setIsModalRendered","node","document","querySelector","current","focus","closeOnEsc","key","createPortal","growIn","CloseButton","rest","closeButton","CityIcon","Description","h3","Or","UseMapText","MapPanIcon","WhatIsACityLinkContainer","WhatIsACityLink","ModalContent","Heading","cityModalOpen","setCityModalOpen","modal","BasicModal","StyledPopup","Popup","TootltipTitle","googleAnalyticsEvent","category","action","label","ga","hitType","eventCategory","eventLabel","eventAction","Title","ReviewCityButton","CloseTooltipButton","TooltipPosition","TooltipTheme","HighlightedTooltip","highlighted","closePopup","anchorRef","triggerGoogleAnalyticsEvent","title","ref","toString","Profiles","Similarity","Ring","size","animation","ChildBase","baseSize","themeColor","FirstChild","SecondChild","ThirdChild","SimpleLoader","fluentMessageId","message","timeout","MoreInformationI","TooltipBase","$overrideStyles","$theme","Dark","ArrowContainer","$position","Bottom","Arrow","GenericSpan","Tooltip","explanation","theme","tooltipPosition","overrideStyles","delay","rootEl","tooltipEl","isTooltipShown","setIsTooltipShown","top","left","coords","setCoords","useLayoutEffect","tooltipElm","rootElm","tooltipHeight","offsetHeight","tooltipWidth","offsetWidth","tooltipTopValue","tooltipLeftValue","tooltipSpacing","classList","add","remove","cssText","tooltip","overlayPortalContainerNode","arrow","ReactDOM","onMouseEnter","clientY","clientX","setTimeout","onMouseLeave","clearTimeout","onMouseMove","RootDark","RootLight","KeywordText","KeywordElement","keywords","query","safeQuery","RegExp","trim","text","total","join","React","memo","data","setHighlighted","onPanelHover","onTraverseLevel","focusOnRender","topLevelTitle","onSelect","val","onHover","selectedValue","disallowSelectionLevels","defaultPlaceholderText","showCount","resultsIdentation","matchingKeywordFormatter","queryString","parse","search","GrowthLabLogo","CityverseLogo","TitleSubtext","IntroQuestions","IntroP","IntroFooter","StartButtons","PickCityButton","onCitySelect","href","target","rel","src","GrowthLabLogoPNG","alt","GLOBAL_LOCATION_WITH_GEOMETRY_QUERY","gql","useGlobalLocationGeometry","useQuery","bottom","right","DigitLevel","SidePanel","SearchContainer","LoadingContainer","loading","error","country","useQueryParams","searchData","geoJsonClusterData","type","mapData","setMapData","overlayOn","setOverlayOn","closeOverlay","highlightedCountry","setHighlightedCountry","hovered","setHovered","bounds","setFitBounds","countryPadding","filter","d","parent_id","targetCountry","level","clusterFeatures","cities","countries","city","name","centroidLon","countryId","population15","gdppc","nameList","JSON","Math","max","coord","parent","c","parseInt","countryName","nameShortEn","parentIndex","findIndex","gdp","isNaN","parseFloat","toFixed","round","console","searchDatum","event","mapContent","searchBar","hoveredTooltipPopup","highlightedTooltipPopup","useCallback","direction","SimpleError","sourceOptions","cluster","clusterRadius","sourceId","layerOptions","paint","property","stops","layout","minZoom","before","overlay","onMouseDown","columnsToRowsBreakpoint","UtilityBarButtonBase","SvgBase","Text","LargeSvg","TooltipContent","GLOBAL_LOCATION_QUERY","useGlobalLocationData","getCountryStringId","useGlobalLocationHierarchicalTreeData","response","parentCountry","locationDataToHierarchicalTreeData","useCurrentCity","CompositionType","defaultDigitLevel","Three","IncomeClassType","DevGroupType","DataFlagType","PeerGroup","defaultCompositionType","Employees","DownloadType","isValidPeerGroup","value","GlobalPopulation","GlobalIncome","GlobalEuclideanDistance","RegionalPopulation","RegionalIncome","RegionalEuclideanDistance","Region","dataIconSvg","DisclaimerSvg","$flagColor","DisclaimerSvgLarge","Para","DataDisclaimer","currentCity","modalOpen","setModalOpen","flagColor","alertTitle","description","dataFlag","GREEN","YELLOW","ORANGE","RED","img","StartGuideButton","DismissButton","CheckboxLabel","Checkbox","localStorageKey","dismissedSinceSession","FirstTimeModal","startGuide","initialCheckedValue","localStorage","getItem","checked","setChecked","closeModal","setItem","newCheckedCount","CityverseLogoURL","htmlFor","onChange","joyrideClassNames","steps","content","disableBeacon","placement","CitiesGuide","run","filteredSteps","element","offsetParent","continuous","showProgress","spotlightClicks","locale","back","close","last","next","skip","styles","options","primaryColor","callback","floaterProps","disableAnimation","Guide","runTutorial","setRunTutorial","getShareWindowParams","getShareFunctions","url","shareFacebook","shareURL","encodeURIComponent","open","shareTwitter","shareLinkedIn","summary","source","shareEmail","subjectCopy","bodyBeforeLineBreakCopy","bodyAfterLineBreakCopy","subject","bodyBeforeLineBreak","bodyAfterLineBreak","SectionTitle","CopyUrlBar","CopyIcon","UrlText","CopyButton","SocialMediaContainer","SocialMediaButton","copied","setCopied","copyText","navigator","clipboard","writeText","Share","ShareModal","UtilityBarRoot","UtilityBarPortal","UtilityBar","onDownloadImageButtonClick","onDownloadDataButtonClick","returnInline","hideGuide","secondaryHeaderUtilityBarContainerNodeRef","isUtilityBarRendered","setIsUtilityBarRendered","screenfull","isEnabled","isFullscreen","setIsFullscreen","downloadDataButton","downloadImageButton","expandButton","onFullscreenClose","exit","off","request","then","guide","GLOBAL_INDUSTRIES_QUERY","useGlobalIndustriesData","useGlobalIndustryMap","naicsId","parentId","naicsIdTopParent","code","tradable","industryDataToMap","LoadingOverlay","LoadingBlock","ErrorBoundary","state","hasError","errorInfo","this","_error","Component","numberWithCommas","x","ranges","divider","suffix","formatNumber","n","decimalPlaces","fixedRange","range","rangesLong","formatNumberLong","decimalToFraction","decimal","pow","floor","gcd","a","b","display","filterOutliers","arr","values","concat","sort","q1","q3","ceil","iqr","maxValue","minValue","Mode","Spinner","bounceDelay","Bounce","Bounce1","Bounce2","RapidTooltipRoot","getStandardTooltip","columnCount","rows","r","i","row","underline","underlineRows","includes","ii","alignment","boldColumns","grid","additionalContent","additionalHTML","hideArrow","titleStyle","simple","useAggregateIndustriesData","variables","clusterLevel","C1","useAggregateIndustryMap","year","clusters","globalMinMax","minSumNumCompany","maxSumNumCompany","minSumNumEmploy","maxSumNumEmploy","minAvgNumCompany","maxAvgNumCompany","minAvgNumEmploy","maxAvgNumEmploy","minYearsEducation","maxYearsEducation","minHourlyWage","maxHourlyWage","medianHourlyWage","medianYearsEducation","clusterMinMax","aggregateData","averageData","clusterAverageData","aggregateClusterData","filteredAverageData","sumNumCompany","sumNumEmploy","avgNumCompany","avgNumEmploy","yearsEducationNoOutliers","yearsEducation","sortBy","hourlyWageNoOutliers","hourlyWage","averages","dd","yearsEducationRank","hourlyWageRank","filteredAverageClusterData","QuickError","closeError","TreeMapContainer","ECONOMIC_COMPOSITION_QUERY","useEconomicCompositionQuery","digitLevel","compositionType","hiddenSectors","colorBy","setIndicatorContent","industryMap","rootRef","tooltipContentRef","highlightedTooltipRef","setDimensions","aggregateIndustryDataMap","getBoundingClientRect","dataToUse","prevData","usePrevious","output","indicator","tooltipContent","education","wage","SimpleTextLoading","colorScale","treeMapData","numCompany","numEmploy","industry","companies","employees","Companies","topLevelParentId","scaleLinear","domain","fill","transformed","transformData","colorMap","loadingOverlay","highlightedCell","treeMapCells","industryWithData","share","shareString","targetValue","innerHTML","pointerEvents","x0","x1","y0","clearHighlighted","highlightErrorPopup","fallbackTitle","cells","numCellsTier","chartContainerWidth","chartContainerHeight","onCellClick","noop","onMouseOverCell","onMouseLeaveChart","GLOBAL_CLUSTER_QUERY","useGlobalClusterData","useGlobalClusterMap","skipLevel2","clusterIdTopParent","clusterDataToMap","CLUSTER_COMPOSITION_QUERY","useClusterCompositionQuery","hiddenClusters","clusterMap","Six","allRCAValues","rcaNumEmploy","rcaNumCompany","minMax","scaleSymlog","clusterIndustryDatum","clusterWithData","Button","Block","HideIsolateRoot","HideIsolateContent","HideIsolateText","Hr","hr","ButtonWrapper","HideIsolateButton","Label","toggleCategory","isolateCategory","isHidden","isIsolated","isHovered","setIsHovered","toggleButton","isolateButton","hideIsolateButtons","hideIsolate","borderColor","backgroundColor","RootBase","StandardRoot","FullWidthRoot","StandardContent","FullWidthContent","fadeAndSlideIn","fadeAndSlideDown","ResetLabelsButtonContainer","ResetLabelsButton","ReloadIcon","CategoryLabels","categories","fullWidth","allowToggle","hiddenCategories","resetCategories","resetText","labels","resetButton","treeMapCellsNode","cityName","aggregationMode","industryResponse","clusterResponse","effectRan","setEffectRan","boundingRect","canvas","createElement","context","getContext","cell","beginPath","rect","y1","fillStyle","strokeStyle","stroke","html2canvas","allowTaint","cellLabels","drawImage","link","download","toDataURL","click","catch","Labels","IntensityLegend","collapsedSizeMediaQueryValues","min","collapsedSizeMediaQuery","textClassName","ExpandingButton","jumpIn","DropdownContainer","ToggleButton","rerenderKey","isDropdownVisible","setIsDropdownVisible","internalSelectedValue","setInternalSelectedValue","dropdown","maxResults","VizNavStyle","hierarchalSearchData","tiers","searchPanel","hiddenParents","mode","hidden","sectorMap","useSectorMap","useClusterMap","industrySearchData","industryDataToHierarchicalTreeData","useGlobalIndustryHierarchicalTreeData","clusterSearchData","clusterDataToHierarchicalTreeData","useGlobalClusterHierarchicalTreeData","locationSearchData","useWindowSize","naics","Array","from","keys","geo","ToggleDropdown","visibility","Segment","Subtitle","em","CurrentSettingsTooltip","nodeSizingValue","settingsOptions","compositionText","composition_type","aggregationText","upperFirst","aggregation","detailLevel","digit_level","sixDigitOnlyMessage","cluster_overlay","hideClusters","clusterOverlayMode","nodeSizing","node_sizing","rca","sizeBy","defaultColorByText","nodes","color_by","citySizeBy","cityNodeSizing","city_node_sizing","cityColorBy","city_color_by","proximity","rcaThreshold","rca_threshold","SliderContainer","RCAThresholdSlider","updateValue","initialValue","logScale","scaleLog","logScaleWithZero","convertValue","logValue","invert","ReactSlider","thumbClassName","trackClassName","defaultValue","renderThumb","valueNow","onAfterChange","v","slideIn","ContentRoot","SettingGrid","SettingsInputContainer","DisabledSettingsInputContainer","CompostionButtonBase","CompostionButtonHighlight","DisabledLabel","DigitLevelButton","$selected","DigitLevelSoloButton","ResetButton","Settings","compositionOptions","digitLevelOptions","clusterLevelOptions","clusterOverlayToggle","nodeSizingOptions","colorByOptions","cityColorByOptions","cityNodeSizingOptions","updateSetting","param","stringify","newUrl","CompanyButton","EmployeeButton","InputContainer","LabelContainer","tooltipText","disabledOptions","ClusterButton","NaicButton","Sector","Two","Four","Five","cluster_level","none","nodeSizingActive","currentValue","sizeByRca","cityCompanies","uniform","globalEmployees","globalCompanies","labelText","defaultIsSelected","gdpPpp","Image","HowToRead","isTreemap","isIndustrySpace","isSwot","isExact","TreemapPNG","IndustrySpacePNG","SwotPNG","$hasIndicator","RowBase","LeftColumn","IndicatorTooltipContainer","RightColumn","IndicatorRoot","SettingsButton","NavButton","HighlightedNavButton","UnderlineNavButton","UnderlineHighlightedNavButton","NavButtonTooltip","ButtonNavContainer","RegionGroup","searchInGraphOptions","vizNavigation","vizNavigationStyle","settingsOpen","setSettingsOpen","indicatorTooltip","indicatorElm","rightColumnStyle","justifyContent","vizNavigationButtonElms","Underline","active","vizNavigationButtons","searchInGraph","settingsButton","settingsPanel","ScrollContainer","StandardSideTextBlock","clearStyles","alignItems","flickerAnimation","TitleBar","ParaBar","StandardSideTextLoading","marginBottom","ADDITIONAL_ECON_COMP_DATA","SideText","locations","composition","additional","cityNamePlural","regions","region","regionId","totalEmploy","allSectors","allDigitThreeIndustries","count","largestSector","orderBy","largest3DigitIndustryInSector","secondLargestSector","secondLargest3DigitIndustryInSector","para1","incomeClass","regionPopRank","regionGdppcRank","regionName","cityPeerGroupCounts","para2","Helmet","TreeMapRoot","EconomicComposition","prevHighlighted","setHiddenSectors","setHiddenClusters","legend","activeDownload","setActiveDownload","indicatorContent","treeMapRef","globalLocationData","isClusterTreeMap","cellsNode","targetCity","DownloadImageOverlay","EducationLegend","WageLegend","sId","s","sectorId","treeMapViz","ClusterCompositionTreeMap","ECONOMIC_COMPOSITION_COMPARISON_QUERY","PEER_GROUP_ECONOMIC_COMPOSITION_COMPARISON_QUERY","WORLD_ECONOMIC_COMPOSITION_COMPARISON_QUERY","CLUSTER_ECONOMIC_COMPOSITION_COMPARISON_QUERY","CLUSTER_PEER_GROUP_ECONOMIC_COMPOSITION_COMPARISON_QUERY","CLUSTER_WORLD_ECONOMIC_COMPOSITION_COMPARISON_QUERY","PeerGroupCountFields","useComparisonQuery","QUERY","primaryCity","comparison","World","peerGroup","secondaryCity","primaryCityIndustries","secondaryCityIndustries","groupIndustries_1","groupIndustries_2","groupIndustries_3","groupIndustries_4","groupIndustries_5","groupIndustries_6","industryId","PEER_GROUP_CITY_COUNT","usePeerGroupCityCount","ComparisonType","H1","Grid","GlobalVRegionalGrid","GroupContainer","ul","ContainerTitle","ContinueButtonContainer","ContinueButton","GroupItem","li","GroupRadio","AboutText","Recommended","defaultBenchmark","AddComparisonModal","comparisonType","continueButtonRef","globalData","benchmark","otherParams","counts","intialSelected","selected","setSelected","prevValue","closeModalWithoutConfirming","Relative","selectCityTitle","about","path","render","getCount","f","Absolute","BenchmarkSVG","globalPop","globalIncome","globalEucdist","regionalPop","regionalIncome","regionalEucdist","neverEmpty","disabled","TitleBase","globalBreakPoints","WrappableText","YearText","ValueBase","ListItem","DataLegend","SmallDot","LargeDot","TopRow","cityLoading","toUpperCase","PopulationSVG","GdpPerCapitaSVG","RankingSVG","DataReliabilitySVG","useCurrentBenchmark","benchmarkName","benchmarkNameShort","StringBoolean","Highlighted","CLUSTER_INTENSITY_QUERY","useClusterIntensityQuery","useRCAData","variable","partnerCityIds","Cell","TopRCA","topIndustriesElement","topClustersElement","c3Rca","naicsRca","industriesGreaterThan1","topIndustries","slice","clustersGreaterThan1","topClusters","TopIndustriesSVG","TopClustersSVG","GET_SIMILAR_CITIES_PROXIMITY_QUERY","useProximityData","TopCities","topCitiesElement","globalLocations","minPop","maxPop","topLocations","partnerId","cntry","countryText","TopCitiesSVG","BottomRow","DisclaimerText","cityPeerGroupCountsRegion","Row","Widgets","disclaimer","SectionHeader","Section","Concepts","MapSettings","addControl","mapboxgl","NavigationControl","scrollZoom","disable","mapRenderProps","CityMap","Footnote","SourceAttr","MoreInfoBtn","MapRoot","ContentBlock","WidgetContainer","MapContainer","ConceptsContainer","SimilarCities","tickMarksForMinMax","Industries","highlightError","setHighlightError","tooltipRef","filteredIndustryRCA","scale","nice","numberOfXAxisTicks","highPresenceScale","lowPresenceScale","highPresenceData","lowPresenceData","colorDatum","datum","primaryData","secondaryData","formatValue","scaleToUse","Direction","Over","scaledValue","onRowHover","mouseCoords","y","onHighlightError","nValuesToShow","expandCollapseText","toExpand","toCollapse","Clusters","filteredClusterRCA","ButtonsRoot","OneTimeTooltip","DismissTooltipButton","HighlightedTooltipText","EquationContainer","Division","Subtraction","Top","BenchmarkText","PresenceToggle","togglePresence","highlight","showArrows","onButtonClick","initialShowOverviewTooltip","TRUE","showOverviewTooltip","setShowOverviewTooltip","highlightedStyles","relativePresenceTooltip","absolutePresenceTooltip","presenceButtons","relative","absolute","arrowLeft","arrowRight","oneTimeTooltip","rotate","strong","BenchmarkLegend","benchmarkModal","newBenchmark","LeftAxisRoot","BottomAxisRoot","BenchmarkRoot","AxisLabelBase","AxisLabelLeft","AxisLabelRight","AxisLabelHigh","VizRoot","VizContainer","RCABarChart","isClusterView","clusterData","c1Rca","industryData","viz","Group","CLUSTER_RCA_QUERY","useClusterRCAData","prefix","benchmarkType","cityNamePossessive","its","the","peerGroupName","peerGroupPossessive","industrialKnowledgeCluster","industrysClusters","industryCluster","para3","para4","TrackedRoute","page","ReactGA","set","pageview","formatAxisValue","filteredPrimaryData","filteredSecondaryData","primaryTotal","secondaryTotal","primaryCityId","secondaryCityId","secondaryDatum","d2","difference","primaryDatum","secondaryCityName","primaryCityDatum","primaryCityName","secondaryCityDatum","primaryDiffValue","secondaryDiffValue","primaryValue","secondaryValue","primaryValueText","secondaryValueText","primaryDiff","secondaryDiff","Layout","Left","TopIndustryComparisonBarChart","globalAggregateData","industryOrClusterMap","parentField","hiddenIndustriesOrClusters","topParent","textLeft","other","textRight","whiteSpace","primaryName","secondaryName","filteredData","groupName","Primary","Secondary","removeHovered","allYValues","dataWithHover","maxY","prevMaxY","vizType","VizType","ClusterBarChart","axisLabels","formatAxis","animateBars","axisMinMax","minY","animateAxis","animationDuration","startMaxY","startMinY","chartTitle","SizingContainer","BreadCrumbList","BreadCrumb","BreadCrumbLink","PrimarySecondaryLegend","LegendItem","LegendBlock","LegendText","IndustryZoomableBarChart","idField","highlightIndustry","highlightedParent","reduce","barChartData","sortedData","breadCrumbList","currentParentId","breadCrumbs","reverse","industryName","topLevelText","topLevelBreadCrumb","CompositionComparison","isIndustryComparison","matchZoomableBarChart","getAspectRatio","aspect","actual","buffer","longerAspectSide","w","h","smallerActualValue","ratio","margin","outerWidth","outerHeight","nodeOffsetMap","offset","ring","Inner","Outer","drawPoint","currentPoint","totalPoints","centerX","centerY","offsetObj","angle","PI","cos","sin","xValues","yValues","xBounds","yBounds","dx","dy","translate","ellipsisText","maxChar","wrap","each","t","select","words","split","pop","line","lineNumber","attr","tspan","append","getComputedTextLength","getBBox","ZoomLevel","useLayoutData","setOutput","clusterLoading","clusterError","loadingIndustryMapData","industryMapData","minCompanySizeBy","maxCompanySizeBy","companySizeByScale","minEmploySizeBy","maxEmploySizeBy","employSizeByScale","educationColorScale","wageColorScale","continents","LAYOUT_DATA","parentIndustry","globalIndustry","industryColor","sectorName","edges","trg","globalSumNumCompany","globalSumNumEmploy","educationColor","wageColor","global","circlePath","cx","cy","svgPathReverse","NodeAction","zoomScales","continent","d3","createChart","rootWidth","rootHeight","onNodeSelect","onZoomLevelChange","onNodeHover","breadCrumbCluster1Button","breadCrumbCluster2Button","breadCrumbNodeButton","radiusAdjuster","textAndSpacingSize","radius","zoomLevel","Cluster1","hoveredShape","hoveredNode","externalHoveredId","svg","xScale","yScale","g","scaleExtent","clearActive","clear","clearActiveLabels","reset","classed","Reset","transition","call","resetToClusterMid","Cluster2","scaleTo","resetToNode","Node","setHoveredShape","setHoveredNode","selectAll","outerRing","innerRing","outerRingLabelPath","innerRingLabelPath","enter","polygon","xCoord","yCoord","zoomToShape","shareEmploy","pageY","pageX","nodeOpacity","zoomToPoint","clickText","continentLabels","continentClusterLineLabels","continentValueLabels","countryLabels","nodeLabels","external","ExternalSelect","SelectNode","SoftReset","wasActive","softReset","adjustedCoords","allXValues","radiusCoords","maxZoomAllowed","xValue","yValue","skipRingTransition","edgeData","outerRingRadius","innerRingRadius","innerCircleLength","newRadius","smallerRadius","ease","zoomIn","ZoomIn","scaleBy","zoomOut","ZoomOut","setHighlightedPoint","setExternalHoveredId","update","newData","totalEmployees","intensityColorScaleContinents","intensityColorScaleCountries","newDatum","countDatum","updateNodeSize","radiusScale","field","naicsData","allValues","targetNode","updateNodeColor","clusterOverlayClassNames","ZoomButtonsContainer","ZoomButton","BreadCrumbContainer","Chart","chartRef","breadCrumbCluster1Ref","breadCrumbCluster2Ref","breadCrumbNodeRef","initialized","chart","setChart","chartNode","tooltipNode","resetZoom","fontWeight","IndustrySpaceContainer","BenchmarkLegendRoot","BenchmarkLegendContent","ClusteredIndustrySpace","setZoomLevel","preChartRowKey","chartKey","ColumnBase","NodeBase","NodeSmall","NodeMedium","NodeBlank","NodeLarge","NodeLegend","gridRow","maxLabel","minLabel","coloredLabel","greyLabel","nodeId","Table","TableCell","NameCell","HeaderCell","MiniMapContainer","NodeLegenedContainer","IndustryDistanceTable","titleRef","titleHeight","setTitleHeight","titleNode","clearHovered","onMouseClick","borderLeftColor","MiniMap","idToKey","Date","IndustrySpacePosition","setPreChartRowKey","rcaData","nodeSizingTitle","nodeSizingMinText","nodeSizingMaxText","sideContent","curr","SortDirection","NODE_RCA_QUERY","BenchmarkAxisLegend","setAxisPosition","attempts","bottomLabelNode","rootNode","PSWOTChart","toLowerCase","naicsDensity","pswotChartData","minSizeBy","maxSizeBy","_unused","industryGlobalData","nn","comparableIndustry","densityKey","naicsDatum","faded","averageLineText","quadrantLabels","I","II","III","IV","V","quadrantBackgroundColors","zeroAxisLabel","yLineText","leftUp","leftDown","axisLabelColor","quadrantLabelColor","onQuadrantLabelMouseMove","onQuadrantLabelMouseLeave","highlightCluster","clusterRca","clusterDensity","clusterGlobalData","clusterColor","Tr","tr","Td","td","NameTd","NameContent","ContentTd","ColorBar","TableRow","density","quadrant","ColumnFilterBox","allOptions","selectedOptions","setSelectedOptions","onSelectedChanged","valueRenderer","multipleAsValuesText","hasSelectAll","disableSearch","SearchBar","ClearButton","StandardSearch","placeholder","setSearchQuery","initialQuery","searchEl","clearEl","autoComplete","RCA_OPTIONS_BASE","DENSITY_OPTIONS_BASE","numberOfZerosAfterDecimal","abs","log10","useRcaAndDensityOptions","aggregationType","findThreshold","metric","THRESHOLD_DATA","var","classification","densityThreshold","threshold","high_split","expected_high","expected_low","low_split","rcaOptions","densityOptions","sortArrows","ScrollRoot","table","Th","th","NameTh","CellContent","SortContent","FilterContent","Quadrant","SortArrowsBase","ascending","descending","SortField","quadrantOptionsArray","Potential","Strength","Weakness","Opportunity","Threat","getQuadrant","PSWOTTable","sortField","setSortField","sortDirection","setSortDirection","filterText","setFilterText","filterdQuadrants","setFilteredQuadrants","filterdRCA","setFilteredRCA","filterdDensity","setFilteredDensity","toggleSort","highlightedElm","scrollIntoView","behavior","block","activeClass","TextFilter","hideScrollbars","ignoreElements","rcaDatum","densityDatum","ClusterTable","NAICSTable","NodeLegendIndustries","GrowthOppurtunities","isTableView","isClusterMode","pswotChart","ClusterChart","NAICSChart","nodeLegend","NodeLegendClusters","pswotChartWithSettings","pswotTable","CitySearch","searchContainerWidth","initialSelected","dataWithoutCurrentComparisonOrBenchmark","Object","entries","Light","SecondaryHeader","component","MobileButtonContainer","MobileButton","ChevronSVG","arrowStyles","ArrowBase","DisabledArrow","NextSvg","PrevSvg","DownArrow","UpArrow","baseLinkData","toggleMenu","warn","linkIndex","pageTitle","prevLink","nextLink","toggleArrow","LinkContainer","acitveLinkClass","NavLink","BetaIcon","CollapseButton","CollapsedMenu","CollapsedLink","ExpandButton","ExtendArrow","SideNavigation","collapsed","setCollapsed","AppContext","linkData","setLinkData","containerHovered","setContainerHovered","circle_0","circle_1","circle_2","circle_3","circle_4","l","absoluteTop","refArray","documentElement","scrollTop","body","offsetTop","newLinkDatum","tooltips","links","beta","removeParams","newParams","LinkRoot","mobileMenu","collapseButton","menu","xmlns","viewBox","InnerPage","SocialType","City","getStringWithNewLines","matchOverview","prevCityId","dismissed","Overview","GoodAt","GrowthOpportunities","ColumnOrRow","h4","CenteredColumn","SocialColumn","InternalLinksColumn","ExternalLinksColumn","CityverseLogoColumn","LogoColumn","GrowthLabInfo","SocialLink","linkStyles","StyledInternalLink","StyledExternalLink","LicenseAndReadme","previousCityId","defaultSocialIcons","facebook","linkedin","twitter","youtube","applepodcast","socialIcon","FacebookIconSVG","TwitterIconSVG","LinkedinIconSVG","YouTubeIconSVG","ApplePodcastSVG","StandardFooter","socialItemsList","CityverseLogoSVG","marginTop","getFullYear","rootId","ContentStandard","ContentFull","InformationalPage","contentFull","Footer","filterBarId","ExpandBox","SelectBoxContainer","CityMark","CityName","ResetSettingsBtn","selectBoxValueRenderer","FilterBar","populationMin","populationMax","gdppcMin","gdppcMax","setFilterValues","mapContext","useMapContext","selectedRegionIds","setSelectedRegionIds","selectedCountryIds","setSelectedCountryIds","minMaxPopulation","setMinMaxPopulation","minMaxGdppc","setMinMaxGdppc","cityPopTitle","cityGdpTitle","gdpLogScale","popLogScale","currentGdpPercent","useMemo","currentPopPercent","currentCityName","setDefaultPopulation","rawPopulation","defaultMinPop","defaultMaxPop","container","getElementById","containerRect","intialized","convertedGdpPpc","convertedPop","setFilterParamaters","thumbRender","$","formatted","countryOptions","SelectRoot","Select","responseData","allLatCoords","allLngCoords","filteredResponseCities","filteredUMapCities","CITIES_UMAPJSON_RAW","umap","ID_HDC_G0","uniqBy","cityGeoJson","featureCollection","centroidLat","uMapXCoords","uMapYCoords","minMaxLat","yToLatScale","minMaxLng","xToLngScale","cityUMapJson","CTR_MN_NM","UC_NM_MN","NodeSizeLegend","minGdpPpp","maxGdpPpp","Divider","proximityColors","createProximityScale","scaleThreshold","MapOptionsAndSettings","proximityData","currentCityFeature","setNewCenter","cityPartnerEucdistScale","p20GlobalEucdist","p40GlobalEucdist","p60GlobalEucdist","p80GlobalEucdist","proximityColorMap","eucdist","setColors","nodeSize","allPopulationValues","populationScale","populationSizeByMap","setNodeSizing","allGdpPppValues","minMaxGdpPpp","gdpPppScale","gdpPppSizeByMap","uniformSizeByMap","staticProximityData","staticFilterValues","staticCityId","baseFontSize","highNodesDatum","mediumNodesDatum","primary","filtered","shown","highNodes","mediumNodes","rankInFiltered","rankInAll","maxCharLength","cityData","minGdppc","maxGdppc","allPops","getPopulationScale","defaultNodeRadius","allGdp","getGdpPppScale","cc","primaryCountry","radiusValue","RingsContainer","SimpleRings","nodeAtTimeout","YourLocation","Circle","Utilities","isRings","icon","ArrowSVG","Map","SimilarCitiesMap","filterValues","filterBar","rings","SimilarCitiesRings","allPopulations","allGdppc","populationRange","gdppcRange","CityProximityLegend","mapStyle","getPopupHTMLContent","sorted","proximityDatum","Visualizations","SimilarCity","StickyContainer","LinkBase","sections","firstRender","setFirstRender","onScroll","currentSection","section","root","scrollTo","navLinks","contentSections","About","Contact","LargeTerm","dt","SmallTerm","Definition","Paragraph","GlossaryItem","term","definition","smallLabel","domElmHeight","setDomElmHeight","expandedHeight","setExpandedHeight","setIcon","definitionElm","clientHeight","Term","Faq","pairs","question","answer","index","SurveyWidget","initialize","debug","App","defaultMetaTitle","Provider","exact","Informational","isLocalhost","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","client","ApolloClient","uri","cache","InMemoryCache","fluentValue","URL","origin","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.aa1f6fd0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/growth-lab-logo.cb81eec0.png\";","module.exports = __webpack_public_path__ + \"static/media/cities-logo.03afc905.svg\";","module.exports = __webpack_public_path__ + \"static/media/treemap.21370ddc.png\";","module.exports = __webpack_public_path__ + \"static/media/industry_space.fe933ea1.png\";","module.exports = __webpack_public_path__ + \"static/media/swot.5175caea.png\";","module.exports = __webpack_public_path__ + \"static/media/population.510f7828.svg\";","module.exports = __webpack_public_path__ + \"static/media/ranking.b15df652.svg\";","module.exports = __webpack_public_path__ + \"static/media/gdppercapita.b6ad9a64.svg\";","module.exports = __webpack_public_path__ + \"static/media/datareliability.37b910ab.svg\";","module.exports = __webpack_public_path__ + \"static/media/topindustries.52bc3ab8.svg\";","module.exports = __webpack_public_path__ + \"static/media/topknowledgecluster.85228d9d.svg\";","module.exports = __webpack_public_path__ + \"static/media/topsimilarcities.1e1a8756.svg\";","module.exports = __webpack_public_path__ + \"static/media/growth-lab-dark.f0a47c0d.png\";","module.exports = __webpack_public_path__ + \"static/media/cities-logo-dark.3e3c8089.svg\";","module.exports = __webpack_public_path__ + \"static/media/facebook.69643163.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.f5842b74.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.6ff277fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtube.2288e2de.svg\";","module.exports = __webpack_public_path__ + \"static/media/applepodcast.d774f7e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.3a5f4c44.svg\";","import ReactMapboxGl, {\n  MapContext,\n} from 'react-mapbox-gl';\nimport React from 'react';\nimport SettingsComponent, {Settings} from './ClusterMapSettingsComponent';\nimport {Coordinate} from './Utils';\n\nconst accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN ? process.env.REACT_APP_MAPBOX_ACCESS_TOKEN : '';\n\nconst Mapbox = ReactMapboxGl({\n  accessToken,\n  maxZoom: 16,\n  attributionControl: false,\n});\n\nlet zoom: [number] | undefined;\nconst dimensions = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\nif (dimensions.width < 600 || dimensions.height < 600) {\n  zoom = [1.4];\n}\n\ninterface Props extends Settings {\n  clearPopup: () => void;\n  children?: React.ReactElement<any>;\n  center?: Coordinate;\n  maxBounds?: [Coordinate, Coordinate];\n  fitBounds?: [Coordinate, Coordinate];\n  padding:{top: number, left: number, right: number, bottom: number};\n}\n\nconst DefaultMap = (props: Props) => {\n  const {\n    children, center, padding,\n    maxBounds, fitBounds, clearPopup,\n    ...settings\n  } = props;\n\n  const mapRenderProps = (mapEl: any) => {\n    return (\n      <SettingsComponent\n        map={mapEl}\n        {...settings}\n      />\n    );\n  };\n\n  const onClick = () => clearPopup();\n\n\n  return (\n    <Mapbox\n      // eslint-disable-next-line\n      style={'mapbox://styles/harvardgrowthlab/ckp2oylqb0m5t17mpjailhu2f'}\n      containerStyle={{\n        height: '100%',\n        width: '100%',\n      }}\n      center={center}\n      zoom={zoom}\n      maxBounds={maxBounds}\n      fitBounds={fitBounds}\n      fitBoundsOptions={{padding, linear: true}}\n      onClick={onClick}\n    >\n      {children}\n      <MapContext.Consumer children={mapRenderProps} />\n    </Mapbox>\n  );\n};\n\nexport default DefaultMap;\n","import styled from 'styled-components/macro';\n\nexport const breakPointValues = {\n  width: {\n    medium: 1100,\n    mediumSmall: 900,\n    small: 800,\n  },\n  height: {\n    medium: 768,\n    mediumSmall: 550,\n    small: 500,\n  },\n};\n\nexport const breakPoints = {\n  medium: `screen and (max-width: ${breakPointValues.width.medium}px),\n           screen and (max-height: ${breakPointValues.height.medium}px)`,\n  mediumSmall: `screen and (max-width: ${breakPointValues.width.mediumSmall}px),\n           screen and (max-height: ${breakPointValues.height.mediumSmall}px)`,\n  small: `screen and (max-width: ${breakPointValues.width.small}px),\n          screen and (max-height: ${breakPointValues.height.small}px)`,\n};\n\nconst lines = {\n  rows: {\n    // Horizontal Grid Lines\n    pageTop: 'citiesAtlasGlobalGridPageTop',\n    preHeaderTop: 'citiesAtlasGlobalGridPreHeaderTop',\n    preHeaderBottom: 'citiesAtlasGlobalGridPreHeaderBottom',\n    headerTop: 'citiesAtlasGlobalGridHeaderTop',\n    headerBottom: 'citiesAtlasGlobalGridHeaderBottom',\n    secondaryHeaderTop: 'citiesAtlasGlobalGridSecondaryHeaderTop',\n    secondaryHeaderBottom: 'citiesAtlasGlobalGridSecondaryHeaderBottom',\n    preContentTop: 'citiesAtlasGlobalGridPreContentTop',\n    preContentBottom: 'citiesAtlasGlobalGridPreContentBottom',\n    contentTop: 'citiesAtlasGlobalGridContentTop',\n    contentBottom: 'citiesAtlasGlobalGridContentBottom',\n    postContentTop: 'citiesAtlasGlobalGridPostContentTop',\n    postContentBottom: 'citiesAtlasGlobalGridPostContentBottom',\n    footerTop: 'citiesAtlasGlobalGridFooterTop',\n    footerBottom: 'citiesAtlasGlobalGridFooterBottom',\n    postFooterTop: 'citiesAtlasGlobalGridPostFooterTop',\n    postFooterBottom: 'citiesAtlasGlobalGridPostFooterBottom',\n    pageBottom: 'citiesAtlasGlobalGridPageBottom',\n  },\n  columns: {\n    pageLeft: 'citiesAtlasGlobalGridPageLeft',\n    navLeft: 'citiesAtlasGlobalGridNavLeft',\n    navRight: 'citiesAtlasGlobalGridNavRight',\n    contentLeft: 'citiesAtlasGlobalGridContentLeft',\n    contentRight: 'citiesAtlasGlobalGridContentRight',\n    pageRight: 'citiesAtlasGlobalGridPageRight',\n  },\n};\n\nexport const Root = styled.div`\n  height: 100vh;\n  width: 100%;\n  overflow: hidden;\n  margin: 0;\n  padding: 0;\n  position: relative;\n  z-index: 10;\n  display: grid;\n  grid-template-rows:\n    [${lines.rows.pageTop} ${lines.rows.preHeaderTop}] auto\n    [${lines.rows.preHeaderBottom} ${lines.rows.headerTop}] auto\n    [${lines.rows.headerBottom} ${lines.rows.secondaryHeaderTop}] auto\n    [${lines.rows.secondaryHeaderBottom} ${lines.rows.preContentTop}] auto\n    [${lines.rows.preContentBottom} ${lines.rows.contentTop}] 1fr\n    [${lines.rows.contentBottom} ${lines.rows.postContentTop}] auto\n    [${lines.rows.postContentBottom} ${lines.rows.footerTop}] auto\n    [${lines.rows.footerBottom} ${lines.rows.postFooterTop}] auto\n    [${lines.rows.postFooterBottom} ${lines.rows.pageBottom}];\n\n  grid-template-columns:\n    [${lines.columns.pageLeft} ${lines.columns.navLeft}] auto\n    [${lines.columns.navRight} ${lines.columns.contentLeft}] 1fr\n    [${lines.columns.contentRight} ${lines.columns.pageRight}];\n\n  @media ${breakPoints.small} {\n    height: auto;\n    min-height: 100vh;\n    max-width: 100%;\n  }\n`;\n\n// Informational pages are the same as normal Root but without responsive adjustments\nexport const InformationalPageRoot = styled.div`\n  height: 100vh;\n  width: 100%;\n  overflow: hidden;\n  margin: 0;\n  padding: 0;\n  position: relative;\n  z-index: 10;\n  display: grid;\n  grid-template-rows:\n    [${lines.rows.pageTop} ${lines.rows.preHeaderTop}] auto\n    [${lines.rows.preHeaderBottom} ${lines.rows.headerTop}] auto\n    [${lines.rows.headerBottom} ${lines.rows.secondaryHeaderTop}] auto\n    [${lines.rows.secondaryHeaderBottom} ${lines.rows.preContentTop}] auto\n    [${lines.rows.preContentBottom} ${lines.rows.contentTop}] 1fr\n    [${lines.rows.contentBottom} ${lines.rows.postContentTop}] auto\n    [${lines.rows.postContentBottom} ${lines.rows.footerTop}] auto\n    [${lines.rows.footerBottom} ${lines.rows.postFooterTop}] auto\n    [${lines.rows.postFooterBottom} ${lines.rows.pageBottom}];\n\n  grid-template-columns:\n    [${lines.columns.pageLeft} ${lines.columns.navLeft}] auto\n    [${lines.columns.navRight} ${lines.columns.contentLeft}] 1fr\n    [${lines.columns.contentRight} ${lines.columns.pageRight}];\n  `;\n\nexport const PrimaryHeaderContainer = styled.div`\n  grid-row: ${lines.rows.headerTop} / ${lines.rows.headerBottom};\n  grid-column: ${lines.columns.pageLeft} / ${lines.columns.pageRight};\n`;\nexport const SecondaryHeaderContainer = styled.div`\n  grid-row: ${lines.rows.secondaryHeaderTop} / ${lines.rows.secondaryHeaderBottom};\n  grid-column: ${lines.columns.pageLeft} / ${lines.columns.pageRight};\n`;\nexport const NavigationContainer = styled.div`\n  grid-row: ${lines.rows.contentTop} / ${lines.rows.contentBottom};\n  grid-column: ${lines.columns.navLeft} / ${lines.columns.navRight};\n  display: flex;\n\n  @media ${breakPoints.small} {\n    grid-row: ${lines.rows.preContentTop} / ${lines.rows.preContentBottom};\n    grid-column: ${lines.columns.pageLeft} / ${lines.columns.pageRight};\n    display: block;\n  }\n`;\nexport const ContentContainer = styled.div`\n  grid-row: ${lines.rows.contentTop} / ${lines.rows.contentBottom};\n  grid-column: ${lines.columns.contentLeft} / ${lines.columns.contentRight};\n  background-color: #fff;\n`;\n\nexport const DefaultContentWrapper = styled.div`\n  pointer-events: all;\n  display: contents;\n`;\n\nexport const PageArrowsContainer = styled.div`\n  grid-row: ${lines.rows.postContentTop} / ${lines.rows.postContentBottom};\n  grid-column: ${lines.columns.pageLeft} / ${lines.columns.pageRight};\n`;\n","import styled, {keyframes, css} from 'styled-components/macro';\nimport {breakPoints, breakPointValues} from './GlobalGrid';\nimport {rgba} from 'polished';\n\nexport const baseColor = '#333333'; // dark gray/black color for text\nexport const lightBaseColor = '#7c7c7c'; // light gray color for subtitles and contextual information\nexport const lightBorderColor = '#dcdcdc'; // really light gray color for subtle borders between elements\nexport const mapLabelColor = '#04151b'; // dark blue/black\n\nexport const hoverBackgroundColor = '#f3f3f3'; // really light gray color for use as a hover background color on cards\n\nexport const primaryColor = '#f89570'; // orange\nexport const primaryHoverColor = '#ef8963'; // slightly dark orange\nexport const primaryColorDark = '#f56b39'; // dark orange\nexport const primaryColorLight = '#fdd4c7'; // light orange\nexport const secondaryColor = '#3b848d'; // blue/teal\nexport const tertiaryColor = '#cfbc3c'; // yellow\n\nexport const backgroundMedium = '#e6e7e8'; // dark blue gray\nexport const backgroundDark = '#2e353f'; // dark blue gray\nexport const medGray = '#4d565e';\n\nexport const benchmarkColor = ' #32a58f'; // greenish blue\n\nexport const linkColor = '#6accc2';\n\nexport const errorColor = '#f43a16'; // reddish color\n\nexport const primaryColorRange = [\n  primaryColor,\n  '#f9a180',\n  '#faad90',\n  '#fbc5b1',\n  '#fcd1c1',\n];\n\nexport const sectorColorMap = [\n  { id: '0', color: '#A973BE' },\n  { id: '1', color: '#F1866C' },\n  { id: '2', color: '#FFC135' },\n  { id: '3', color: '#93CFD0' },\n  { id: '4', color: '#488098' },\n  { id: '5', color: '#77C898' },\n  { id: '6', color: '#6A6AAD' },\n  { id: '7', color: '#D35162' },\n  { id: '8', color: '#F28188' },\n];\n\nexport const clusterColorMap = [\n  {id: '1', color: '#999932'}, // Basic Materials\n  {id: '2', color: '#485999'}, // Manufacturing\n  {id: '3', color: '#37AF98'}, // Food\n  {id: '4', color: '#65CEE0'}, // Durables\n  {id: '5', color: '#873261'}, // Logistics\n  {id: '6', color: '#B76274'}, // Services\n  {id: '7', color: '#DDCC77'}, // Finance\n];\n\nexport const intensityColorRange =[\n  '#c2e5fc',\n  '#003e59',\n];\n\nexport const educationColorRange =[\n  '#5aad60',\n  '#eaebcc',\n  '#986faa',\n];\n\nexport const wageColorRange =[\n  '#4a7ab7',\n  '#eaebcc',\n  '#dc3d2d',\n];\n\nexport const primaryFont = \"'Source Sans Pro', sans-serif\";\nexport const secondaryFont = \"'OfficeCodeProWeb', monospace\";\n\nexport const semiBoldFontBoldWeight = 600;\nexport const boldFontWeight = 700;\n\nexport const defaultPadding = 2; // in rems\n\nexport const noOutlineOnFocus = css`\n  &:focus:not(:focus-visible) {\n    outline: none;\n  }\n`;\n\nexport const ContentGrid = styled.div`\n  padding: 0 0.75rem 0.25rem;\n  box-sizing: border-box;\n  display: grid;\n  width: 100%;\n  min-height: 100%;\n  grid-template-rows: auto 1fr auto;\n  grid-template-columns: 1fr 21rem;\n  grid-column-gap: 2rem;\n\n  @media screen and (max-width: 1350px) {\n    grid-template-columns: 1fr 17.5rem;\n    grid-column-gap: 1rem;\n  }\n\n  @media screen and (max-width: ${breakPointValues.width.medium}px) {\n    grid-template-columns: 1fr 14.5rem;\n    grid-column-gap: 1rem;\n  }\n\n  @media screen and (max-width: ${breakPointValues.width.mediumSmall}px) {\n    grid-template-columns: 1fr 11rem;\n  }\n\n  @media ${breakPoints.small} {\n    grid-template-rows: auto auto 80vh auto;\n    grid-template-columns: 1fr;\n  }\n`;\n\nexport const ContentScrollGrid = styled.div`\n  box-sizing: border-box;\n  display: grid;\n  width: 100%;\n  min-height: 100%;\n  grid-template-columns: 21rem 1fr;\n  grid-column-gap: 2rem;\n\n  @media screen and (max-width: 1350px) {\n    grid-template-columns: 17.5rem 1fr;\n    grid-column-gap: 1rem;\n  }\n\n  @media ${breakPoints.small} {\n    grid-template-rows: auto auto;\n    grid-template-columns: 1fr;\n  }\n`;\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n\nexport const fadeInAnimation = css`\n  opacity: 0;\n  animation: ${fadeIn} 0.2s linear 1 forwards;\n`;\n\nexport const BasicLabel = styled.div`\n  text-transform: uppercase;\n  font-weight: 600;\n  font-size: 0.75rem;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\nexport const BasicLabelBackground = styled.span`\n  background-color: rgba(255, 255, 255, 0.7);\n  padding: 0.075rem 0.175rem;\n`;\n\nexport const SearchContainerDark = styled.div`\n  pointer-events: all;\n  width: 100%;\n  margin: 0 auto;\n\n  @media (min-width: 990px) {\n    width: 95%;\n  }\n\n  font-family: ${secondaryFont};\n\n  .react-panel-search-search-bar-input,\n  button {\n    font-family: ${secondaryFont};\n  }\n\n  .react-panel-search-search-bar-input {\n    text-transform: uppercase;\n    font-size: 0.85rem;\n    background-color: ${rgba(backgroundDark, 0.85)};\n    color: #fff;\n    border: solid 1px #fff;\n    padding-top: 1rem;\n    padding-bottom: 1rem;\n    padding-right: 3rem;\n    box-shadow: none;\n    outline: none;\n\n    &::placeholder {\n      color: #fff;\n    }\n\n    &:focus::placeholder {\n      color: rgba(0, 0, 0, 0);\n    }\n  }\n\n  .react-panel-search-search-bar-dropdown-arrow {\n    background-color: transparent;\n\n  }\n  .react-panel-search-current-tier-breadcrumb-outer,\n  .react-panel-search-next-button,\n  .react-panel-search-search-bar-dropdown-arrow {\n    svg polyline {\n      stroke: #fff;\n    }\n  }\n\n  .react-panel-search-search-bar-clear-button {\n    background-color: transparent;\n    color: #fff;\n  }\n\n  .react-panel-search-search-bar-search-icon {\n    svg path {\n      fill: #fff;\n    }\n  }\n\n  .react-panel-search-search-results {\n    background-color: ${rgba(backgroundDark, 0.85)};\n    border: solid 1px #fff;\n\n    ::-webkit-scrollbar-thumb {\n      background-color: rgba(255, 255, 255, .3);\n    }\n    ::-webkit-scrollbar-track {\n      background-color: rgba(255, 255, 255, .1);\n    }\n  }\n\n  .react-panel-search-current-tier-title,\n  .react-panel-search-current-tier-breadcrumb-outer {\n    color: #fff;\n    border-color: ${primaryColor};\n  }\n\n  .react-panel-search-current-tier-breadcrumb-outer:hover {\n    background-color: rgba(255, 255, 255, 0.35);\n  }\n\n  .react-panel-search-list-item {\n    background-color: transparent;\n    color: #fff;\n    &:hover {\n      background-color: rgba(255, 255, 255, 0.35);\n    }\n  }\n\n  .react-panel-search-highlighted-item {\n    background-color: rgba(255, 255, 255, 0.35);\n  }\n\n  .react-panel-search-search-results:hover {\n    .react-panel-search-highlighted-item:not(:hover) {\n      background-color: transparent;\n    }\n  }\n\n  .react-panel-search-list-item-container {\n    strong {\n      color: ${primaryColorDark};\n    }\n  }\n\n  .react-panel-search-list-no-results {\n    color: #fff;\n  }\n`;\n\nexport const SearchContainerLight = styled.div`\n  width: 100%;\n  font-family: ${secondaryFont};\n  letter-spacing: -0.3px;\n\n  .react-panel-search-search-bar-input,\n  button {\n    font-family: ${secondaryFont};\n    letter-spacing: -0.3px;\n  }\n\n  .react-panel-search-search-bar-input {\n    text-transform: uppercase;\n    font-weight: 400;\n    font-size: 0.85rem;\n    border: solid 1px ${lightBaseColor};\n    box-shadow: none;\n    outline: none;\n\n    &:focus::placeholder {\n      color: ${backgroundMedium};\n    }\n  }\n\n  .react-panel-search-current-tier-breadcrumb-outer,\n  .react-panel-search-next-button,\n  .react-panel-search-search-bar-dropdown-arrow {\n    svg polyline {\n      stroke: ${lightBaseColor};\n    }\n  }\n  .react-panel-search-search-bar-dropdown-arrow {\n    width: 1rem;\n  }\n\n  .react-panel-search-search-bar-search-icon {\n    svg path {\n      fill: ${lightBaseColor};\n    }\n  }\n\n  .react-panel-search-search-results {\n    border-left: solid 1px ${lightBaseColor};\n    border-right: solid 1px ${lightBaseColor};\n    border-bottom: solid 1px ${lightBaseColor};\n  }\n\n  .react-panel-search-list-item-container {\n    strong {\n      color: ${primaryColorDark};\n    }\n  }\n\n  .react-panel-search-current-tier-title,\n  .react-panel-search-current-tier-breadcrumb-outer {\n    border-color: ${primaryColor};\n  }\n`;\n\nexport const BlockButton = styled.button`\n  padding: 0.4rem;\n  font-size: 1rem;\n  cursor: pointer;\n  text-align: center;\n  margin-bottom: 0.75rem;\n  border: solid 1px ${backgroundDark};\n  color: ${backgroundDark};\n  background-color: #fff;\n  border-radius: 0;\n  transition: all 0.1s ease-in-out;\n\n  &:hover {\n    color: #fff;\n    background-color: ${backgroundDark};\n  }\n\n  @media ${breakPoints.medium} {\n    font-size: 0.75rem;\n  }\n`;\n\nexport const BlockButtonHighlighted = styled(BlockButton)`\n  background-color: ${backgroundDark};\n  color: #fff;\n\n  &:hover {\n    background-color: ${backgroundDark};\n  }\n`;\n\nexport const FullPageOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 500;\n`;\n\nexport const radioButtonCss = css<{$checked: boolean}>`\n  display: flex;\n  align-items: center;\n  position: relative;\n\n  &:before {\n    content: '';\n    width: 12px;\n    height: 12px;\n    border-radius: 200px;\n    border: solid 1px #fff;\n    margin-right: 4px;\n    flex-shrink: 0;\n  }\n\n  &:after {\n    ${({$checked}) => $checked ? \"content: '';\" : ''}\n    width: 6px;\n    height: 6px;\n    border-radius: 200px;\n    background-color: #fff;\n    transform: translate(4px, 0);\n    position: absolute;\n    flex-shrink: 0;\n  }\n\n\n  &:hover {\n    background-color: #fff;\n    color: ${backgroundDark};\n\n    &:before {\n      border-color: ${backgroundDark};\n    }\n\n    &:after {\n      background-color: ${backgroundDark};\n    }\n  }\n`;\n\nexport const ContentTitle = styled.h2`\n  font-size: 1.25rem;\n  font-weight: 600;\n\n  @media ${breakPoints.medium} {\n    font-size: 1rem;\n  }\n\n  @media ${breakPoints.mediumSmall} {\n    font-size: 0.95rem;\n  }\n\n  @media ${breakPoints.small} {\n    font-size: 1.3rem;\n  }\n`;\n\nexport const ContentParagraph = styled.p`\n  font-size: 0.9rem;\n\n  @media ${breakPoints.medium} {\n    font-size: 0.75rem;\n  }\n\n  @media ${breakPoints.mediumSmall} {\n    font-size: 0.65rem;\n  }\n\n  @media ${breakPoints.small} {\n    font-size: 0.95rem;\n  }\n`;\n\nexport const ButtonBase = styled.button`\n  color: ${backgroundDark};\n  background-color: transparent;\n  text-transform: uppercase;\n  font-family: ${secondaryFont};\n  letter-spacing: -0.3px;\n  display: flex;\n  align-items: center;\n  font-size: 0.75rem;\n  font-size: clamp(0.75rem, 1.1vw, 0.9rem);\n  padding: 0.25rem;\n  padding: clamp(0.25rem, 0.4vw, 0.5rem);\n  flex-shrink: 0;\n\n  span {\n    width: 0.65rem;\n    width: clamp(0.65rem, 1.5vw, 0.85rem);\n    height: 0.65rem;\n    height: clamp(0.65rem, 1.5vw, 0.85rem);\n    display: inline-block;\n    line-height: 0;\n    margin-right: 0.25rem;\n\n    svg {\n      width: 100%;\n      height: 100%;\n      fill: ${backgroundDark};\n    }\n  }\n\n  &:hover {\n    background-color: ${backgroundDark};\n    color: #fff;\n\n    span svg {\n      fill: #fff;\n    }\n  }\n`;\n\nexport const Mult = styled.span`\n  position: relative;\n  bottom: -0.2em;\n`;\nexport const FractionMult = styled.span`\n  position: relative;\n  bottom: -0.5em;\n`;\n\nexport const PointerActiveContainer = styled.div`\n  pointer-events: all;\n`;\n","import { createGlobalStyle } from 'styled-components/macro';\nimport {\n  baseColor,\n  lightBaseColor,\n  semiBoldFontBoldWeight,\n  primaryFont,\n  backgroundDark,\n} from './styleUtils';\n\nconst GlobalStyles = createGlobalStyle`\n  @media(max-width: 600px) {\n    html {\n      font-size: 14px;\n    }\n  }\n  @media(max-width: 450px) {\n    html {\n      font-size: 12px;\n    }\n  }\n\n  body {\n    font-family: ${primaryFont};\n    color: ${baseColor};\n    margin: 0;\n    padding: 0;\n  }\n\n  h1 {\n    font-weight: ${semiBoldFontBoldWeight};\n    font-size: 1.7rem;\n  }\n\n  h2 {\n    font-weight: 400;\n    font-size: 1.4rem;\n    text-transform: uppercase;\n  }\n\n  h3 {\n    font-weight: ${semiBoldFontBoldWeight};\n    font-size: 1.1rem;\n    color: ${lightBaseColor};\n  }\n\n  p {\n    line-height: 1.5;\n    margin: 0 0 1rem;\n  }\n\n  button {\n    cursor: pointer;\n    border: none;\n    width: auto;\n    text-align: inherit;\n    overflow: visible;\n\n    /* Normalize 'line-height'. Cannot be changed from 'normal' in Firefox 4+. */\n    line-height: normal;\n\n    /* Corrects font smoothing for webkit */\n    -webkit-font-smoothing: inherit;\n    -moz-osx-font-smoothing: inherit;\n\n    /* Corrects inability to style clickable 'input' types in iOS */\n    -webkit-appearance: none;\n\n    /* Remove excess padding and border in Firefox 4+ */\n    &::-moz-focus-inner {\n        border: 0;\n        padding: 0;\n    }\n  }\n\n  ol {\n    padding-left: 1rem;\n\n    li {\n      margin-bottom: 0.6rem;\n      font-size: 0.9rem;\n    }\n  }\n\n  .rapid-tooltip-title {\n    padding: 0.5rem;\n  }\n\n  .rapid-tooltip-subsection-grid {\n    display: grid;\n    grid-gap: 0.5rem;\n    padding: 0.5rem;\n    align-items: center;\n  }\n\n  .rapid-tooltip-cell {\n    display: flex;\n  }\n\n  .rapid-tooltip-arrow-container {\n    width: 100%;\n    height: 0.5rem;\n    display: flex;\n    justify-content: center;\n    position: absolute;\n    transform: translate(0, 100%);\n  }\n\n  .rapid-tooltip-arrow {\n    width: 0.5rem;\n    height: 0.5rem;\n    position: relative;\n    display: flex;\n    justify-content: center;\n    left: -0.25rem;\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: 0;\n      border-left: 9px solid transparent;\n      border-right: 9px solid transparent;\n      border-top: 9px solid #dfdfdf;\n    }\n\n    &:after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: 1px;\n      border-left: 8px solid transparent;\n      border-right: 8px solid transparent;\n      border-top: 8px solid #fff;\n    }\n  }\n\n  /********\n      MAPBOX CUSTOM STYLES\n  ********/\n  .mapboxgl-popup {\n    .mapboxgl-popup-content {\n      padding: 0;\n      border-radius: 4px;\n      overflow: hidden;\n      font-size: 0.7rem;\n      line-height: 1.4;\n      color: #333;\n    }\n  }\n\n  /*******\n    TYPEFORM CUSTOM STYLES\n  *******/\n  .typeform-popover {\n    &.open {\n      bottom: 1.5rem;\n      right: 0.5rem;\n    }\n    .typeform-popover-button {\n      width: auto;\n      height: 1.25rem;\n      bottom: 0;\n      right: 0.5rem;\n      border-radius: 0;\n      background-color: ${backgroundDark} !important;\n    }\n\n    .typeform-popover-button-icon {\n      svg {\n        display: none;\n      }\n\n      text-transform: uppercase;\n      font-family: ${primaryFont};\n      font-size: 0.9rem;\n      display: flex;\n      align-items: center;\n\n      &:before {\n        content: \"Help us improve Metroverse\";\n        font-size: 0.75rem;\n        margin-right: 0.5rem;\n      }\n\n      .typeform-spinner {\n        top: auto;\n        left: auto;\n        width: 1rem;\n        height: 1rem;\n        position: relative;\n        margin: 0;\n      }\n\n    }\n\n    @media (min-width: 1385px) {\n      .typeform-popover-button {\n        height: 1.75rem;\n      }\n\n      .typeform-popover-button-icon {\n        &:before {\n          font-size: 0.875rem;\n        }\n      }\n    }\n\n    &:not(.open) {\n      .typeform-popover-button-icon:not([data-testid=\"spinner-icon\"]):after {\n        content: '';\n          border: solid white;\n          border-width: 0 2px 2px 0;\n          display: inline-block;\n          transform: rotate(-135deg) translate(-1px, -3px);\n          padding: 3px;\n      }\n    }\n  }\n`;\n\nexport default GlobalStyles;\n","import {extent} from 'd3';\n\nexport type Latitude = number;\nexport type Longitude = number;\nexport type Coordinate = [Longitude, Latitude];\n\nexport const clusterSourceLayerId = 'cluster_source';\n\nexport const togglePointer = (mapEl: any, cursor: string) => {\n  mapEl.getCanvas().style.cursor = cursor;\n};\n\nexport const getBounds = (coordinates: Coordinate[]): [Coordinate, Coordinate] => {\n  const allLatitudes: Latitude[] = [];\n  const allLongitudes: Longitude[] = [];\n  coordinates.forEach(([lng, lat]) => {\n    allLatitudes.push(lat);\n    allLongitudes.push(lng);\n  });\n\n  const [minLat, maxLat] = extent(allLatitudes);\n  const [minLng, maxLng] = extent(allLongitudes);\n\n  if (minLat === undefined || maxLat === undefined || minLng === undefined || maxLng === undefined) {\n    return [[180, -90], [-180, 90]];\n  }\n\n  return [[maxLng, minLat], [minLng, maxLat]];\n};\n","import React, {useState} from 'react';\nimport {clusterSourceLayerId, togglePointer} from './Utils';\n\nexport interface Settings {\n  mapCallback?: (map: any) => void;\n  unclusteredPointCallback?: (id: string) => void;\n}\n\ninterface Props extends Settings{\n  map: any;\n}\n\n\nconst MapSettingsComponent = (props: Props) => {\n  const {\n    map, mapCallback, unclusteredPointCallback,\n  } = props;\n\n  const [haveSettingsBeenSet, setSettings] = useState<boolean>(false);\n\n  if (map && haveSettingsBeenSet === false) {\n\n    const clusterClick = (e: any) => {\n      const features = map.queryRenderedFeatures(e.point, {\n        layers: ['cluster_count'],\n      });\n      const clusterId = features[0].properties.cluster_id;\n      if (clusterId !== undefined) {\n        map.getSource(clusterSourceLayerId).getClusterExpansionZoom(\n          clusterId,\n          function(err: any, zoom: any) {\n            if (err) {\n              return;\n            }\n            map.easeTo({\n              center: features[0].geometry.coordinates,\n              zoom,\n            });\n          },\n        );\n      }\n    };\n\n    const clusterTextClick = (e: any) => {\n      const features = map.queryRenderedFeatures(e.point, {\n        layers: ['clustered_text'],\n      });\n      const clusterId = features[0].properties.cluster_id;\n      if (clusterId !== undefined) {\n        map.getSource(clusterSourceLayerId).getClusterExpansionZoom(\n          clusterId,\n          function(err: any, zoom: any) {\n            if (err) {\n              return;\n            }\n            map.easeTo({\n              center: features[0].geometry.coordinates,\n              zoom,\n            });\n          },\n        );\n      }\n    };\n\n\n    const unclusteredPointClick = (e: any) => {\n      const features = map.queryRenderedFeatures(e.point, {\n        layers: ['unclustered_point'],\n      });\n      const id = features[0].properties.id;\n      if (id !== undefined) {\n        const sourceData = map.getSource(clusterSourceLayerId);\n        const match = sourceData._data.features.find(({properties}: {properties: {id: string}}) => properties.id === id);\n        if (match) {\n          const animationDuration = 600;\n          map.easeTo({\n            center: match.geometry.coordinates,\n            zoom: 7,\n            duration: animationDuration,\n          });\n          if (unclusteredPointCallback) {\n            unclusteredPointCallback(match.properties.id);\n          }\n        }\n      }\n    };\n\n    const setCursor = () => togglePointer(map, 'pointer');\n    const resetCursor = () => togglePointer(map, '');\n\n    map.on('click', 'cluster_count', clusterClick);\n    map.on('click', 'clustered_text', clusterTextClick);\n    map.on('click', 'unclustered_point', unclusteredPointClick);\n    map.on('mouseenter', 'cluster_count', setCursor);\n    map.on('mouseleave', 'cluster_count', resetCursor);\n\n    if (mapCallback !== undefined) {\n      mapCallback(map);\n    }\n    setSettings(true);\n  }\n\n  return <React.Fragment />;\n};\n\nexport default MapSettingsComponent;\n","import {CompositionType} from '../types/graphQL/graphQLTypes';\n\n// param must be specified in each route in order to enforce typechecking\nexport const cityIdParam = 'cityId';\n\nexport const CityRoutes = {\n  CityBase: '/city/:cityId',\n  CityOverview: '/city/:cityId/overview',\n  CityEconomicComposition: '/city/:cityId/economic-composition',\n  CityGoodAt: '/city/:cityId/good-at',\n  CityGoodAtAbsolutePresence: '/city/:cityId/good-at/absolute',\n  CityGoodAtAbsolutePresenceComparison: '/city/:cityId/good-at/absolute/comparison',\n  CityIndustrySpacePosition: '/city/:cityId/industry-position',\n  CityGrowthOpportunities: '/city/:cityId/growth-opportunities',\n  CityGrowthOpportunitiesTable: '/city/:cityId/growth-opportunities/table',\n  CitySimilarCities: '/city/:cityId/similar-cities',\n} as const;\n\nexport const AboutRoutes = {\n  AboutBase: '/about',\n  AboutWhatIs: '/about/what-is-metroverse',\n  AboutTeam: '/about/team',\n  AboutPilotUserGroup: '/about/pilot-user-group',\n  AboutResearch: '/about/research',\n  AboutGrowthLab: '/about/growth-lab',\n};\n\nexport const ContactRoutes = {\n  ContactBase: '/contact',\n};\n\nexport const FaqRoutes = {\n  FaqBase: '/faq',\n};\n\nexport const Routes = {\n  Landing: '/',\n  ...CityRoutes,\n  ...AboutRoutes,\n  ...ContactRoutes,\n  ...FaqRoutes,\n} as const;\n\nexport enum ClusterMode {\n  outline = 'outline',\n  overlay = 'overlay',\n  none = 'none',\n}\n\nexport const defaultClusterMode: ClusterMode = ClusterMode.outline;\n\nexport enum NodeSizing {\n  uniform = 'uniform',\n  rca = 'rca',\n  globalCompanies = 'global_companies',\n  globalEmployees = 'global_employees',\n  cityCompanies = 'city_companies',\n  cityEmployees = 'city_employees',\n}\n\nexport const defaultNodeSizing: NodeSizing = NodeSizing.cityEmployees;\n\nexport enum ColorBy {\n  sector = 'sector',\n  education = 'education',\n  wage = 'wage',\n}\n\nexport enum CityNodeSizing {\n  uniform = 'uniform',\n  population = 'population',\n  gdpPpp = 'gdpPpp',\n}\n\nexport const defaultCityNodeSizing: CityNodeSizing = CityNodeSizing.population;\n\nexport enum CityColorBy {\n  proximity = 'proximity',\n}\n\nexport enum ClusterLevel {\n  C1 = '1',\n  C2 = '2',\n  C3 = '3',\n}\n\nexport enum AggregationMode {\n  cluster = 'clusters',\n  industries = 'industries',\n}\n\nexport const defaultAggregationMode: AggregationMode = AggregationMode.industries;\n\nexport const defaultClusterLevel: ClusterLevel = ClusterLevel.C3;\nexport const defaultColorBy: ColorBy = ColorBy.sector;\n\nexport interface GlobalQueryParams {\n  country: string | undefined;\n  benchmark: string | undefined;\n  digit_level: string | undefined;\n  composition_type: CompositionType | undefined;\n  aggregation: AggregationMode | undefined;\n  cluster_overlay: ClusterMode | undefined;\n  node_sizing: NodeSizing | undefined;\n  color_by: ColorBy | undefined;\n  city_node_sizing: CityNodeSizing | undefined;\n  city_color_by: CityColorBy | undefined;\n  cluster_level: ClusterLevel | undefined;\n  rca_threshold: string | undefined;\n}\n","import React, {useRef, useEffect} from 'react';\nimport {\n  ExtendedSearchDatum,\n  StyledPopup,\n  TootltipTitle,\n} from './Utils';\nimport styled from 'styled-components/macro';\nimport {Link} from 'react-router-dom';\nimport {CityRoutes} from '../../routing/routes';\nimport {createRoute} from '../../routing/Utils';\nimport {\n  secondaryColor,\n  secondaryFont,\n} from '../../styling/styleUtils';\nimport useFluent from '../../hooks/useFluent';\nimport googleAnalyticsEvent from '../../components/analytics/googleAnalyticsEvent';\n\nconst Title = styled(TootltipTitle)`\n  padding-bottom: 0.75rem;\n  border-bottom: solid 1px #fff;\n  margin: 0 0 1.25rem;\n`;\n\nconst ReviewCityButton = styled(Link)`\n  font-family: ${secondaryFont};\n  text-transform: uppercase;\n  font-size: 0.95rem;\n  display: block;\n  width: 14rem;\n  margin: 1rem auto 0;\n  padding: 0.5rem;\n  display: block;\n  box-sizing: border-box;\n  text-align: center;\n  border: solid 1px #fff;\n  color: #fff;\n  box-shadow: none;\n  transition: all 0.2s ease;\n  transform-origin: top;\n  pointer-events: all;\n  text-decoration: none;\n\n  &:hover {\n    background-color: #fff;\n    color: ${secondaryColor};\n  }\n`;\n\nconst CloseTooltipButton = styled.button`\n  position: absolute;\n  font-size: 1rem;\n  top: 0;\n  right: 0;\n  padding: 0.2rem;\n  color: #fff;\n  background-color: transparent;\n  border: none;\n  box-shadow: none;\n  pointer-events: all;\n`;\n\ninterface Props {\n  highlighted: ExtendedSearchDatum;\n  closePopup: () => void;\n}\n\nenum Action {\n  Profiles = 'Clicked City Profiles',\n  Similarity = 'Clicked City Similarity',\n}\n\nconst HighlightedTooltip = (props: Props) => {\n  const {highlighted, closePopup} = props;\n  const getString = useFluent();\n  const anchorRef = useRef<HTMLAnchorElement | null>(null);\n  useEffect(() => {\n    const node = anchorRef.current;\n    if (node) {\n      node.focus();\n    }\n  }, [anchorRef]);\n  const triggerGoogleAnalyticsEvent = (action: Action) => () => googleAnalyticsEvent('Landing Page Map', action, `for ${highlighted.title}`);\n  return (\n    <StyledPopup\n      coordinates={highlighted.center}\n    >\n      <Title>\n        {highlighted.title}\n      </Title>\n      <ReviewCityButton\n        ref={anchorRef}\n        to={createRoute.city(CityRoutes.CityBase, highlighted.id.toString())}\n        onClick={triggerGoogleAnalyticsEvent(Action.Profiles)}\n      >\n        {getString('landing-page-text-review-the-city')}\n      </ReviewCityButton>\n      <ReviewCityButton\n        to={createRoute.city(CityRoutes.CitySimilarCities, highlighted.id.toString())}\n        onClick={triggerGoogleAnalyticsEvent(Action.Similarity)}\n      >\n        {getString('landing-page-text-review-similar-cities')}\n      </ReviewCityButton>\n      <CloseTooltipButton onClick={closePopup}>×</CloseTooltipButton>\n    </StyledPopup>\n  );\n};\n\nexport default HighlightedTooltip;\n","import {CityRoutes, cityIdParam} from './routes';\n\nexport type ValueOfCityRoutes = typeof CityRoutes[keyof typeof CityRoutes];\n\nexport const createRoute = {\n  city: (route: ValueOfCityRoutes, cityId: string) => route.replace(':' + cityIdParam, cityId),\n};\n","import {\n  ReactLocalization,\n} from 'fluent-react/compat';\nimport {\n  FluentBundle,\n} from 'fluent/compat';\nimport raw from 'raw.macro';\nimport {\n  createContext,\n} from 'react';\n\nexport const POSSESSIVE = ([word]: [string]): string => {\n  const lastCharacter = word[word.length - 1];\n  if (lastCharacter === 's') {\n    return word + \"'\";\n  } else {\n    return word + \"'s\";\n  }\n};\n\nexport const SENTENCE_CASE = ([phrase]: [string]): string => {\n  return phrase.charAt(0).toUpperCase() + phrase.substr(1);\n};\n\n// Taken from https://stackoverflow.com/a/13627586\nexport const ORDINAL_SUFFIX = ([input]: [number]): string => {\n  const j = input % 10, k = input % 100;\n  if (j === 1 && k !== 11) {\n      return 'st';\n  }\n  if (j === 2 && k !== 12) {\n      return 'nd';\n  }\n  if (j === 3 && k !== 13) {\n      return 'rd';\n  }\n  return 'th';\n};\nexport const ORDINAL_NUMBER = ([input]: [number]): string => {\n  return input + ORDINAL_SUFFIX([input]);\n};\n\nconst getLocalizationInfo = (messages: string) => {\n  const bundle = new FluentBundle(['en-US']);\n  bundle.addMessages(messages);\n  function* generateBundles(_locales: string[]) {\n    yield bundle;\n  }\n  const localization = new ReactLocalization(generateBundles(['en-US']));\n  const localizationAndBundle = {localization, bundle};\n  const LocalizationAndBundleContext = createContext(localizationAndBundle);\n  return {\n    localizationAndBundle, LocalizationAndBundleContext,\n  };\n};\n\nconst {\n  localizationAndBundle: appLocalizationAndBundle,\n  LocalizationAndBundleContext: AppLocalizationAndBundleContext,\n} = getLocalizationInfo(raw('./messages.ftl'));\n\nexport {\n  appLocalizationAndBundle, AppLocalizationAndBundleContext,\n};\n","import { GetString } from 'fluent-react/compat';\nimport { useContext } from 'react';\nimport {\n  AppLocalizationAndBundleContext,\n} from '../contextProviders/getFluentLocalizationContext';\n\nexport const possessive = ([word]: [string]): string => {\n  const lastCharacter = word[word.length - 1];\n  if (lastCharacter === 's') {\n    return word + \"'\";\n  } else {\n    return word + \"'s\";\n  }\n};\n\nexport const plural = (word: string): string => {\n  const lastCharacter = word[word.length - 1];\n  if (lastCharacter === 's') {\n    return word + '';\n  } else {\n    return word + 's';\n  }\n};\n\n// Taken from https://stackoverflow.com/a/13627586\nconst ordinalSuffix = ([input]: [number]): string => {\n  const j = input % 10, k = input % 100;\n  if (j === 1 && k !== 11) {\n      return 'st';\n  }\n  if (j === 2 && k !== 12) {\n      return 'nd';\n  }\n  if (j === 3 && k !== 13) {\n      return 'rd';\n  }\n  return 'th';\n};\n\nexport const ordinalNumber = ([input]: [number]) => input + ordinalSuffix([input]);\n\nexport default () => {\n  const {localization} = useContext(AppLocalizationAndBundleContext);\n  const getFluentString: GetString = (...args) => localization.getString(...args);\n  return getFluentString;\n};\n","import {\n  useHistory,\n  matchPath,\n} from 'react-router-dom';\nimport {CityRoutes, cityIdParam} from '../routing/routes';\n\nlet prevCity: string | null = null;\n\nexport default () => {\n  const history = useHistory();\n  const match = matchPath<{[cityIdParam]: string}>(history.location.pathname, CityRoutes.CityBase);\n  const cityId = match && match.params[cityIdParam] ? match.params[cityIdParam] : prevCity;\n  prevCity = cityId;\n  return cityId;\n};\n","import {createContext, useState, useEffect} from 'react';\nimport debounce from 'lodash/debounce';\n\ninterface IAppContext {\n  windowDimensions: {width: number, height: number};\n}\n\nconst initialWindowDimension = {width: window.innerWidth, height: window.innerHeight};\nexport default createContext<IAppContext>({\n  windowDimensions: initialWindowDimension,\n});\n\nexport const useWindowWidth = () => {\n  const [windowDimensions, setWindowDimensions] = useState<IAppContext['windowDimensions']>(initialWindowDimension);\n\n  useEffect(() => {\n    const updateWindowDimensions = debounce(() => {\n      setWindowDimensions({width: window.innerWidth, height: window.innerHeight});\n    }, 500);\n    window.addEventListener('resize', updateWindowDimensions);\n    return () => {\n      window.removeEventListener('resize', updateWindowDimensions);\n    };\n  }, []);\n\n  return windowDimensions;\n};\n","import React, {useState} from 'react';\nimport {PrimaryHeaderContainer} from '../../../styling/GlobalGrid';\nimport styled from 'styled-components/macro';\nimport {\n  secondaryFont,\n  primaryColor,\n  backgroundDark,\n  defaultPadding,\n} from '../../../styling/styleUtils';\nimport raw from 'raw.macro';\nimport {Link, useRouteMatch} from 'react-router-dom';\nimport {Routes} from '../../../routing/routes';\nimport { createRoute } from '../../../routing/Utils';\nimport useFluent from '../../../hooks/useFluent';\nimport useCurrentCityId from '../../../hooks/useCurrentCityId';\nimport {useWindowWidth} from '../../../contextProviders/appContext';\n\nexport const citiesLogoSVG = raw('../../../assets/icons/cities-logo.svg');\nexport const cityIconSVG = raw('../../../assets/icons/city-icon.svg');\n\nconst Root = styled(PrimaryHeaderContainer)`\n  font-family: ${secondaryFont};\n  letter-spacing: -0.3px;\n  background-color: ${backgroundDark};\n  text-transform: uppercase;\n  display: flex;\n  justify-content: space-between;\n  border-bottom: solid 3px ${primaryColor};\n  padding-top: 0.5rem;\n  box-sizing: border-box;\n  pointer-events: auto;\n\n  @media (max-width: 800px) {\n    min-height: 4rem;\n    padding-right: 1rem;\n  }\n`;\n\nconst NavSection = styled.div`\n  display: flex;\n  align-items: flex-end;\n  flex-shrink: 1;\n  margin: 0 0.4rem;\n`;\n\nconst Logo = styled.h1`\n  margin: 0 4rem 0 1rem;\n  width: 10rem;\n  height: 1.5rem;\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    path {\n      fill: #fff;\n    }\n  }\n\n  @media (max-width: 850px) {\n    width: 7.5rem;\n    margin: 0 1.75rem 0 1rem;\n  }\n\n  @media (max-width: 800px) {\n    width: 10rem;\n    height: 1.5rem;\n    margin: 0.75rem 1rem 0 1rem;\n  }\n`;\n\nconst MobileLogo = styled.h1`\n  margin: 1rem 1rem 2rem;\n  width: 10rem;\n  height: 1.5rem;\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    path {\n      fill: #fff;\n    }\n  }\n`;\n\nconst StyledLink = styled(Link)`\n  text-decoration: none;\n`;\n\nconst H2 = styled.h2<{$active: boolean}>`\n  font-weight: 300;\n  padding: 0 ${defaultPadding / 2}rem 1.05rem;\n  display: flex;\n  align-items: flex-end;\n  margin: 0;\n  font-size: 0.8rem;\n  font-size: clamp(0.8rem, 1.75vw, 1.15rem);\n  color: #fff;\n  line-height: 1;\n  position: relative;\n\n  &:after {\n    content: '';\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: ${({$active}) => $active ? '0.4rem' : 0};\n    background-color: ${primaryColor};\n    transition: height 0.075s ease-in-out;\n  }\n\n\n  &:hover {\n    &:after {\n      height: 0.4rem;\n    }\n  }\n\n  @media (max-width: 950px) {\n    font-size: 0.85rem;\n  }\n\n  @media (max-width: 800px) {\n    padding: 0 0.5rem 1.05rem;\n  }\n\n`;\n\nconst MobileH2 = styled(H2)`\n  margin: 1rem;\n  border-bottom: solid 1px ${primaryColor};\n`;\n\nconst NavIcon = styled.div`\n  width: 0.95rem;\n  width: clamp(0.95rem, 1.9vw, 1.45rem);\n  height: 0.95rem;\n  height: clamp(0.95rem, 1.9vw, 1.45rem);\n  margin-right: 0.45rem;\n  line-height: 0;\n\n  @media (max-width: 950px) {\n    width: 1.1rem;\n    height: 1.1rem;\n    margin-right: 0.2rem;\n  }\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    path,\n    rect {\n      fill: #fff;\n    }\n  }\n\n  @media (max-width: 800px) {\n    display: none;\n  }\n`;\n\nconst MobileNavIcon = styled(NavIcon)`\n  @media (max-width: 800px) {\n    display: block;\n  }\n`;\n\nconst MobileMenuButton = styled.button`\n  background-color: transparent;\n  border: none;\n  text-transform: uppercase;\n  width: 3rem;\n  height: 4rem;\n  position: absolute;\n  top: 0;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  font-size: 0.8rem;\n  color: #fff;\n  font-family: ${secondaryFont};\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst Icon = styled.span`\n  display: flex;\n  width: 20px;\n  height: 16px;\n  margin-bottom: 0.25rem;\n  flex-direction: column;\n  justify-content: space-between;\n`;\nconst Bar = styled.span`\n  display: inline-block;\n  width: 100%;\n  height: 0;\n  border-top: 2px solid #fff;\n  transition: all 0.2s ease;\n`;\nconst CenterBar = styled(Bar)`\n  position: relative;\n\n  &:before {\n    content: '';\n    display: inline-block;\n    width: 100%;\n    height: 0;\n    border-top: 2px solid #fff;\n    position: absolute;\n    transform-origin: center;\n    top: -2px;\n    left: 0;\n    transition: all 0.2s ease;\n  }\n\n  &.close__menu {\n    transform: rotate(45deg);\n\n    &:before {\n      transform: rotate(90deg);\n    }\n  }\n`;\n\nconst MobileMenu = styled.div`\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  background-color: ${backgroundDark};\n  z-index: 1000;\n  transition: all 0.2s ease;\n`;\n\nconst Header = () => {\n  const getString = useFluent();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState<boolean>(false);\n  const {width} = useWindowWidth();\n  const matchCity = useRouteMatch(Routes.CityBase);\n  const matchSimilarCities = useRouteMatch(Routes.CitySimilarCities);\n  const matchAbout = useRouteMatch(Routes.AboutBase);\n  const matchContact = useRouteMatch(Routes.ContactBase);\n  const matchFaq = useRouteMatch(Routes.FaqBase);\n  const currentCityId = useCurrentCityId();\n  const similarCitiesRoute = currentCityId ? createRoute.city(Routes.CitySimilarCities, currentCityId) : Routes.CitySimilarCities;\n  const profileCitiesOverviewRoute = currentCityId ? createRoute.city(Routes.CityBase, currentCityId) : Routes.CityBase;\n  if (width <= 800) {\n    const menuButtonText = mobileMenuOpen === false ? getString('global-ui-more') : getString('global-ui-close');\n    const closeMenu = () => setMobileMenuOpen(false);\n    return (\n      <Root>\n        <StyledLink to={Routes.Landing}>\n          <Logo\n            aria-label={getString('global-app-name')}\n            dangerouslySetInnerHTML={{__html: citiesLogoSVG}}\n          />\n        </StyledLink>\n        <NavSection>\n          <MobileMenu\n            style={{transform: mobileMenuOpen ? 'translate(0, 0)' : 'translate(100%, 0)'}}\n          >\n            <StyledLink to={Routes.Landing}>\n              <MobileLogo\n                aria-label={getString('global-app-name')}\n                dangerouslySetInnerHTML={{__html: citiesLogoSVG}}\n              />\n            </StyledLink>\n            <StyledLink to={profileCitiesOverviewRoute}>\n              <MobileH2 $active={Boolean(matchCity && !matchSimilarCities)}>\n                <MobileNavIcon\n                  dangerouslySetInnerHTML={{__html: cityIconSVG}}\n                />\n                {getString('navigation-city-profiles')}\n              </MobileH2>\n            </StyledLink>\n            <StyledLink\n              onClick={closeMenu}\n              to={similarCitiesRoute}\n            >\n              <MobileH2 $active={Boolean(matchSimilarCities)}>\n                {getString('navigation-city-similarity')}\n              </MobileH2>\n            </StyledLink>\n            <StyledLink\n              onClick={closeMenu}\n              to={Routes.AboutWhatIs}\n            >\n              <MobileH2 $active={Boolean(matchAbout)}>\n                {getString('navigation-about')}\n              </MobileH2>\n            </StyledLink>\n            <StyledLink\n              onClick={closeMenu}\n              to={Routes.FaqBase}\n            >\n              <MobileH2 $active={Boolean(matchFaq)}>\n                {getString('navigation-faq')}\n              </MobileH2>\n            </StyledLink>\n            <StyledLink\n              onClick={closeMenu}\n              to={Routes.ContactBase}\n            >\n              <MobileH2 $active={Boolean(matchContact)}>\n                {getString('navigation-contact')}\n              </MobileH2>\n            </StyledLink>\n\n          </MobileMenu>\n          <MobileMenuButton\n            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n            style={{\n              zIndex: mobileMenuOpen ? 2000 : undefined,\n              position: mobileMenuOpen ? 'fixed' : undefined,\n            }}\n          >\n            <Icon>\n              <Bar style={{opacity: mobileMenuOpen ? 0 : undefined}} />\n              <CenterBar className={mobileMenuOpen ? 'close__menu' : undefined} />\n              <Bar style={{opacity: mobileMenuOpen ? 0 : undefined}} />\n            </Icon>\n            {menuButtonText}\n          </MobileMenuButton>\n        </NavSection>\n      </Root>\n    );\n  } else {\n    return (\n      <Root>\n        <StyledLink to={Routes.Landing}>\n          <Logo\n            aria-label={getString('global-app-name')}\n            dangerouslySetInnerHTML={{__html: citiesLogoSVG}}\n          />\n        </StyledLink>\n        <NavSection>\n          <StyledLink to={profileCitiesOverviewRoute}>\n            <H2 $active={Boolean(matchCity && !matchSimilarCities)}>\n              <NavIcon\n                dangerouslySetInnerHTML={{__html: cityIconSVG}}\n              />\n              {getString('navigation-city-profiles')}\n            </H2>\n          </StyledLink>\n          <StyledLink to={similarCitiesRoute}>\n            <H2 $active={Boolean(matchSimilarCities)}>\n              {getString('navigation-city-similarity')}\n            </H2>\n          </StyledLink>\n          <StyledLink to={Routes.AboutWhatIs}>\n            <H2 $active={Boolean(matchAbout)}>\n              {getString('navigation-about')}\n            </H2>\n          </StyledLink>\n          <StyledLink to={Routes.FaqBase}>\n            <H2 $active={Boolean(matchFaq)}>\n              {getString('navigation-faq')}\n            </H2>\n          </StyledLink>\n          <StyledLink to={Routes.ContactBase}>\n            <H2 $active={Boolean(matchContact)}>\n              {getString('navigation-contact')}\n            </H2>\n          </StyledLink>\n        </NavSection>\n      </Root>\n    );\n  }\n};\n\nexport default Header;\n","import React, {useEffect, useRef, useState} from 'react';\nimport { createPortal } from 'react-dom';\nimport styled from 'styled-components/macro';\n\nexport const overlayPortalContainerId = 'overlayPortalContainerId';\n\nconst overlayPortalZIndex = 3000;\n\nexport const OverlayPortal = () => (\n  <div\n    id={overlayPortalContainerId}\n    style={{\n      position: 'relative',\n      zIndex: overlayPortalZIndex,\n    }}\n    tabIndex={-1}\n  />\n);\n\nexport const mobileWidth = 600; // in px\n\nconst Root = styled.div`\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.3);\n`;\n\ninterface Dimensions {\n  width: string;\n  height: string;\n}\n\nconst Container = styled.div<{dimensions: Dimensions}>`\n  position: relative;\n  max-height: 90%;\n  max-width: ${({dimensions: {width}}) => width};\n  height: ${({dimensions: {height}}) => height};\n\n  @media screen and (max-width: ${mobileWidth}px), screen and (max-height: 800px) {\n    max-height: calc(100vh - 4rem);\n    max-width: calc(100vw - 4rem);\n    margin: auto;\n    overflow: auto;\n  }\n`;\n\nconst Content = styled.div`\n  overflow: auto;\n\n  ::-webkit-scrollbar {\n    -webkit-appearance: none;\n    width: 7px;\n  }\n  ::-webkit-scrollbar-thumb {\n    border-radius: 4px;\n    background-color: rgba(0, 0, 0, .3);\n  }\n  ::-webkit-scrollbar-track {\n    background-color: rgba(0, 0, 0, .1);\n  }\n\n  @media screen and (max-width: ${mobileWidth}px), screen and (max-height: 800px) {\n    overflow: visible;\n  }\n`;\n\nexport interface Props {\n  children: React.ReactNode;\n  onClose: (() => void) | undefined;\n  width: string;\n  height: string;\n}\n\nconst Modal = (props: Props) => {\n  const {\n    children, onClose, width, height,\n  } = props;\n\n  const overlayPortalContainerNodeRef = useRef<HTMLElement | null>(null);\n\n  const [isModalRendered, setIsModalRendered] = useState<boolean>(false);\n\n  useEffect(() => {\n    const node = document.querySelector<HTMLElement>(`#${overlayPortalContainerId}`);\n    if (node !== null) {\n      overlayPortalContainerNodeRef.current = node;\n      overlayPortalContainerNodeRef.current.focus();\n      setIsModalRendered(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    const closeOnEsc = (e: KeyboardEvent) => e.key === 'Escape' && onClose ? onClose() : null;\n    document.addEventListener('keydown', closeOnEsc);\n    return () => document.removeEventListener('keydown', closeOnEsc);\n  }, [onClose]);\n\n  let modal: React.ReactElement<any> | null;\n  if (isModalRendered === true && overlayPortalContainerNodeRef.current !== null) {\n    modal = createPortal((\n      <Root>\n        <Overlay onClick={onClose} />\n        <Container dimensions={{width, height}}>\n          <Content>\n            {children}\n          </Content>\n        </Container>\n      </Root>\n    ), overlayPortalContainerNodeRef.current);\n  } else {\n    modal = null;\n  }\n\n  return modal;\n};\n\nexport default Modal;\n","import React from 'react';\nimport Modal, {Props} from './';\nimport styled, {keyframes} from 'styled-components/macro';\nimport {\n  backgroundDark,\n  secondaryFont,\n} from '../../styling/styleUtils';\nimport useFluent from '../../hooks/useFluent';\n\nconst growIn = keyframes`\n  0% {\n    transform: scale(0.4);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n`;\n\nconst Root = styled.div`\n  background-color: ${backgroundDark};\n  position: relative;\n  animation: ${growIn} 0.1s normal forwards ease-in-out;\n  animation-iteration-count: 1;\n  color: #fff;\n  height: 100%;\n  box-sizing: border-box;\n\n  @media screen and (max-height: 800px) {\n    overflow: visible;\n  }\n`;\n\nconst CloseButton = styled.button`\n  background-color: transparent;\n  border-none;\n  padding: 0.5rem;\n  color: #fff;\n  text-transform: uppercase;\n  font-size: 1.25rem;\n  font-family: ${secondaryFont};\n  position: absolute;\n  right: 0;\n  top: 0;\n`;\n\nexport default (props: Props) => {\n  const {children, ...rest} = props;\n  const getString = useFluent();\n  const closeButton = props.onClose\n    ? <CloseButton onClick={props.onClose}>✕ {getString('global-ui-close')}</CloseButton>\n    : null;\n  return (\n    <Modal {...rest}>\n      <Root>\n        {children}\n        {closeButton}\n      </Root>\n    </Modal>\n  );\n};\n","import React, {useState} from 'react';\nimport styled from 'styled-components/macro';\nimport {\n  primaryFont,\n  secondaryFont,\n  primaryColor,\n} from '../../styling/styleUtils';\nimport raw from 'raw.macro';\nimport {\n  citiesLogoSVG,\n  cityIconSVG,\n} from '../../components/navigation/header';\nimport useFluent from '../../hooks/useFluent';\nimport BasicModal from '../../components/standardModal/BasicModal';\n\nconst mapPanSVG = raw('../../assets/icons/map-pan.svg');\n\nconst Root = styled.div`\n  font-family: ${secondaryFont};\n  pointer-events: none;\n  color: #fff;\n  text-transform: uppercase;\n`;\n\nconst Logo = styled.h1`\n  position: fixed;\n  z-index: 300;\n  top: 0;\n  right: 0;\n  margin: 1rem 2rem;\n  width: 12rem;\n  height: 2.5rem;\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    path {\n      fill: #fff;\n    }\n  }\n`;\n\nconst H2 = styled.h2`\n  font-weight: 400;\n  margin: 1rem 0;\n  padding: 0 0 0.35rem 0;\n  border-bottom: solid 0.3rem ${primaryColor};\n  display: flex;\n  align-items: flex-end;\n  pointer-events: all;\n\n  @media (max-width: 850px) {\n    font-size: 1.2rem;\n  }\n`;\n\nconst CityIcon = styled.div`\n  width: 2.5rem;\n  height: 2.5rem;\n  margin-right: 0.45rem;\n\n  @media (max-width: 850px) {\n    width: 1.75rem;\n    height: 1.75rem;\n  }\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    path,\n    rect {\n      fill: #fff;\n    }\n  }\n`;\n\nconst Description = styled.h3`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  margin: 4rem 0;\n  color: #fff;\n  font-weight: 400;\n  font-size: 1.2rem;\n\n  @media (max-width: 850px) {\n    font-size: 0.95rem;\n    margin: 1.85rem 0;\n  }\n`;\n\nconst Or = styled.span`\n  display: flex;\n  flex-direction: column;\n  height: 5rem;\n  align-items: center;\n  margin: 0 1.5rem;\n\n  &:before,\n  &:after {\n    content: '';\n    display: block;\n    flex-grow: 1;\n    border-left: solid 2px #fff;\n  }\n`;\n\nconst UseMapText = styled.span`\n  display: flex;\n  align-items: center;\n`;\n\nconst MapPanIcon = styled.span`\n  display: inline-block;\n  width: 2.4rem;\n  height: 2.4rem;\n  margin-right: 0.85rem;\n\n  @media (max-width: 850px) {\n    width: 1.75rem;\n    height: 1.75rem;\n  }\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    path {\n      fill: #fff;\n    }\n  }\n`;\n\nconst WhatIsACityLinkContainer = styled.div`\n  margin: 0 auto 1.1rem;\n  display: block;\n  width: 100%;\n\n  @media (min-width: 990px) {\n    width: 85%;\n  }\n`;\n\nconst WhatIsACityLink = styled.button`\n  pointer-events: all;\n  background-color: transparent;\n  border: none;\n  color: #fff;\n  font-family: ${primaryFont};\n  font-size: 0.85rem;\n  padding: 0.5rem;\n  border: solid 1px #fff;\n  background-color: rgba(0,0,0,0.85);\n  text-transform: uppercase;\n\n  &:hover {\n    background-color: #fff;\n    color: #08111e;\n  }\n`;\n\nexport const ModalContent = styled.div`\n  background-color: #08111e;\n  padding: 3rem 1.75rem 1.75rem;\n\n  strong {\n    color: ${primaryColor};\n    font-weight: 400;\n  }\n\n  a {\n    color: #fff;\n  }\n`;\n\nconst Heading = () => {\n  const getString = useFluent();\n  const [cityModalOpen, setCityModalOpen] = useState<boolean>(false);\n  const openModal = () => setCityModalOpen(true);\n  const closeModal = () => setCityModalOpen(false);\n  const modal = cityModalOpen ? (\n    <BasicModal\n      width={'400px'}\n      height={'auto'}\n      onClose={closeModal}\n    >\n      <ModalContent>\n        <p\n          dangerouslySetInnerHTML={{__html: getString('landing-page-text-what-is-city-para-1')}}\n        />\n        <p\n          dangerouslySetInnerHTML={{__html: getString('landing-page-text-what-is-city-para-2')}}\n        />\n      </ModalContent>\n    </BasicModal>\n  ) : null;\n  return (\n    <Root>\n      <Logo\n        dangerouslySetInnerHTML={{__html: citiesLogoSVG}}\n        aria-label={getString('global-app-name')}\n      />\n      <H2>\n        <CityIcon\n          dangerouslySetInnerHTML={{__html: cityIconSVG}}\n        />\n        {getString('navigation-pick-a-city')}\n      </H2>\n      <Description>\n        <span>{getString('global-ui-type-a-city-name')}</span>\n        <Or>{getString('landing-page-text-or')}</Or>\n        <UseMapText>\n          <MapPanIcon\n            dangerouslySetInnerHTML={{__html: mapPanSVG}}\n          />\n          {getString('landing-page-text-use-the-map')}\n        </UseMapText>\n      </Description>\n      <WhatIsACityLinkContainer>\n        <WhatIsACityLink onClick={openModal}>\n          {getString('landing-page-text-what-is-city-link')}\n        </WhatIsACityLink>\n      </WhatIsACityLinkContainer>\n      {modal}\n    </Root>\n  );\n};\n\nexport default Heading;\n","import {Datum as SearchDatum} from 'react-panel-search';\nimport {\n  Coordinate,\n} from '../../components/map/Utils';\nimport { Popup } from 'react-mapbox-gl';\nimport styled from 'styled-components/macro';\nimport {\n  secondaryColor,\n  secondaryFont,\n} from '../../styling/styleUtils';\n\nexport interface ExtendedSearchDatum extends SearchDatum {\n  center: Coordinate;\n  coordinates: Coordinate[];\n  population: number;\n  gdp: number;\n}\n\nexport const StyledPopup = styled(Popup)`\n  /* && needed to override global styling */\n  && .mapboxgl-popup-content {\n    border-radius: 0;\n    padding: 1rem 1.1rem;\n    position: relative;\n    background-color: ${secondaryColor};\n    color: #fff;\n    font-family: ${secondaryFont};\n    pointer-events: none;\n    box-shadow: 0px 0px 2px 1px rgb(0 0 0 / 50%);\n  }\n\n  .mapboxgl-popup-tip {\n    visibility: hidden;\n  }\n`;\n\nexport const TootltipTitle = styled.h2`\n  text-transform: uppercase;\n  font-size: 1.1rem;\n  font-weight: 400;\n  margin: 0;\n  text-align: center;\n`;\n","const googleAnalyticsEvent = (category: string, action: string, label: string) => {\n  if (process.env.NODE_ENV === 'production') {\n    (window as any).ga('send', {\n      hitType: 'event',\n      eventCategory: category,\n      eventLabel: label,\n      eventAction: action,\n    });\n  }\n};\n\nexport default googleAnalyticsEvent;\n","import React, { useLayoutEffect, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport { lightBorderColor, backgroundDark } from '../../styling/styleUtils';\nimport { overlayPortalContainerId } from '../standardModal';\nimport raw from 'raw.macro';\n\nconst infoCircleSVG =  raw('../../assets/icons/info-circle.svg');\n\nexport enum TooltipPosition {\n  Automatic = 'automatic',\n  Bottom = 'bottom',\n}\n\nexport enum TooltipTheme {\n  Light = 'light',\n  Dark = 'dark',\n}\n\nconst farEndOfScreenToggleClass = 'tooltip-at-right-end-of-screen';\nexport const arrowContainerClassName = 'tooltip-arrow-container-class';\nconst flipArrowClassName = 'tooltip-arrow-flip-side-class';\n\n//#region Styling\nconst Root = styled.span`\n  cursor: help;\n  width: 0.7rem;\n  height: 0.7rem;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 10000px;\n  margin: 0 0.4rem;\n`;\n\nconst MoreInformationI = styled.span`\n  display: inline-block;\n  width: 0.7rem;\n  height: 0.7rem;\n  line-height: 0;\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    circle {\n      fill: ${backgroundDark};\n    }\n\n    path {\n      fill: #fff;\n    }\n  }\n`;\n\nconst TooltipBase = styled.div<{$theme: TooltipTheme | undefined, $overrideStyles: boolean | undefined}>`\n  position: fixed;\n  z-index: 3000;\n  max-width: 16rem;\n  font-size: 0.7rem;\n  line-height: 1.4;\n  text-transform: none;\n  ${({$overrideStyles}) => $overrideStyles ? 'padding-bottom: 0.5rem;' : 'padding: 0.5rem;'}\n  opacity: 0;\n  transition: opacity 0.15s ease;\n  color: ${backgroundDark};\n  background-color: ${({$theme}) => $theme === TooltipTheme.Dark ? backgroundDark : '#fff'};\n  color: ${({$theme}) => $theme === TooltipTheme.Dark ? '#fff' : backgroundDark};\n  border: 1px solid ${({$theme}) => $theme === TooltipTheme.Dark ? backgroundDark : lightBorderColor};\n  border-radius: 4px;\n  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.15);\n  pointer-events: none;\n\n  &.${farEndOfScreenToggleClass} .${arrowContainerClassName} {\n    justify-content: flex-end;\n    padding-right: 0.7rem;\n    box-sizing: border-box;\n  }\n\n  &.${flipArrowClassName} .${arrowContainerClassName} {\n    transform: translate(0, -100%);\n    top: 0;\n\n    div {\n      &:before {\n        top: -1px;\n        transform: rotate(180deg);\n      }\n\n      &:after {\n        transform: rotate(180deg);\n      }\n    }\n  }\n`;\n\nconst ArrowContainer = styled.div<{$position: TooltipPosition | undefined}>`\n  width: 100%;\n  height: 0.5rem;\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  transform: ${({$position}) => $position === TooltipPosition.Bottom\n    ? 'translate(0, -100%)'\n    : 'translate(0, 100%)'};\n  ${({$position}) => $position === TooltipPosition.Bottom\n    ? 'top: 0;'\n    : ''}\n`;\n\nconst Arrow = styled.div<{$theme: TooltipTheme | undefined, $position: TooltipPosition | undefined}>`\n  width: 0.5rem;\n  height: 0.5rem;\n  position: relative;\n  z-index: -1;\n  display: flex;\n  justify-content: center;\n  transform: translate(-150%, 0);\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: ${({$position}) => $position === TooltipPosition.Bottom\n      ? '-1px' : '0'\n    };\n    left: 0;\n    border-left: 9px solid transparent;\n    border-right: 9px solid transparent;\n    border-top: 9px solid ${({$theme}) => $theme === TooltipTheme.Dark ? backgroundDark : lightBorderColor};\n    ${({$position}) => $position === TooltipPosition.Bottom\n      ? 'transform: rotate(180deg);'\n      : ''}\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 1px;\n    border-left: 8px solid transparent;\n    border-right: 8px solid transparent;\n    border-top: 8px solid ${({$theme}) => $theme === TooltipTheme.Dark ? backgroundDark : '#fff'};\n    ${({$position}) => $position === TooltipPosition.Bottom\n      ? 'transform: rotate(180deg);'\n      : ''}\n  }\n`;\n\nconst GenericSpan = styled.span`\n  cursor: help;\n`;\n//#endregion\nlet timeout: number;\n\ninterface Props {\n  explanation: React.ReactNode | null;\n  children?: React.ReactNode;\n  cursor?: string;\n  theme?: TooltipTheme;\n  tooltipPosition?: TooltipPosition;\n  overrideStyles?: boolean;\n  delay?: number;\n}\n\nconst Tooltip = (props: Props) => {\n  const {\n    explanation, children, cursor, theme, tooltipPosition, overrideStyles, delay,\n  } = props;\n  const rootEl = useRef<HTMLDivElement | null>(null);\n  const tooltipEl = useRef<HTMLDivElement | null>(null);\n  const overlayPortalContainerNodeRef = useRef<HTMLElement | null>(null);\n\n  const [isTooltipShown, setIsTooltipShown] = useState<boolean>(false);\n  const [coords, setCoords] = useState<{top: number, left: number}>({top: 0, left: 0});\n\n  useLayoutEffect(() => {\n    const node = document.querySelector<HTMLElement>(`#${overlayPortalContainerId}`);\n    overlayPortalContainerNodeRef.current = node;\n    const tooltipElm = tooltipEl.current;\n    const rootElm = rootEl.current;\n    if (tooltipElm !== null && rootElm !== null) {\n      const {top, left} = coords;\n      const tooltipSpacing = 15;\n      const tooltipHeight = tooltipElm.offsetHeight;\n      const tooltipWidth = tooltipElm.offsetWidth;\n      let tooltipTopValue = top - tooltipSpacing - tooltipHeight;\n      let tooltipLeftValue = left - (tooltipWidth / 2);\n      if (tooltipTopValue < 0 || tooltipPosition === TooltipPosition.Bottom) {\n        // tooltip will be above the window\n        tooltipTopValue = top + (tooltipSpacing * 2);\n        tooltipElm.classList.add(flipArrowClassName);\n      } else {\n        tooltipElm.classList.remove(flipArrowClassName);\n      }\n      if (tooltipLeftValue < tooltipSpacing) {\n        tooltipLeftValue = tooltipSpacing;\n      }\n      if ((tooltipLeftValue + (tooltipWidth + tooltipSpacing)) > window.innerWidth) {\n        // tooltip will exceed the windows width\n        tooltipLeftValue = window.innerWidth - tooltipWidth - tooltipSpacing;\n      }\n      if (window.innerWidth - left < tooltipSpacing * 3) {\n        // tooltip is at the far end of the screen\n        tooltipElm.classList.add(farEndOfScreenToggleClass);\n      } else {\n        tooltipElm.classList.remove(farEndOfScreenToggleClass);\n      }\n      tooltipElm.style.cssText = `\n        left: ${tooltipLeftValue}px;\n        top: ${tooltipTopValue}px;\n        opacity: 1;\n      `;\n    }\n  }, [isTooltipShown, coords, tooltipPosition]);\n  const overlayPortalContainerNode = overlayPortalContainerNodeRef.current;\n\n  const arrow = overrideStyles ? null : (\n    <ArrowContainer $position={tooltipPosition} className={arrowContainerClassName}>\n      <Arrow $theme={theme} $position={tooltipPosition} />\n    </ArrowContainer>\n  );\n\n  let tooltip: React.ReactPortal | null;\n  if (isTooltipShown !== false && overlayPortalContainerNode !== null && explanation) {\n    tooltip = ReactDOM.createPortal((\n      <TooltipBase\n        ref={tooltipEl}\n        $theme={theme}\n        $overrideStyles={overrideStyles}\n      >\n        {explanation}\n        {arrow}\n      </TooltipBase>\n    ), overlayPortalContainerNode);\n  } else {\n    tooltip = null;\n  }\n\n  const onMouseEnter = (e: React.MouseEvent<HTMLSpanElement>) => {\n    setCoords({top: e.clientY, left: e.clientX});\n    if (delay) {\n      timeout = setTimeout(() => setIsTooltipShown(true), delay) as any;\n    } else {\n      setIsTooltipShown(true);\n    }\n  };\n  const onMouseLeave = (e: React.MouseEvent<HTMLSpanElement>) => {\n    setCoords({top: e.clientY, left: e.clientX});\n    clearTimeout(timeout);\n    setIsTooltipShown(false);\n  };\n  const onMouseMove = (e: React.MouseEvent<HTMLSpanElement>) => {\n    setCoords({top: e.clientY, left: e.clientX});\n  };\n\n  if (children !== undefined) {\n    return (\n      <GenericSpan\n        onMouseEnter={onMouseEnter}\n        onMouseMove={onMouseMove}\n        onMouseLeave={onMouseLeave}\n        ref={rootEl}\n        style={{cursor}}\n      >\n        {children}\n        {tooltip}\n      </GenericSpan>\n    );\n  } else {\n    return (\n      <Root\n        onMouseEnter={onMouseEnter}\n        onMouseMove={onMouseMove}\n        onMouseLeave={onMouseLeave}\n        style={{cursor}}\n        ref={rootEl}\n      >\n        <MoreInformationI\n          dangerouslySetInnerHTML={{__html: infoCircleSVG}}\n        />\n        {tooltip}\n      </Root>\n    );\n  }\n};\n\nexport default Tooltip;\n","import React from 'react';\nimport styled, {keyframes} from 'styled-components/macro';\n\nconst baseSize = 30; // in px\n\nconst Ring = styled.div<{size: number | undefined}>`\n  display: inline-block;\n  position: relative;\n  width: ${({size}) => size ? size : baseSize}px;\n  height: ${({size}) => size ? size : baseSize}px;\n  margin-right: 0.6rem;\n`;\nconst animation = keyframes`\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst ChildBase = styled.div<{themeColor: string | undefined, size: number | undefined}>`\n  box-sizing: border-box;\n  display: block;\n  position: absolute;\n  width: ${({size}) => size ? size * 0.8 : baseSize * 0.8}px;\n  height: ${({size}) => size ? size * 0.8 : baseSize * 0.8}px;\n  margin: ${({size}) => size ? size * 0.1 : baseSize * 0.1}px;\n  border: ${({size}) => size ? size * 0.1 : baseSize * 0.1}px\n          solid ${({themeColor}) => themeColor ? themeColor : '#bebebe'};\n  border-radius: 50%;\n  animation: ${animation} 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n  border-color: ${({themeColor}) => themeColor ? themeColor : '#bebebe'} transparent transparent transparent;\n`;\n\nconst FirstChild = styled(ChildBase)`\n  animation-delay: -0.45s;\n`;\nconst SecondChild = styled(ChildBase)`\n  animation-delay: -0.3s;\n`;\nconst ThirdChild = styled(ChildBase)`\n  animation-delay: -0.15s;\n`;\n\ninterface Props {\n  color?: string;\n  size?: number; // in px\n}\n\nconst SimpleLoader = (props: Props) => {\n  const {color, size} = props;\n  return (\n    <Ring size={size}>\n      <FirstChild themeColor={color} size={size}></FirstChild>\n      <SecondChild themeColor={color} size={size}></SecondChild>\n      <ThirdChild themeColor={color} size={size}></ThirdChild>\n      <ChildBase themeColor={color} size={size}></ChildBase>\n    </Ring>\n  );\n};\n\nexport default SimpleLoader;\n","import React from 'react';\nimport useFluent from '../../hooks/useFluent';\nimport styled from 'styled-components/macro';\n\nconst Root = styled.div`\n  font-style: italic;\n  opacity: 0.75;\n  font-size: 0.8rem;\n  padding: 0.5rem;\n`;\n\nexport default ({fluentMessageId, color}: {fluentMessageId?: string, color?: string}) => {\n  const getString = useFluent();\n  const message = fluentMessageId ? getString(fluentMessageId) : getString('global-ui-basic-data-error');\n  return <Root style={{color}}>{message}</Root>;\n};\n","import React, {useState, useEffect, useCallback} from 'react';\nimport ClusterMap from '../../components/map/ClusterLandingMap';\nimport styled from 'styled-components/macro';\nimport { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl';\nimport {\n  clusterSourceLayerId,\n  togglePointer,\n  Coordinate,\n  getBounds,\n} from '../../components/map/Utils';\nimport {\n  secondaryColor,\n  primaryColor,\n  primaryColorRange,\n  mapLabelColor,\n  secondaryFont,\n} from '../../styling/styleUtils';\nimport Heading from './Heading';\nimport {\n  ExtendedSearchDatum,\n  StyledPopup,\n  TootltipTitle,\n} from './Utils';\nimport HighlightedTooltip from './HighlightedTooltip';\nimport { useQuery, gql } from '@apollo/client';\nimport {\n  ClassificationCountry,\n  ClassificationCity,\n} from '../../types/graphQL/graphQLTypes';\nimport SimpleLoader from '../../components/transitionStateComponents/SimpleLoader';\nimport SimpleError from '../../components/transitionStateComponents/SimpleError';\nimport SearchBar from './SearchBar';\nimport useFluent from '../../hooks/useFluent';\nimport useQueryParams from '../../hooks/useQueryParams';\nimport Overlay from './Overlay';\n\nconst GLOBAL_LOCATION_WITH_GEOMETRY_QUERY = gql`\n  query GetGlobalLocationData {\n    countries: classificationCountryList {\n      countryId\n      nameShortEn\n      id\n    }\n    cities: classificationCityList {\n      cityId\n      name\n      nameList\n      centroidLat\n      centroidLon\n      countryId\n      geometry\n      population15\n      gdppc\n      id\n    }\n  }\n`;\n\nexport interface SuccessResponse {\n  countries: {\n    countryId: ClassificationCountry['countryId'],\n    nameShortEn: ClassificationCountry['nameShortEn'],\n    id: ClassificationCountry['id'],\n  }[];\n  cities: {\n    cityId: ClassificationCity['cityId'],\n    name: ClassificationCity['name'],\n    nameList: ClassificationCity['nameList'],\n    centroidLat: ClassificationCity['centroidLat'],\n    centroidLon: ClassificationCity['centroidLon'],\n    countryId: ClassificationCity['countryId'],\n    geometry: ClassificationCity['geometry'],\n    population15: ClassificationCity['population15'],\n    gdppc: ClassificationCity['gdppc'],\n    id: ClassificationCity['id'],\n  }[];\n}\n\nexport const useGlobalLocationGeometry = () => useQuery<SuccessResponse, never>(GLOBAL_LOCATION_WITH_GEOMETRY_QUERY);\n\ninterface ClusterFeatures {\n  type: 'Feature';\n  properties: {\n    id: string,\n  };\n  geometry: {\n    coordinates: Coordinate,\n  };\n}\n\ninterface MapData {\n  searchData: ExtendedSearchDatum[];\n  features: React.ReactElement<any>[];\n  geoJsonClusterData: {\n    type: string,\n    features: ClusterFeatures[],\n  };\n}\n\ninterface BoundsConfig {\n  bounds: [Coordinate, Coordinate];\n  padding: {top: number, left: number, right: number, bottom: number};\n}\n\nlet padding: BoundsConfig['padding'];\nconst dimensions = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\nif (dimensions.width < 600 || dimensions.height < 600) {\n  padding = {\n    top: dimensions.height * 0.5,\n    bottom: 10,\n    right: dimensions.width * 0.1,\n    left: dimensions.width * 0.1,\n  };\n} else if (dimensions.width < 800 || dimensions.height < 800) {\n  padding = {\n    top: dimensions.height * 0.25,\n    bottom: dimensions.height * 0.1,\n    right: dimensions.width * 0.1,\n    left: dimensions.width * 0.4,\n  };\n} else {\n  padding = {\n    top: dimensions.height * 0.25,\n    bottom: dimensions.height * 0.1,\n    right: dimensions.width * 0.1,\n    left: dimensions.width / 2,\n  };\n}\n\nconst Root = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: relative;\n  background-color: #08111e;\n`;\n\nconst SidePanel = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  background-color: rgba(0, 0, 0, 0.45);\n  pointer-events: none;\n  padding: 1rem;\n  box-sizing: border-box;\n\n  @media (min-width: 750px) {\n    width: 40vw;\n    max-width: 600px;\n    min-width: 400px;\n    bottom: 0;\n    z-index: 200;\n  }\n`;\n\nconst SearchContainer = styled.div`\n  pointer-events: all;\n  width: 100%;\n  margin: auto;\n\n  @media (min-width: 990px) {\n    width: 85%;\n  }\n\n  font-family: ${secondaryFont};\n\n  .react-panel-search-search-bar-input,\n  button {\n    font-family: ${secondaryFont};\n  }\n\n  .react-panel-search-search-bar-input {\n    text-transform: uppercase;\n    font-size: 0.85rem;\n    background-color: rgba(0, 0, 0, 0.85);\n    color: #fff;\n    border: solid 1px #fff;\n    padding-top: 1rem;\n    padding-bottom: 1rem;\n    padding-right: 3rem;\n    box-shadow: none;\n    outline: none;\n\n    &::placeholder {\n      color: #fff;\n    }\n\n    &:focus::placeholder {\n      color: rgba(0, 0, 0, 0);\n    }\n  }\n\n  .react-panel-search-search-bar-dropdown-arrow {\n    background-color: transparent;\n\n  }\n  .react-panel-search-current-tier-breadcrumb-outer,\n  .react-panel-search-next-button,\n  .react-panel-search-search-bar-dropdown-arrow {\n    svg polyline {\n      stroke: #fff;\n    }\n  }\n\n  .react-panel-search-search-bar-clear-button {\n    background-color: transparent;\n    color: #fff;\n  }\n\n  .react-panel-search-search-bar-search-icon {\n    svg path {\n      fill: #fff;\n    }\n  }\n\n  .react-panel-search-search-results {\n    background-color: rgba(0, 0, 0, 0.85);\n    border: solid 1px #fff;\n\n    ::-webkit-scrollbar-thumb {\n      background-color: rgba(255, 255, 255, .3);\n    }\n    ::-webkit-scrollbar-track {\n      background-color: rgba(255, 255, 255, .1);\n    }\n  }\n\n  .react-panel-search-current-tier-title,\n  .react-panel-search-current-tier-breadcrumb-outer {\n    color: #fff;\n    border-color: ${primaryColor};\n  }\n\n  .react-panel-search-current-tier-breadcrumb-outer:hover {\n    background-color: rgba(255, 255, 255, 0.35);\n  }\n\n  .react-panel-search-list-item {\n    background-color: transparent;\n    color: #fff;\n    &:hover {\n      background-color: rgba(255, 255, 255, 0.35);\n    }\n  }\n\n  .react-panel-search-highlighted-item {\n    background-color: rgba(255, 255, 255, 0.35);\n  }\n\n  .react-panel-search-search-results:hover {\n    .react-panel-search-highlighted-item:not(:hover) {\n      background-color: transparent;\n    }\n  }\n\n  .react-panel-search-list-item-container {\n    strong {\n      color: ${primaryColor};\n    }\n  }\n\n  .react-panel-search-list-item-container.react-panel-search-list-no-results {\n    color: #fff;\n  }\n`;\n\nconst LoadingContainer = styled.div`\n  font-size: 1rem;\n  line-height: 0;\n  display: flex;\n  align-items: center;\n  height: 3.1875rem;\n  text-transform: uppercase;\n  font-size: 0.85rem;\n  background-color: rgba(0, 0, 0, 0.35);\n  color: rgba(255, 255, 255, 0.75);\n  border: solid 1px #fff;\n  padding-left: 0.5rem;\n`;\n\nconst Landing = () => {\n  const {loading, error, data} = useGlobalLocationGeometry();\n  const getString = useFluent();\n  const {country} = useQueryParams();\n\n  const [mapData, setMapData] = useState<MapData>({\n    searchData: [],\n    features: [],\n    geoJsonClusterData: {\n      type: 'FeatureCollection',\n      features: [],\n    },\n  });\n  const [overlayOn, setOverlayOn] = useState<boolean>(country === undefined);\n  const closeOverlay = () => setOverlayOn(false);\n  const [highlighted, setHighlighted] = useState<ExtendedSearchDatum | null>(null);\n  const [highlightedCountry, setHighlightedCountry] = useState<ExtendedSearchDatum | null>(null);\n  const [hovered, setHovered] = useState<ExtendedSearchDatum | null>(null);\n  const [fitBounds, setFitBounds] = useState<BoundsConfig>({bounds: getBounds([]), padding: {top: 0, bottom: 0, left: 0, right: 0}});\n\n  useEffect(() => {\n    if (highlighted) {\n      setFitBounds({\n        bounds: getBounds(highlighted.coordinates),\n        padding,\n      });\n      closeOverlay();\n    }\n  }, [highlighted]);\n\n  useEffect(() => {\n    if (highlightedCountry) {\n      let countryPadding: BoundsConfig['padding'] = {top: 50, bottom: 50, left: 50, right: 50};\n      const childCities = mapData.searchData.filter(d => d.parent_id === highlightedCountry.id);\n      if (childCities.length === 1) {\n        countryPadding = padding;\n      }\n      setFitBounds({\n        bounds: getBounds(highlightedCountry.coordinates),\n        padding: countryPadding,\n      });\n    }\n  }, [highlightedCountry, mapData]);\n\n  useEffect(() => {\n    if (country !== undefined && mapData.searchData) {\n      const targetCountry = mapData.searchData.find(d => (d.id + '') === (country + '') && d.level === '0');\n      setHighlightedCountry(targetCountry ? targetCountry : null);\n      setHighlighted(targetCountry ? targetCountry : null);\n    }\n  }, [country, mapData]);\n\n  useEffect(() => {\n    if (data !== undefined) {\n      const searchData: ExtendedSearchDatum[] = [];\n      const features: React.ReactElement<any>[] = [];\n      const clusterFeatures: ClusterFeatures[] = [];\n      const {cities, countries} = data;\n      cities.forEach(city => {\n        const {\n          cityId, name, centroidLon, countryId, geometry,\n          population15, gdppc, nameList,\n        } = city;\n        const coordinates: Coordinate[][][] = geometry ? JSON.parse(geometry).coordinates : [];\n        const northernTerminus = Math.max(...coordinates[0][0].map(coord => coord[1]));\n        const center: Coordinate = [centroidLon ? centroidLon : 0, northernTerminus];\n        const parent = countries.find(c => parseInt(c.countryId, 10) === countryId);\n        const countryName = parent && parent.nameShortEn ? parent.nameShortEn : '';\n        const parentIndex = searchData.findIndex(d => d.id === countryId);\n        const population = population15 ? population15 : 0;\n        const gdp = gdppc && !isNaN(gdppc) ? parseFloat(gdppc.toFixed(2)) : 0;\n        if (parentIndex === -1 && parent !== undefined && countryId !== null && parent.nameShortEn) {\n          searchData.push({\n            id: countryId,\n            title: countryName,\n            parent_id: null,\n            level: '0',\n            center,\n            population: Math.round(population),\n            gdp,\n            coordinates: coordinates[0][0],\n          });\n        } else if (parentIndex !== -1) {\n          searchData[parentIndex].coordinates = [...searchData[parentIndex].coordinates, ...coordinates[0][0]];\n          searchData[parentIndex].gdp += gdp;\n          searchData[parentIndex].population += population;\n        } else {\n          console.error(city);\n        }\n        const id = cityId;\n        const searchDatum: ExtendedSearchDatum = {\n          id,\n          title: name + ', ' + countryName,\n          parent_id: countryId,\n          level: '1',\n          center,\n          coordinates: coordinates[0][0],\n          population: Math.round(population),\n          gdp,\n          keywords: nameList ? nameList : undefined,\n        };\n        searchData.push(searchDatum);\n        const onMouseEnter = (event: any) => {\n          setHovered(searchDatum);\n          togglePointer(event.map, 'pointer');\n        };\n        const onMouseLeave = (event: any) => {\n          setHovered(null);\n          togglePointer(event.map, '');\n        };\n        const onClick = () => setTimeout(() => setHighlighted(searchDatum), 0);\n        features.push(\n          <Feature\n            coordinates={coordinates[0]}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onClick={onClick}\n            key={'geojson-' + id}\n          />,\n        );\n        clusterFeatures.push({\n          type: 'Feature',\n          properties: { id },\n          geometry: { coordinates: center },\n        });\n      });\n      const geoJsonClusterData = {\n        type: 'FeatureCollection',\n        features: clusterFeatures,\n      };\n      setMapData({searchData, features, geoJsonClusterData});\n    }\n  }, [data]);\n\n  const hoveredTooltipPopup = hovered && (!highlighted || highlighted.id !== hovered.id) ? (\n    <StyledPopup\n      coordinates={hovered.center}\n    >\n      <TootltipTitle>\n        {hovered.title}\n      </TootltipTitle>\n    </StyledPopup>\n  ) : null;\n\n  const highlightedTooltipPopup = highlighted && highlighted.parent_id !== null ? (\n    <HighlightedTooltip\n      highlighted={highlighted}\n      closePopup={() => setHighlighted(null)}\n    />\n  ) : null;\n\n  const onPanelHover = useCallback((val: ExtendedSearchDatum | null) => {\n    if (val && val.parent_id !== null) {\n      setHovered(val);\n    } else {\n      setHovered(null);\n    }\n  }, [setHovered]);\n\n  const onTraverseLevel = useCallback((val: ExtendedSearchDatum, direction: 'asc' | 'desc') => {\n    if (direction === 'asc' && val.parent_id === null) {\n      setFitBounds({\n        bounds: getBounds([]),\n        padding: {top: 0, bottom: 0, left: 0, right: 0},\n      });\n    }\n    setHighlightedCountry(val as ExtendedSearchDatum);\n  }, [setHighlightedCountry, setFitBounds]);\n\n  const unclusteredPointCallback = (id: string) => {\n    const match = mapData.searchData.find(d => d.id === id);\n    if (match) {\n      setTimeout(() => setHighlighted(match), 0);\n    }\n  };\n\n  let mapContent: React.ReactElement<any>;\n  let searchBar: React.ReactElement<any>;\n  if (loading === true) {\n    mapContent = <></>;\n    searchBar = (\n      <LoadingContainer>\n        <SimpleLoader />\n        {getString('global-ui-loading-cities')}...\n      </LoadingContainer>\n    );\n  } else if (error !== undefined) {\n    console.error(error);\n    mapContent = <></>;\n    searchBar = (\n      <LoadingContainer>\n        <SimpleError color={'white'} />\n      </LoadingContainer>\n    );\n  } else if (data !== undefined) {\n    mapContent = (\n        <>\n          <GeoJSONLayer\n            id={clusterSourceLayerId}\n            data={mapData.geoJsonClusterData}\n            sourceOptions={{\n              cluster: true,\n              clusterRadius: 30,\n            }}\n            filter={['has', 'point_count']}\n          />\n          <Layer\n            id='cluster_count'\n            sourceId={clusterSourceLayerId}\n            maxZoom={4}\n            layerOptions={{\n              filter: [\n                'has', 'point_count',\n              ],\n            }}\n            paint={{\n              'circle-color': {\n                property: 'point_count',\n                type: 'interval',\n                stops: [\n                  [0, primaryColorRange[4]],\n                  [30, primaryColorRange[3]],\n                  [60, primaryColorRange[2]],\n                  [90, primaryColorRange[1]],\n                  [120, primaryColorRange[0]],\n                  [1000, primaryColorRange[0]],\n                ],\n              },\n              'circle-radius': {\n                property: 'point_count',\n                type: 'interval',\n                stops: [\n                  [0, 15],\n                  [30, 20],\n                  [60, 25],\n                  [90, 35],\n                  [120, 45],\n                  [1000, 45],\n                ],\n              },\n            }}\n            type='circle'\n          />\n          <Layer\n            type='circle'\n            id={'unclustered_point'}\n            maxZoom={4}\n            sourceId={clusterSourceLayerId}\n            paint={{\n              'circle-color': primaryColorRange[4],\n              'circle-radius': 5,\n            }}\n            filter={['!', ['has', 'point_count']]}\n          />\n          <Layer\n            type='symbol'\n            id={'clustered_text'}\n            maxZoom={4}\n            sourceId={clusterSourceLayerId}\n            layout={{\n              'text-field': '{point_count}',\n              'text-font': [\n                'DIN Offc Pro Medium',\n                'Arial Unicode MS Bold',\n              ],\n              'text-size': 12,\n            }}\n            paint={{\n              'text-color': mapLabelColor,\n            }}\n            filter={['has', 'point_count']}\n          />\n\n          <Layer\n            type='fill'\n            id={'primary-map-geojson-layer'}\n            paint={{\n              'fill-color': primaryColor,\n            }}\n            minZoom={4}\n            before={'road-simple'}\n          >\n            {mapData.features}\n          </Layer>\n\n          <Layer\n            type='fill'\n            id={'highlighted-geojson-layer'}\n            paint={{\n              'fill-color': secondaryColor,\n            }}\n            minZoom={4}\n            before={'road-simple'}\n          >\n            {mapData.features.filter(({key}) =>\n              (highlighted && key === 'geojson-' + highlighted.id) ||\n              (hovered && key === 'geojson-' + hovered.id),\n            )}\n          </Layer>\n          {highlightedTooltipPopup}\n          {hoveredTooltipPopup}\n        </>\n    );\n    searchBar = (\n      <SearchBar\n        data={mapData.searchData}\n        setHighlighted={setHighlighted}\n        onPanelHover={onPanelHover}\n        onTraverseLevel={onTraverseLevel}\n        highlighted={highlighted}\n        focusOnRender={true}\n      />\n    );\n  } else {\n    mapContent = <></>;\n    searchBar = <></>;\n  }\n\n  const overlay = overlayOn ? <Overlay onCitySelect={closeOverlay} /> : (\n    <SidePanel>\n      <Heading />\n      <SearchContainer\n        onMouseDown={() => setHovered(null)}\n      >\n        {searchBar}\n      </SearchContainer>\n    </SidePanel>\n  );\n\n  return (\n    <Root>\n\n      <ClusterMap\n        unclusteredPointCallback={unclusteredPointCallback}\n        clearPopup={() => setHighlighted(null)}\n        fitBounds={fitBounds.bounds}\n        padding={fitBounds.padding}\n      >\n        {mapContent}\n      </ClusterMap>\n      {overlay}\n    </Root>\n  );\n\n};\n\nexport default Landing;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport Tooltip, {TooltipTheme} from '../../components/general/Tooltip';\nimport {secondaryFont, baseColor} from '../styleUtils';\nimport useFluent from '../../hooks/useFluent';\n\nconst RootDark = styled.small`\n  color: rgba(255, 255, 255, 0.5);\n  width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: block;\n\n  .panel-search-matched-keyword {\n    color: #fff;\n  }\n`;\n\nconst RootLight = styled.small`\n  color: rgba(0, 0, 0, 0.5);\n  width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: block;\n\n  .panel-search-matched-keyword {\n    color: ${baseColor};\n  }\n`;\n\nconst KeywordText = styled.div`\n  font-family: ${secondaryFont};\n`;\n\n\nconst KeywordElement = ({keywords, theme, query}: {keywords: string, theme: TooltipTheme, query: string}) => {\n  const safeQuery = new RegExp(query.replace(/[^\\w\\s]/gi, '').trim(), 'gi');\n  const getString = useFluent();\n  const text = getString('global-ui-includes-keywords', {keywords});\n  const __html = getString('global-ui-includes-keywords', {keywords})\n    .replace(safeQuery, (match: string) => `<strong class='panel-search-matched-keyword'>${match}</strong>`);\n  const Root = theme === TooltipTheme.Dark ? RootDark : RootLight;\n  return (\n    <Tooltip\n      explanation={<KeywordText>{text}</KeywordText>}\n      delay={500}\n      theme={theme}\n    >\n      <Root dangerouslySetInnerHTML={{__html}} />\n    </Tooltip>\n  );\n};\n\nexport default (theme: TooltipTheme) => (match: string[], rest: string[], query: string) => {\n  const total = match.length + rest.length;\n  if (!(match.length === total && rest.length === 0) && !(rest.length === total && match.length === 0)) {\n    const keywords = [...match, ...rest].join(', ');\n    return <KeywordElement keywords={keywords} theme={theme} query={query} />;\n  } else {\n    return null;\n  }\n};\n","import React from 'react';\nimport {\n  ExtendedSearchDatum,\n} from './Utils';\nimport PanelSearch from 'react-panel-search';\nimport useFluent from '../../hooks/useFluent';\nimport matchingKeywordFormatter from '../../styling/utils/panelSearchKeywordFormatter';\nimport {TooltipTheme} from '../../components/general/Tooltip';\n\ninterface Props {\n  data: ExtendedSearchDatum[];\n  setHighlighted: (val: ExtendedSearchDatum) => void;\n  onPanelHover: (val: ExtendedSearchDatum | null) => void;\n  onTraverseLevel: (val: ExtendedSearchDatum, direction: 'asc' | 'desc') => void;\n  highlighted: ExtendedSearchDatum | null;\n  focusOnRender: boolean;\n}\n\nconst SearchBar = (props: Props) => {\n  const {\n    data, setHighlighted, onPanelHover, onTraverseLevel,\n    highlighted, focusOnRender,\n  } = props;\n  const getString = useFluent();\n  return (\n    <PanelSearch\n      data={data}\n      topLevelTitle={getString('global-text-countries')}\n      onSelect={(val) => setHighlighted(val as ExtendedSearchDatum)}\n      onHover={onPanelHover}\n      onTraverseLevel={onTraverseLevel}\n      selectedValue={highlighted}\n      disallowSelectionLevels={['0']}\n      defaultPlaceholderText={getString('global-ui-type-a-city-name')}\n      showCount={true}\n      resultsIdentation={1.75}\n      focusOnRender={focusOnRender}\n      matchingKeywordFormatter={matchingKeywordFormatter(TooltipTheme.Dark)}\n    />\n  );\n};\n\nexport default React.memo(SearchBar);\n","import queryString from 'query-string';\nimport {\n  GlobalQueryParams,\n} from '../routing/routes';\nimport {\n  useHistory,\n} from 'react-router-dom';\n\nexport default () => {\n  const history = useHistory();\n  const params = queryString.parse(history.location.search) as unknown as GlobalQueryParams;\n  return params;\n};\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport {rgba} from 'polished';\nimport {\n  secondaryFont,\n  primaryColor,\n  primaryHoverColor,\n} from '../../styling/styleUtils';\nimport {\n  citiesLogoSVG,\n  cityIconSVG,\n} from '../../components/navigation/header';\nimport useFluent from '../../hooks/useFluent';\nimport GrowthLabLogoPNG from '../../assets/branding/growth-lab-logo.png';\n\nconst Root = styled.div`\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  pointer-events: none;\n  z-index: 100;\n`;\n\nconst Content = styled.div`\n  padding: 1rem;\n  background-color: ${rgba('#08111e', 0.9)};\n  pointer-events: all;\n  color: #fff;\n  display: grid;\n  grid-template-areas:\n    \"gl logo .\"\n    \"questions questions questions\"\n    \"paragraph paragraph paragraph\"\n    \". click .\"\n    \"footer footer footer\";\n  grid-template-columns: 1fr auto 1fr;\n  grid-row-gap: 1.5rem;\n  max-width: 700px;\n  max-height: 100%;\n  overflow: auto;\n  ::-webkit-scrollbar {\n    -webkit-appearance: none;\n    width: 7px;\n  }\n  ::-webkit-scrollbar-thumb {\n    border-radius: 4px;\n    background-color: rgba(255, 255, 255, .3);\n  }\n  ::-webkit-scrollbar-track {\n    background-color: rgba(255, 255, 255, .1);\n  }\n\n  a {\n    color: ${primaryColor};\n\n    &:hover {\n      color: ${primaryHoverColor};\n    }\n  }\n\n  @media (max-height: 800px) {\n    max-width: 600px;\n    grid-template-columns: 0 auto 0;\n  }\n`;\n\nconst GrowthLabLogo = styled.div`\n  grid-area: gl;\n  position: relative;\n\n  img {\n    width: 170px;\n    max-width: 100%;\n    min-width: 90px;\n    @media (max-width: 600px) {\n      position: absolute;\n      min-width: 120px;\n      top: -1rem;\n    }\n  }\n`;\n\nconst CityverseLogo = styled.div`\n  grid-area: logo;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Logo = styled.h1`\n  margin: 3rem 3rem 0;\n  width: 13.75rem;\n  height: 3rem;\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    path {\n      fill: #fff;\n    }\n  }\n`;\n\nconst TitleSubtext = styled.h2`\n  font-size: 0.875rem;\n  margin: 0;\n  font-weight: 400;\n  text-transform: none;\n`;\n\nconst IntroQuestions = styled.div`\n  grid-area: questions;\n  font-size: 0.875rem;\n  line-height: 1.75;\n  padding: 0 3rem 0;\n  opacity: 0.8;\n\n  @media (max-height: 800px) {\n    padding: 0 0.875rem 0;\n    font-size: 0.8rem;\n  }\n`;\n\nconst IntroP = styled.div`\n  grid-area: paragraph;\n  font-size: 0.875rem;\n  line-height: 1.75;\n  padding: 0 3rem 0.5rem;\n  padding: 0 3rem clamp(0.5rem, 0.5vh, 2rem);\n  opacity: 0.8;\n\n  @media (max-height: 800px) {\n    padding: 0 0.875rem 0.5rem;\n    padding: 0 0.875rem clamp(0.5rem, 0.5vh, 2rem);\n    font-size: 0.8rem;\n  }\n`;\n\nconst IntroFooter = styled.div`\n  grid-area: footer;\n  font-size: 0.875rem;\n  line-height: 1.75;\n  padding: 0 3rem 0.7rem;\n  opacity: 0.8;\n\n  @media (max-height: 800px) {\n    padding: 0 0.875rem 0.7rem;\n    font-size: 0.8rem;\n  }\n`;\n\nconst StartButtons = styled.div`\n  grid-area: click;\n  font-family: ${secondaryFont};\n  font-size: 1.2rem;\n  text-transform: uppercase;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  @media (max-height: 800px) {\n    font-size: 0.9rem;\n  }\n`;\n\nconst PickCityButton = styled.button`\n  font-family: ${secondaryFont};\n  font-size: 1.2rem;\n  text-transform: uppercase;\n  color: #fff;\n  border: solid 1px #fff;\n  background-color: transparent;\n  padding: 0.875rem;\n  margin: 1.25rem 0 0.75rem;\n  margin: 1.25rem 0 clamp(0.75rem, 1vh, 3rem);\n  display: flex;\n  align-items: center;\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    path,\n    rect {\n      fill: #fff;\n    }\n  }\n\n  &:hover {\n    cursor: pointer;\n    color: #08111e;\n    background-color: #fff;\n\n    svg {\n      path,\n      rect {\n        fill: #08111e;\n      }\n    }\n  }\n\n  @media (max-height: 800px) {\n    font-size: 0.9rem;\n    margin: 0.875rem 0 0.75rem;\n    padding: 0.65rem;\n  }\n`;\n\nconst CityIcon = styled.div`\n  width: 2rem;\n  height: 2rem;\n  margin-right: 0.45rem;\n`;\n\ninterface Props {\n  onCitySelect: () => void;\n}\n\nconst Overlay = ({onCitySelect}: Props) => {\n  const getString = useFluent();\n\n  return (\n    <Root>\n      <Content>\n        <GrowthLabLogo>\n          <a\n            href='https://growthlab.cid.harvard.edu/'\n            target='_blank'\n            rel='noopener noreferrer'\n          >\n            <img\n              src={GrowthLabLogoPNG}\n              aria-label={'The Growth at Lab at the Center for International Development at the Harvard Kennedy School'}\n              title={'The Growth at Lab at the Center for International Development at the Harvard Kennedy School'}\n              alt={'The Growth at Lab at the Center for International Development at the Harvard Kennedy School'}\n            />\n          </a>\n        </GrowthLabLogo>\n        <CityverseLogo>\n          <Logo\n            dangerouslySetInnerHTML={{__html: citiesLogoSVG}}\n            aria-label={getString('global-app-name')}\n          />\n          <TitleSubtext>\n            {getString('landing-overlay-subtitle')}\n          </TitleSubtext>\n        </CityverseLogo>\n        <IntroQuestions dangerouslySetInnerHTML={{__html: getString('landing-overlay-questions')}} />\n        <IntroP>{getString('landing-overlay-p1')}</IntroP>\n        <StartButtons>\n          To Start\n          <PickCityButton onClick={onCitySelect}>\n            <CityIcon\n              dangerouslySetInnerHTML={{__html: cityIconSVG}}\n            />\n            Pick a city\n          </PickCityButton>\n        </StartButtons>\n        <IntroFooter dangerouslySetInnerHTML={{__html: getString('landing-overlay-footnote')}} />\n      </Content>\n    </Root>\n  );\n};\n\nexport default Overlay;\n","export enum DigitLevel {\n  Sector = 1,\n  Two = 2,\n  Three = 3,\n  Four = 4,\n  Five = 5,\n  Six = 6,\n}\nexport enum ClusterLevel {\n  C1 = 1,\n  C2 = 2,\n  C3 = 3,\n}\n\nexport const defaultDigitLevel: DigitLevel = DigitLevel.Three;\n\nexport enum CompositionType {\n  Companies = 'establishments',\n  Employees = 'employees',\n}\n\nexport const defaultCompositionType: CompositionType = CompositionType.Employees;\n\n\nexport interface ClassificationNaicsIndustry {\n  naicsId: string;\n  code: string;\n  name: string | null;\n  level: DigitLevel | null;\n  parentId: number | null;\n  parentCode: string | null;\n  codeHierarchy: string | null;\n  naicsIdHierarchy: string | null;\n  naicsIdTopParent: number;\n  tradable: boolean;\n  id: string;\n}\n\nexport enum IncomeClassType {\n  HIC = 'HIC',\n  UMIC = 'UMIC',\n  LMIC = 'LMIC',\n  LIC = 'LIC',\n  OTHER = 'OTHER',\n}\n\nexport enum DevGroupType {\n  MDR = 'MDR',\n  LDC = 'LDC',\n  LDCL = 'LDCL',\n}\n\nexport type GeoJSONString = string;\n\nexport enum DataFlagType {\n  GREEN = 'GREEN',\n  ORANGE = 'ORANGE',\n  YELLOW = 'YELLOW',\n  RED = 'RED',\n}\n\nexport interface ClassificationCity {\n  cityId: string;\n  name: string | null;\n  included: boolean | null;\n  regionId: number | null;\n  countryId: number | null;\n  nameList: string[] | null;\n  centroidLat: number | null;\n  centroidLon: number | null;\n  area: number | null;\n  crossBorder: boolean | null;\n  numCountries: number | null;\n  countryList: string | null;\n  avgElevation: number | null;\n  climateClass: string | null;\n  avgPrecip14: number | null;\n  avgTemp14: number | null;\n  builtArea15: number | null;\n  population15: number | null;\n  builtAreaPc15: number | null;\n  gdpPpp15: number | null;\n  gdppc: number | null;\n  incomeClass: IncomeClassType | null;\n  devGroup: DevGroupType | null;\n  travelTimeToCapital: number | null;\n  avgGreenness14: number | null;\n  concentrationPm2514: number | null;\n  potentialFloodArea: number | null;\n  potentialFloodBuiltArea15: number | null;\n  potentialFloodPop15: number | null;\n  potentialStormSurgeArea: number | null;\n  potentialStormSurgeBuiltArea15: number | null;\n  potentialStormSurgePop15: number | null;\n  earthquakeMmiClass: number | null;\n  heatwaveMaxIndex: number | null;\n  landUseEfficiency15: number | null;\n  popGreenArea15: number | null;\n  openSpace15: number | null;\n  regionGdppcRank: number | null;\n  regionPopRank: number | null;\n  geometry: GeoJSONString | null;\n  dataFlag: DataFlagType;\n  id: string;\n}\n\nexport interface ClassificationCountry {\n  countryId: string;\n  code: string | null;\n  nameEn: string | null;\n  nameShortEn: string | null;\n  regionId: number;\n  id: string;\n}\n\nexport interface ClassificationRegion {\n  regionId: string;\n  regionName: string;\n  subregionId: string;\n  subregionName: string;\n  regionCity: {\n    edges: {\n      node: ClassificationCity[],\n    },\n  };\n  subregionCity: {\n    edges: {\n      node: ClassificationCity[],\n    },\n  };\n  id: string;\n}\n\nexport interface CityIndustryYear {\n  cityId: string;\n  naicsId: string;\n  year: string;\n  numEmploy: number | null;\n  numCompany: number | null;\n  level: DigitLevel | null;\n  rcaNumEmploy: number | null;\n  rcaNumCompany: number | null;\n  densityEmploy: number | null;\n  densityCompany: number | null;\n  id: string;\n}\n\nexport interface GlobalIndustryYear {\n  naicsId: number;\n  naicsIdTopParent: number;\n  year: number;\n  level: number;\n  sumNumCompany: number;\n  sumNumEmploy: number;\n  avgNumCompany: number;\n  avgNumEmploy: number;\n}\n\nexport interface CityClusterYear {\n  cityId: string;\n  clusterId: string;\n  level: number | null;\n  year: string;\n  numEmploy: number | null;\n  numCompany: number | null;\n  rcaNumEmploy: number | null;\n  rcaNumCompany: number | null;\n  id: string;\n}\n\nexport interface ClassificationNaicsCluster {\n  clusterId: string;\n  parentId: number | null;\n  clusterIdTopParent: number | null;\n  level: number | null;\n  name: string | null;\n  shortName: string | null;\n  tradable: boolean;\n  id: string;\n}\n\nexport interface GlobalIndustryAgg {\n  naicsId: number;\n  naicsIdTopParent: number;\n  year: number;\n  level: number;\n  sumNumCompany: number;\n  sumNumEmploy: number;\n  avgNumCompany: number;\n  avgNumEmploy: number;\n}\n\nexport interface CityPartner {\n  cityId: string;\n  partnerId: string;\n  proximity: number | null;\n  eucdist: number | null;\n  id: string;\n}\n\nexport interface NaicsIndustry {\n  naicsId: string;\n  yearsEducation: number;\n  hourlyWage: number;\n  jobs: number;\n  valueAdded: number;\n  acidRain: number;\n  freshwaterEcotoxicity: number;\n  eutrophication: number;\n  climateChange: number;\n  healthCancer: number;\n  healthNoncancer: number;\n  healthRespiratoryEffects: number;\n  healthCancerNoncancer: number;\n  ozoneDepletion: number;\n  smog: number;\n  hazardousAirPollutantRelease: number;\n  metalRelease: number;\n  pesticideRelease: number;\n  energyUse: number;\n  landUse: number;\n  mineralMetalUse: number;\n  nonrenewableEnergyUse: number;\n  renewableEnergyUse: number;\n  waterUse: number;\n  id: string;\n  level: DigitLevel | null;\n}\n\nexport interface ClusterIndustry {\n  clusterId: string;\n  level: ClusterLevel;\n  yearsEducation: number;\n  hourlyWage: number;\n  id: string;\n}\n\nexport enum PeerGroup {\n  GlobalPopulation = 'global_pop',\n  GlobalIncome = 'global_income',\n  GlobalEuclideanDistance = 'global_eucdist',\n  RegionalPopulation = 'regional_pop',\n  RegionalIncome = 'regional_income',\n  RegionalEuclideanDistance = 'regional_eucdist',\n  Region = 'region',\n}\n\nexport const isValidPeerGroup = (value: any) =>\n  value === PeerGroup.GlobalPopulation ||\n  value === PeerGroup.GlobalIncome ||\n  value === PeerGroup.GlobalEuclideanDistance ||\n  value === PeerGroup.RegionalPopulation ||\n  value === PeerGroup.RegionalIncome ||\n  value === PeerGroup.RegionalEuclideanDistance ||\n  value === PeerGroup.Region;\n\nexport interface NaicsRcaCalculation {\n  cityId: number | null;\n  naicsId: number | null;\n  level: number | null;\n  year: number | null;\n  rca: number | null;\n  rcaLb: number | null;\n  rcaUb: number | null;\n  comparableIndustry: boolean;\n}\n\nexport interface ClusterRcaCalculation {\n  cityId: number | null;\n  clusterId: number | null;\n  level: number | null;\n  year: number | null;\n  rca: number | null;\n  rcaLb: number | null;\n  rcaUb: number | null;\n  comparableIndustry: boolean;\n}\n\nexport interface NaicsPeerEconStruct {\n  naicsId: number;\n  level: DigitLevel;\n  year: number;\n  totalEmployCount: number;\n  avgEmployCount: number;\n  avgEmployShare: number;\n  totalCompanyCount: number;\n  avgCompanyCount: number;\n  avgCompanyShare: number;\n}\n\nexport interface ClusterPeerEconStruct {\n  clusterId: number;\n  level: ClusterLevel;\n  year: number;\n  totalEmployCount: number;\n  avgEmployCount: number;\n  avgEmployShare: number;\n  totalCompanyCount: number;\n  avgCompanyCount: number;\n  avgCompanyShare: number;\n}\n\nexport interface NaicsDensityRescale {\n  cityId: number;\n  naicsId: number;\n  level: DigitLevel | null;\n  year: number | null;\n  densityEmploy: number | null;\n  densityCompany: number | null;\n}\nexport interface ClusterDensityRescale {\n  cityId: number;\n  clusterId: number;\n  level: ClusterLevel | null;\n  year: number | null;\n  densityEmploy: number | null;\n  densityCompany: number | null;\n}\nexport interface CityPeerGroupCounts {\n  cityId: number;\n  globalPop: number;\n  regionalPop: number;\n  globalIncome: number;\n  regionalIncome: number;\n  globalProximity: number;\n  regionalProximity: number;\n  globalEucdist: number;\n  regionalEucdist: number;\n  region: number;\n  subregion: number;\n}\n\nexport interface CityPartnerEucDistScale {\n  minGlobalEucdist: number;\n  p20GlobalEucdist: number;\n  p40GlobalEucdist: number;\n  p60GlobalEucdist: number;\n  p80GlobalEucdist: number;\n  maxGlobalEucdist: number;\n}\n","import {\n  secondaryFont,\n  baseColor,\n} from '../../styling/styleUtils';\nimport styled from 'styled-components/macro';\nimport {breakPointValues} from '../../styling/GlobalGrid';\n\nconst smallBreakpoint = 550; // in px\nexport const mediumSmallBreakpoint = 1050; // in px\nexport const columnsToRowsBreakpoint = breakPointValues.width.small; // in px\n\nexport const UtilityBarButtonBase = styled.button`\n  border: none;\n  margin: 0 0.25rem;\n  padding: 0 0.35rem;\n  color: ${baseColor};\n  background-color: transparent;\n  font-size: 0.55rem;\n  font-size: clamp(0.5rem, 1vw, 0.65rem);\n  font-family: ${secondaryFont};\n  text-transform: uppercase;\n  display: flex;\n  align-items: center;\n  outline: 0 solid rgba(255, 255, 255, 0);\n  transition: outline 0.1s ease;\n  flex-shrink: 1;\n\n  &:hover, &:focus {\n    background-color: #fff;\n    outline: 0.25rem solid #fff;\n    color: ${baseColor};\n  }\n\n  @media (max-width: ${mediumSmallBreakpoint}px) {\n    flex-direction: column;\n  }\n\n  @media (max-width: ${columnsToRowsBreakpoint}px) {\n    flex-direction: row;\n  }\n\n  @media (max-width: ${smallBreakpoint}px) {\n    flex-direction: column;\n  }\n`;\n\nexport const SvgBase = styled.span`\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  margin-right: 0.3rem;\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    path {\n      fill: ${baseColor};\n    }\n  }\n\n  @media (max-width: ${mediumSmallBreakpoint}px) {\n    margin-right: 0;\n    margin-bottom: 0.2rem;\n  }\n\n  @media (max-width: ${columnsToRowsBreakpoint}px) {\n    margin-right: 0.3rem;\n    margin-bottom: 0;\n  }\n\n  @media (max-width: ${smallBreakpoint}px) {\n    margin-right: 0;\n    margin-bottom: 0.2rem;\n  }\n`;\n\nexport const Text = styled.span`\n  width: min-content;\n\n  @media (max-width: 1100px) {\n    max-width: 55px;\n  }\n\n  @media (max-width: ${mediumSmallBreakpoint}px) and (min-width: ${columnsToRowsBreakpoint + 1}px) {\n    display: none;\n  }\n\n  @media (max-width: ${columnsToRowsBreakpoint }px) {\n    text-align: center;\n  }\n`;\n\nexport const LargeSvg = styled(SvgBase)`\n  width: 1.4rem;\n  height: 1.4rem;\n\n  @media (max-width: ${mediumSmallBreakpoint}px) {\n    width: 1rem;\n    height: 1rem;\n  }\n`;\n\nexport const TooltipContent = styled.div`\n  font-family: ${secondaryFont};\n  letter-spacing: -0.3px;\n  text-transform: uppercase;\n  font-size: 0.6rem;\n`;\n","import { useQuery, gql } from '@apollo/client';\nimport {\n  ClassificationCountry,\n  ClassificationRegion,\n  ClassificationCity,\n} from '../types/graphQL/graphQLTypes';\nimport {Datum as SearchDatum} from 'react-panel-search';\nimport {extent} from 'd3-array';\nimport {scaleLinear} from 'd3-scale';\n\nconst GLOBAL_LOCATION_QUERY = gql`\n  query GetGlobalLocationData {\n    countries: classificationCountryList {\n      countryId\n      code\n      nameShortEn\n      id\n    }\n    cities: classificationCityList {\n      cityId\n      name\n      countryId\n      id\n      nameList\n      centroidLat\n      centroidLon\n      population: population15\n      gdppc\n      incomeClass\n      region: regionId\n      regionPopRank\n      regionGdppcRank\n      dataFlag\n    }\n    regions: classificationRegionList {\n      regionId\n      regionName\n    }\n  }\n`;\n\ninterface SuccessResponse {\n  countries: {\n    countryId: ClassificationCountry['countryId'],\n    code: ClassificationCountry['code'],\n    nameShortEn: ClassificationCountry['nameShortEn'],\n    id: ClassificationCountry['id'],\n  }[];\n  regions: {\n    regionId: ClassificationRegion['regionId'],\n    regionName: ClassificationRegion['regionName'],\n  }[];\n  cities: {\n    cityId: ClassificationCity['cityId'],\n    name: ClassificationCity['name'],\n    nameList: ClassificationCity['nameList'],\n    centroidLat: ClassificationCity['centroidLat'],\n    centroidLon: ClassificationCity['centroidLon'],\n    countryId: ClassificationCity['countryId'],\n    geometry: ClassificationCity['geometry'],\n    population: ClassificationCity['population15'],\n    gdppc: ClassificationCity['gdppc'],\n    incomeClass: ClassificationCity['incomeClass'],\n    id: ClassificationCity['id'],\n    region: ClassificationCity['regionId'],\n    regionPopRank: ClassificationCity['regionPopRank'],\n    regionGdppcRank: ClassificationCity['regionGdppcRank'],\n    dataFlag: ClassificationCity['dataFlag'],\n  }[];\n}\n\nconst useGlobalLocationData = () => useQuery<SuccessResponse, never>(GLOBAL_LOCATION_QUERY);\n\nconst getCountryStringId = (id: number | string | null) => `country-${id}`;\n\nexport const locationDataToHierarchicalTreeData = (data: SuccessResponse | undefined) => {\n  const response: SearchDatum[] = [];\n  if (data !== undefined) {\n    const {cities, countries} = data;\n    response.push(\n      ...countries\n        .filter(({countryId}) => cities.find(c => c.countryId && c.countryId.toString() === countryId))\n        .map(({nameShortEn, countryId}) => ({\n        id: getCountryStringId(countryId),\n        title: nameShortEn !== null ? nameShortEn : 'Unrecognized Country ' + countryId,\n        parent_id: null,\n        level: '0',\n      })),\n      ...cities.map(({cityId: id, name, countryId, nameList}) => {\n        const parentCountry = countries.find(c => countryId && c.countryId.toString() === countryId.toString());\n        const countryName = parentCountry && parentCountry.nameShortEn ? ', ' + parentCountry.nameShortEn : '';\n        return {\n          id,\n          title: name !== null ? name + countryName : 'Unrecognized City ' + id + countryName,\n          parent_id: getCountryStringId(countryId),\n          level: '1',\n          keywords: nameList ? nameList : undefined,\n        };\n      }),\n    );\n  }\n  return response;\n};\n\nexport const getPopulationScale = (data: SuccessResponse, min: number, max: number) => {\n  const allPops: number[] = [];\n  data.cities.forEach(c => c.population ? allPops.push(c.population) : null);\n  return scaleLinear()\n    .domain(extent(allPops) as [number, number])\n    .range([min, max]);\n};\n\nexport const getGdpPppScale = (data: SuccessResponse, min: number, max: number) => {\n  const allGdp: number[] = [];\n  data.cities.forEach(c => c.gdppc ? allGdp.push(c.gdppc) : null);\n  return scaleLinear()\n    .domain(extent(allGdp) as [number, number])\n    .range([min, max]);\n};\n\nexport const useGlobalLocationHierarchicalTreeData = () => {\n  const {loading, error, data: responseData} = useGlobalLocationData();\n  const data = locationDataToHierarchicalTreeData(responseData);\n  return {loading, error, data};\n};\n\nexport default useGlobalLocationData;\n\n","import useCurrentCityId from './useCurrentCityId';\nimport useGlobalLocationData from './useGlobalLocationData';\n\nconst useCurrentCity = () => {\n  const cityId = useCurrentCityId();\n  const {loading, data} = useGlobalLocationData();\n\n  const city = cityId && data\n    ? data.cities.find(c => c.cityId === cityId)\n    : undefined;\n\n  return {loading, city};\n};\n\nexport default useCurrentCity;","import React, {useEffect, useRef, useState} from 'react';\nimport { createPortal } from 'react-dom';\nimport styled from 'styled-components/macro';\nimport raw from 'raw.macro';\nimport useFluent from '../../../hooks/useFluent';\nimport {useWindowWidth} from '../../../contextProviders/appContext';\nimport DataDisclaimer from '../../general/dataDisclaimer';\nimport {\n  UtilityBarButtonBase,\n  columnsToRowsBreakpoint,\n  mediumSmallBreakpoint,\n  SvgBase,\n  Text,\n  TooltipContent,\n  LargeSvg,\n} from '../Utils';\nimport screenfull from 'screenfull';\nimport Tooltip, {TooltipPosition} from '../../general/Tooltip';\nimport Guide from './guide';\nimport Share from './share';\n\nconst expandIconSvg = raw('../../../assets/icons/expand.svg');\nconst collapseIconSvg = raw('../../../assets/icons/collapse.svg');\nconst downloadImageIconSvg = raw('../../../assets/icons/image-download.svg');\nconst downloadDataIconSvg = raw('../../../assets/icons/download.svg');\n\nconst UtilityBarRoot = styled.div`\n  display: flex;\n  align-items: center;\n\n  @media (max-width: ${columnsToRowsBreakpoint}px) {\n    justify-content: space-around;\n  }\n`;\n\nconst secondaryHeaderUtilityBarId = 'secondaryHeaderUtilityBarId';\n\nexport const UtilityBarPortal = () => (\n  <UtilityBarRoot\n    id={secondaryHeaderUtilityBarId}\n  />\n);\n\nexport enum DownloadType {\n  Image = 'image',\n  Data = 'data',\n}\n\ninterface Props {\n  onDownloadImageButtonClick?: () => void;\n  onDownloadDataButtonClick?: () => void;\n  returnInline?: boolean;\n  hideGuide?: boolean;\n}\n\nconst UtilityBar = (props: Props) => {\n  const {\n    onDownloadImageButtonClick, onDownloadDataButtonClick,\n    returnInline, hideGuide,\n  } = props;\n  const getString = useFluent();\n\n  const secondaryHeaderUtilityBarContainerNodeRef = useRef<HTMLElement | null>(null);\n\n  const [isUtilityBarRendered, setIsUtilityBarRendered] = useState<boolean>(false);\n  const [isFullscreen, setIsFullscreen] = useState<boolean>(screenfull.isEnabled && screenfull.isFullscreen);\n\n  const windowDimensions = useWindowWidth();\n\n  useEffect(() => {\n    const node = document.querySelector<HTMLElement>(`#${secondaryHeaderUtilityBarId}`);\n    if (node !== null) {\n      secondaryHeaderUtilityBarContainerNodeRef.current = node;\n      setIsUtilityBarRendered(true);\n    }\n  }, []);\n\n  const downloadDataButton = onDownloadDataButtonClick ? (\n    <Tooltip\n      explanation={windowDimensions.width < mediumSmallBreakpoint &&\n        windowDimensions.width > columnsToRowsBreakpoint\n        ? <TooltipContent>{getString('global-ui-download-data')}</TooltipContent>\n        : null\n      }\n      cursor='pointer'\n      tooltipPosition={TooltipPosition.Bottom}\n    >\n      <UtilityBarButtonBase onClick={onDownloadDataButtonClick}>\n        <SvgBase\n          dangerouslySetInnerHTML={{__html: downloadDataIconSvg}}\n        />\n        <Text>\n          {getString('global-ui-download-data')}\n        </Text>\n      </UtilityBarButtonBase>\n    </Tooltip>\n  ) : null;\n\n  const downloadImageButton = onDownloadImageButtonClick ? (\n    <Tooltip\n      explanation={windowDimensions.width < mediumSmallBreakpoint &&\n        windowDimensions.width > columnsToRowsBreakpoint\n        ? <TooltipContent>{getString('global-ui-download-image')}</TooltipContent>\n        : null\n      }\n      cursor='pointer'\n      tooltipPosition={TooltipPosition.Bottom}\n    >\n      <UtilityBarButtonBase onClick={onDownloadImageButtonClick}>\n        <LargeSvg\n          dangerouslySetInnerHTML={{__html: downloadImageIconSvg}}\n        />\n        <Text>\n          {getString('global-ui-download-image')}\n        </Text>\n      </UtilityBarButtonBase>\n    </Tooltip>\n  ) : null;\n\n  const onFullScreenClick = () => {\n    const onFullscreenClose = () => setIsFullscreen(false);\n    if (screenfull.isEnabled) {\n      if (!screenfull.isFullscreen) {\n          screenfull.request().then(() => {\n            setTimeout(() => {\n              setIsFullscreen(true);\n              if (screenfull.isEnabled) {\n                screenfull.on('change', onFullscreenClose);\n              }\n            }, 200);\n          });\n      } else {\n        screenfull.exit();\n        screenfull.off('change', onFullscreenClose);\n        setIsFullscreen(false);\n      }\n    }\n  };\n\n  const expandButton = screenfull.isEnabled ? (\n    <Tooltip\n      explanation={windowDimensions.width < mediumSmallBreakpoint &&\n        windowDimensions.width > columnsToRowsBreakpoint\n        ? (<TooltipContent>\n            {!isFullscreen ? getString('global-ui-expand') : getString('global-ui-exit')}\n           </TooltipContent>)\n        : null\n      }\n      cursor='pointer'\n      tooltipPosition={TooltipPosition.Bottom}\n    >\n      <UtilityBarButtonBase\n        onClick={onFullScreenClick}\n      >\n        <SvgBase\n          dangerouslySetInnerHTML={{__html: !isFullscreen ? expandIconSvg : collapseIconSvg}}\n        />\n        <Text>\n          {!isFullscreen ? getString('global-ui-expand') : getString('global-ui-exit')}\n        </Text>\n      </UtilityBarButtonBase>\n    </Tooltip>\n  ) : null;\n\n  const guide = hideGuide ? null : <Guide />;\n\n  const content = (\n    <>\n      <Share />\n      {expandButton}\n      {guide}\n      {downloadImageButton}\n      {downloadDataButton}\n      <DataDisclaimer />\n    </>\n  );\n  let output: React.ReactElement<any> | null;\n  if (isUtilityBarRendered === true && secondaryHeaderUtilityBarContainerNodeRef.current !== null) {\n    output = createPortal(content, secondaryHeaderUtilityBarContainerNodeRef.current);\n  } else if (returnInline) {\n    output = content;\n  } else {\n    output = null;\n  }\n\n  return output;\n};\n\nexport default UtilityBar;\n","import React, {useState} from 'react';\nimport styled, {keyframes} from 'styled-components/macro';\nimport {\n  UtilityBarButtonBase,\n  mediumSmallBreakpoint,\n  columnsToRowsBreakpoint,\n  SvgBase,\n  Text,\n  TooltipContent,\n} from '../../navigation/Utils';\nimport raw from 'raw.macro';\nimport {\n  baseColor,\n  secondaryFont,\n  primaryColor,\n  primaryHoverColor,\n} from '../../../styling/styleUtils';\nimport useFluent from '../../../hooks/useFluent';\nimport useCurrentCity from '../../../hooks/useCurrentCity';\nimport {DataFlagType} from '../../../types/graphQL/graphQLTypes';\nimport Modal from '../../standardModal';\nimport {Link} from 'react-router-dom';\nimport {Routes} from '../../../routing/routes';\nimport Tooltip, {TooltipPosition} from '../../general/Tooltip';\nimport {useWindowWidth} from '../../../contextProviders/appContext';\n\nconst dataIconSvg = raw('../../../assets/icons/disclaimer.svg');\n\nconst DisclaimerSvg = styled(SvgBase)<{$flagColor: string}>`\n  width: 1.2rem;\n  height: 1.2rem;\n\n  svg {\n    .cls-1 {\n      fill: none;\n      stroke: ${({$flagColor}) => $flagColor};\n    }\n    .cls-2 {\n      fill: ${({$flagColor}) => $flagColor};\n    }\n    circle {\n      fill: ${({$flagColor}) => $flagColor};\n    }\n  }\n\n  @media (max-width: ${mediumSmallBreakpoint}px) {\n    width: 1rem;\n    height: 1rem;\n  }\n`;\n\nconst DisclaimerSvgLarge = styled(DisclaimerSvg)`\n  width: 2rem;\n  height: 2rem;\n  margin-right: 0.875rem;\n\n  @media (max-width: ${mediumSmallBreakpoint}px) {\n    width: 1.875rem;\n    height: 1.875rem;\n  }\n`;\n\nconst growIn = keyframes`\n  0% {\n    transform: scale(0.4);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n`;\n\nconst Root = styled.div`\n  background-color: #fff;\n  position: relative;\n  animation: ${growIn} 0.1s normal forwards ease-in-out;\n  animation-iteration-count: 1;\n  color: ${baseColor};\n  height: 100%;\n  padding: 1rem 3rem 2rem;\n  width: 600px;\n  max-width: 100%;\n  box-sizing: border-box;\n\n  @media screen and (max-height: 800px) {\n    overflow: visible;\n    padding: 1rem;\n  }\n`;\n\nconst Title = styled.h1`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  text-transform: uppercase;\n  font-weight: 400;\n  border-bottom: solid 1px ${baseColor};\n  padding-bottom: 0.875rem;\n`;\n\nconst Para = styled.p`\n  font-size: 0.875rem;\n  margin: 1rem 0;\n\n  a {\n    color: ${primaryColor};\n\n    &:hover {\n      color: ${primaryHoverColor};\n    }\n  }\n`;\n\nconst CloseButton = styled.button`\n  background-color: transparent;\n  border-none;\n  padding: 0 0.5rem;\n  color: ${baseColor};\n  text-transform: uppercase;\n  font-size: 1.5rem;\n  font-family: ${secondaryFont};\n  position: absolute;\n  right: 0;\n  top: 0;\n`;\n\nconst DataDisclaimer = () => {\n  const getString = useFluent();\n  const currentCity = useCurrentCity();\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const windowDimensions = useWindowWidth();\n\n  let flagColor: string = baseColor;\n  let alertTitle: string = '';\n  let description: string = '';\n  if (currentCity && currentCity.city) {\n    const {dataFlag} = currentCity.city;\n    if (dataFlag === DataFlagType.GREEN) {\n      flagColor = '#137737';\n      alertTitle = getString('data-disclaimer-green-title');\n      description = getString('data-disclaimer-green-desc');\n    } else if (dataFlag === DataFlagType.YELLOW) {\n      flagColor = '#71670F';\n      alertTitle = getString('data-disclaimer-yellow-title');\n      description = getString('data-disclaimer-yellow-desc');\n    } else if (dataFlag === DataFlagType.ORANGE) {\n      flagColor = '#9A561A';\n      alertTitle = getString('data-disclaimer-orange-title');\n      description = getString('data-disclaimer-orange-desc');\n    } else if (dataFlag === DataFlagType.RED) {\n      flagColor = '#B70808';\n      alertTitle = getString('data-disclaimer-red-title');\n      description = getString('data-disclaimer-red-desc');\n    }\n  }\n\n  const modal = modalOpen ? (\n    <Modal\n      onClose={() => setModalOpen(false)}\n      width={'600px'}\n      height={'600px'}\n    >\n      <Root>\n        <Title>\n          <DisclaimerSvgLarge\n            dangerouslySetInnerHTML={{__html: dataIconSvg}}\n            $flagColor={flagColor}\n          />\n          {getString('global-ui-data-disclaimer')} - {alertTitle}\n        </Title>\n        <Para dangerouslySetInnerHTML={{__html: description}} />\n        <Para>\n          {getString('data-disclaimer-data-page-lead-up')}\n          &nbsp;\n          <Link to={Routes.FaqBase}>{getString('data-disclaimer-data-page-link-text')}</Link>\n        </Para>\n        <Para dangerouslySetInnerHTML={{__html: getString('data-disclaimer-contact')}} />\n        <CloseButton onClick={() => setModalOpen(false)}>✕</CloseButton>\n      </Root>\n    </Modal>\n  ) : null;\n\n  return (\n    <>\n\n      <Tooltip\n        explanation={windowDimensions.width < mediumSmallBreakpoint &&\n          windowDimensions.width > columnsToRowsBreakpoint\n          ? <TooltipContent>{getString('global-ui-data-disclaimer')}</TooltipContent>\n          : null\n        }\n        cursor='pointer'\n        tooltipPosition={TooltipPosition.Bottom}\n      >\n        <UtilityBarButtonBase\n          onClick={() => setModalOpen(true)}\n        >\n          <DisclaimerSvg\n            dangerouslySetInnerHTML={{__html: dataIconSvg}}\n            $flagColor={flagColor}\n          />\n          <Text style={{color: flagColor}}>\n            {getString('global-ui-data-disclaimer')}\n          </Text>\n        </UtilityBarButtonBase>\n      </Tooltip>\n      {modal}\n    </>\n  );\n};\n\nexport default DataDisclaimer;\n","import React, {useState} from 'react';\nimport Modal from '../../../standardModal';\nimport styled, {keyframes} from 'styled-components/macro';\nimport {\n  backgroundDark,\n  primaryColor,\n  primaryHoverColor,\n} from '../../../../styling/styleUtils';\nimport CityverseLogoURL from '../../../../assets/icons/cities-logo.svg';\n\nconst growIn = keyframes`\n  0% {\n    transform: scale(0.4);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n`;\n\nconst Root = styled.div`\n  background-color: ${backgroundDark};\n  position: relative;\n  animation: ${growIn} 0.1s normal forwards ease-in-out;\n  animation-iteration-count: 1;\n  color: #fff;\n  height: 100%;\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  width: 500px;\n\n  @media screen and (max-width: 700px) {\n    width: auto;\n  }\n\n  @media screen and (max-height: 800px) {\n    overflow: visible;\n  }\n`;\n\nconst Logo = styled.img`\n  width: 14rem;\n`;\n\nconst Text = styled.div`\n  margin: 2rem 0;\n  text-transform: uppercase;\n  font-size: 1.25rem;\n`;\n\nconst StartGuideButton = styled.button`\n  background-color: ${primaryHoverColor};\n  color: #fff;\n  text-transform: uppercase;\n  border: none;\n  padding: 1.3rem 1.5rem;\n  letter-spacing: 1px;\n  margin-bottom: 0.75rem;\n  font-weight: 600;\n\n  &:hover {\n    background-color: ${primaryColor};\n  }\n`;\n\nconst DismissButton = styled.button`\n  border: none;\n  padding: 0.7rem;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  margin-bottom: 2rem;\n  background-color: #676c75;\n  color: #fff;\n`;\n\nconst CheckboxLabel = styled.label`\n  font-size: 0.9rem;\n  color: #fff;\n  display: flex;\n  align-items: center;\n`;\n\nconst Checkbox = styled.input`\n  margin-right: 5px;\n`;\n\n\nconst modalVersion = '0_1';\nconst localStorageKey = 'localStorageFirstTimeGuideModalKey' + modalVersion;\nlet dismissedSinceSession = false;\n\ninterface Props {\n  startGuide: () => void;\n}\n\nconst FirstTimeModal = ({startGuide}: Props) => {\n  const initialCheckedValue = parseInt(localStorage.getItem(localStorageKey) as any, 10);\n  const [modalOpen, setModalOpen] = useState<boolean>(isNaN(initialCheckedValue) || initialCheckedValue < 5);\n  const [checked, setChecked] = useState<boolean>(false);\n  const closeModal = () => {\n    setModalOpen(false);\n    dismissedSinceSession = true;\n    if (checked) {\n      localStorage.setItem(localStorageKey, '5');\n    } else {\n      const newCheckedCount = isNaN(initialCheckedValue) ? 0 : initialCheckedValue + 1;\n      localStorage.setItem(localStorageKey, newCheckedCount.toString());\n    }\n  };\n\n  const onStart = () => {\n    setModalOpen(false);\n    dismissedSinceSession = true;\n    localStorage.setItem(localStorageKey, '5');\n    startGuide();\n  };\n\n  if (modalOpen && !dismissedSinceSession) {\n    return (\n      <Modal\n        onClose={closeModal}\n        width={'800px'}\n        height={'400px'}\n      >\n        <Root>\n          <Logo src={CityverseLogoURL} />\n          <Text>\n            Learn the Metroverse basics\n          </Text>\n          <StartGuideButton onClick={onStart}>\n            Follow our step-by-step guide\n          </StartGuideButton>\n          <DismissButton onClick={closeModal}>\n            Not Now\n          </DismissButton>\n          <CheckboxLabel htmlFor='dont-show-tutorial-on-start-again'>\n            <Checkbox\n              type='checkbox'\n              id='dont-show-tutorial-on-start-again'\n              checked={checked}\n              onChange={e => setChecked(e.target.checked)}\n            />\n            Don't show it again\n          </CheckboxLabel>\n        </Root>\n      </Modal>\n    );\n  }\n  return null;\n};\n\nexport default FirstTimeModal;\n","import React from 'react';\nimport Joyride, {CallBackProps, Step} from 'react-joyride';\nimport styled from 'styled-components';\nimport { primaryColor } from '../../../../styling/styleUtils';\nimport FirstTimeModal from './FirstTimeModal';\n\nconst Text = styled.div`\n  text-align: left;\n`;\nexport const joyrideClassNames = {\n  vizOptions: 'joyride-element-viz-options',\n  searchInGraph: 'joyride-element-search-in-graph',\n  searchCountryInGraph: 'joyride-element-search-country-in-graph',\n  howToRead: 'joyride-element-how-to-read',\n  filterOptions: 'joyride-element-filter-viz-options',\n  vizToggle: 'joyride-element-viz-toggle',\n  benchmarkSelection: 'joyride-element-benchmark-selection',\n  compareEconComp: 'joyride-element-compare-econ-comp',\n  colorLegend: 'joyride-element-color-legend',\n  colorLegendNoFilter: 'joyride-element-color-legend-no-filter',\n  guideButton: 'joyride-element-guide-button',\n};\n\nconst steps: Step[] = [\n  {\n    target: '.' + joyrideClassNames.vizOptions,\n    // tslint:disable-next-line:max-line-length\n    content: <Text>With the default visualization generated on the screen, use the Viz Option controls to further customize your data visualization.</Text>,\n    disableBeacon: true,\n    placement: 'left-start',\n  },\n  {\n    target: '.' + joyrideClassNames.searchInGraph,\n    // tslint:disable-next-line:max-line-length\n    content: <Text>Search for a specific industry or knowledge cluster within the visualization by typing its name here.</Text>,\n    disableBeacon: true,\n    placement: 'left-start',\n  },\n  {\n    target: '.' + joyrideClassNames.searchCountryInGraph,\n    // tslint:disable-next-line:max-line-length\n    content: <Text>Search for a specific city within the visualization by typing its name here.</Text>,\n    disableBeacon: true,\n    placement: 'left-start',\n  },\n  {\n    target: '.' + joyrideClassNames.vizToggle,\n    // tslint:disable-next-line:max-line-length\n    content: <Text>Click here to toggle between 2 types of visualizations.</Text>,\n    disableBeacon: true,\n    placement: 'left-start',\n  },\n  {\n    target: '.' + joyrideClassNames.howToRead,\n    // tslint:disable-next-line:max-line-length\n    content: <Text>To learn how to interpret a given visualization, click here for a short tutorial.</Text>,\n    disableBeacon: true,\n    placement: 'left-start',\n  },\n  {\n    target: '.' + joyrideClassNames.filterOptions,\n    // tslint:disable-next-line:max-line-length\n    content: <Text>Click here to customize the data visualization based on various filtering options.</Text>,\n    disableBeacon: true,\n    placement: 'left-start',\n  },\n  {\n    target: '.' + joyrideClassNames.compareEconComp,\n    // tslint:disable-next-line:max-line-length\n    content: <Text>Click here to compare the economic composition of your selected city to that of another individual city or peer group.</Text>,\n    disableBeacon: true,\n    placement: 'left-start',\n  },\n  {\n    target: '.' + joyrideClassNames.benchmarkSelection,\n    // tslint:disable-next-line:max-line-length\n    content: <Text>Don’t forget to select a benchmark to determine the relative presence of an industry or knowledge cluster in a selected city.   Click here to re-generate the visualization using a different benchmark.</Text>,\n    disableBeacon: true,\n    placement: 'left-start',\n  },\n  {\n    target: '.' + joyrideClassNames.colorLegend,\n    // tslint:disable-next-line:max-line-length\n    content: <Text>A color legend can be found below the visualization.  Hover on each category to filter.</Text>,\n    disableBeacon: true,\n    placement: 'left-start',\n  },\n  {\n    target: '.' + joyrideClassNames.colorLegendNoFilter,\n    // tslint:disable-next-line:max-line-length\n    content: <Text>A color legend can be found below the visualization.</Text>,\n    disableBeacon: true,\n    placement: 'left-start',\n  },\n  {\n    target: '.' + joyrideClassNames.guideButton,\n    // tslint:disable-next-line:max-line-length\n    content: <Text>You can find this tutorial here if you need to see it again.</Text>,\n    disableBeacon: true,\n    placement: 'bottom-start',\n  },\n];\n\ninterface Props {\n  run: boolean;\n  onClose: () => void;\n  startGuide: () => void;\n}\n\nconst CitiesGuide = (props: Props) => {\n  const {run, onClose, startGuide} = props;\n  const onChange = (input: CallBackProps) => {\n    const {action} = input;\n    if (action === 'reset' || action === 'close') {\n      onClose();\n    }\n  };\n\n  const filteredSteps = steps.filter(({target}) => {\n    const element = document.querySelector<HTMLElement>(target as string);\n    return element !== null && element.offsetParent !== null;\n  });\n\n  return (\n    <>\n      <Joyride\n        steps={filteredSteps}\n        run={run}\n        continuous={true}\n        showProgress={true}\n        spotlightClicks={true}\n        locale={\n          { back: 'Back', close: 'Close', last: 'Finish', next: 'Next', skip: 'Skip' }\n        }\n        styles={{\n          options: {\n            primaryColor,\n            zIndex: 1000,\n          },\n        }}\n        callback={onChange}\n        floaterProps={{disableAnimation: true}}\n      />\n      <FirstTimeModal\n        startGuide={startGuide}\n      />\n    </>\n  );\n};\n\nexport default CitiesGuide;\n","import React, {useState} from 'react';\nimport Tooltip, {TooltipPosition} from '../../../general/Tooltip';\nimport raw from 'raw.macro';\nimport {useWindowWidth} from '../../../../contextProviders/appContext';\nimport {\n  UtilityBarButtonBase,\n  columnsToRowsBreakpoint,\n  mediumSmallBreakpoint,\n  Text,\n  TooltipContent,\n  LargeSvg,\n} from '../../Utils';\nimport useFluent from '../../../../hooks/useFluent';\nimport CitiesGuide, {joyrideClassNames} from './CitiesGuide';\n\nconst guideIconSvg = raw('../../../../assets/icons/guide.svg');\n\nconst Guide = () => {\n  const windowDimensions = useWindowWidth();\n  const getString = useFluent();\n  const [runTutorial, setRunTutorial] = useState<boolean>(false);\n  return (\n    <>\n      <Tooltip\n        explanation={windowDimensions.width < mediumSmallBreakpoint &&\n          windowDimensions.width > columnsToRowsBreakpoint\n          ? <TooltipContent>{getString('global-ui-guide')}</TooltipContent>\n          : null\n        }\n        cursor='pointer'\n        tooltipPosition={TooltipPosition.Bottom}\n      >\n        <UtilityBarButtonBase\n          onClick={() => setRunTutorial(true)}\n          className={joyrideClassNames.guideButton}\n        >\n          <LargeSvg\n            dangerouslySetInnerHTML={{__html: guideIconSvg}}\n          />\n          <Text>\n            {getString('global-ui-guide')}\n          </Text>\n        </UtilityBarButtonBase>\n      </Tooltip>\n      <CitiesGuide\n        run={runTutorial}\n        onClose={() => setRunTutorial(false)}\n        startGuide={() => setRunTutorial(true)}\n        key={runTutorial.toString()}\n      />\n    </>\n  );\n};\n\nexport default Guide;\n","const getShareWindowParams =\n  (width: number, height: number) =>\n    `menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=${height},width=${width}`;\n\nconst getShareFunctions = (url: string) => {\n  return {\n    shareFacebook: () => {\n      const baseURL = 'https://www.facebook.com/sharer.php';\n      const shareURL = `${baseURL}?u=${encodeURIComponent(url)}`;\n      window.open(shareURL, '', getShareWindowParams(360, 600));\n    },\n\n    shareTwitter: (text: string) => {\n      const baseURL = 'https://twitter.com/intent/tweet';\n      const shareURL =\n`${baseURL}?\nurl=${encodeURIComponent(url)}&\ntext=${encodeURIComponent(text)}&\nvia=HarvardGrwthLab`;\n      window.open(shareURL, '', getShareWindowParams(420, 550));\n    },\n\n    shareLinkedIn: (title: string, summary: string) => {\n      // Reference:\n      // https://developer.linkedin.com/docs/share-on-linkedin (under \"customized URL\")\n      const baseURL = 'https://www.linkedin.com/shareArticle';\n      // const source = 'https://atlas.cid.harvard.edu/';\n      const source = encodeURIComponent(url);\n      const shareURL =\n`${baseURL}\n?mini=true&\nurl=${encodeURIComponent(url)}&\ntitle=${encodeURIComponent(title)}&\nsummary=${encodeURIComponent(summary)}&\nsource=${encodeURIComponent(source)}`;\n      window.open(shareURL, '', getShareWindowParams(570, 520));\n    },\n\n    shareEmail: (subjectCopy: string, bodyBeforeLineBreakCopy: string, bodyAfterLineBreakCopy: string) => {\n      const subject = encodeURIComponent(subjectCopy);\n      const bodyBeforeLineBreak = encodeURIComponent(bodyBeforeLineBreakCopy);\n      const bodyAfterLineBreak = encodeURIComponent(bodyAfterLineBreakCopy);\n\n      const href = `mailto:?subject=${subject}&body=${bodyBeforeLineBreak}%0D%0A%0D%0A${bodyAfterLineBreak}`;\n\n      window.location.href = href;\n    },\n  };\n};\n\nexport default getShareFunctions;\n","import React, {useState} from 'react';\nimport Modal from '../../../standardModal';\nimport styled, {keyframes} from 'styled-components/macro';\nimport {\n  baseColor,\n  secondaryFont,\n  primaryFont,\n} from '../../../../styling/styleUtils';\n// import useFluent from '../../../../hooks/useFluent';\nimport raw from 'raw.macro';\nimport getShareFunctions from './shareFn';\n\nconst iconGray = '#2D363F';\n\nconst linkSvg = raw('../../../templates/informationalPage/assets/link.svg');\nconst twitterSvg = raw('../../../templates/informationalPage/assets/twitter.svg');\nconst linkedinSvg = raw('../../../templates/informationalPage/assets/linkedin.svg');\nconst facebookSvg = raw('../../../templates/informationalPage/assets/facebook.svg');\nconst emailSvg = raw('../../../templates/informationalPage/assets/email.svg');\n\nconst growIn = keyframes`\n  0% {\n    transform: scale(0.4);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n`;\n\nconst Root = styled.div`\n  background-color: #fff;\n  position: relative;\n  animation: ${growIn} 0.1s normal forwards ease-in-out;\n  animation-iteration-count: 1;\n  color: ${baseColor};\n  height: 100%;\n  padding: 2rem;\n\n  @media screen and (max-height: 800px) {\n    overflow: visible;\n  }\n`;\n\nconst CloseButton = styled.button`\n  background-color: transparent;\n  border-none;\n  padding: 0.5rem;\n  text-transform: uppercase;\n  font-size: 1.25rem;\n  font-family: ${secondaryFont};\n  position: absolute;\n  right: 0;\n  top: 0;\n`;\n\nconst SectionTitle = styled.div`\n  font-size: 1.25rem;\n  text-transform: uppercase;\n  margin-bottom: 0.75rem;\n  font-family: ${primaryFont};\n`;\n\nconst SvgBase = styled.div`\n  svg {\n    width: 100%;\n    height: 100%;\n\n    path {\n      fill: ${iconGray};\n    }\n  }\n`;\n\nconst CopyUrlBar = styled.div`\n  min-height: 1rem;\n  max-width: 450px;\n  white-space: nowrap;\n  display: grid;\n  grid-template-columns: 1.45rem 1fr auto;\n  background-color: lightgray;\n  margin-bottom: 2rem;\n  cursor: pointer;\n`;\n\nconst CopyIcon = styled(SvgBase)`\n  padding-left: 0.45rem;\n`;\n\nconst UrlText = styled.div`\n  overflow: hidden;\n  padding: 0.45rem 0.55rem;\n`;\n\nconst CopyButton = styled.button`\n  font-family: ${primaryFont};\n  text-transform: uppercase;\n  padding: 0.45rem 0.75rem;\n  background-color: ${iconGray};\n  color: #fff;\n  font-size: 1.05rem;\n  letter-spacing: 0.5px;\n`;\n\nconst SocialMediaContainer = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n`;\n\nconst SocialMediaButton = styled.button`\n  width: 2.875rem;\n  height: 2.875rem;\n  display: flex;\n  align-items: center;\n  margin-right: 1.5rem;\n  background-color: transparent;\n`;\n\ninterface Props {\n  onClose: () => void;\n}\n\nexport default (props: Props) => {\n  const {\n    onClose,\n  } = props;\n  // const getString = useFluent();\n  const [copied, setCopied] = useState<boolean>(false);\n  const onCopy = () => {\n    navigator.clipboard.writeText(window.location.href);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 5000);\n  };\n  const copyText = copied ? 'Copied' : 'Copy';\n\n  const {shareFacebook, shareTwitter, shareLinkedIn, shareEmail} = getShareFunctions(window.location.href);\n\n  return (\n    <Modal\n      onClose={onClose}\n      height='auto'\n      width='500px'\n    >\n      <Root>\n        <SectionTitle>\n          Direct Link\n        </SectionTitle>\n        <CopyUrlBar onClick={onCopy}>\n          <CopyIcon\n            dangerouslySetInnerHTML={{__html: linkSvg}}\n          />\n          <UrlText>\n            {window.location.href}\n          </UrlText>\n          <CopyButton>\n            {copyText}\n          </CopyButton>\n        </CopyUrlBar>\n        <SectionTitle>\n          Social Media Sharing\n        </SectionTitle>\n        <SocialMediaContainer>\n          <SocialMediaButton\n            onClick={() => shareTwitter('Check out the Metroverse')}\n          >\n            <SvgBase\n              dangerouslySetInnerHTML={{__html: twitterSvg}}\n            />\n          </SocialMediaButton>\n          <SocialMediaButton\n            onClick={() => shareLinkedIn('Check out the Metroverse', '')}\n          >\n            <SvgBase\n              dangerouslySetInnerHTML={{__html: linkedinSvg}}\n            />\n          </SocialMediaButton>\n          <SocialMediaButton\n            onClick={() => shareFacebook()}\n          >\n            <SvgBase\n              dangerouslySetInnerHTML={{__html: facebookSvg}}\n            />\n          </SocialMediaButton>\n          <SocialMediaButton\n            style={{width: '3.25rem'}}\n            onClick={() => shareEmail(\n              'Check out the Metroverse', 'Check out the Metroverse', window.location.href,\n            )}\n          >\n            <SvgBase\n              dangerouslySetInnerHTML={{__html: emailSvg}}\n            />\n          </SocialMediaButton>\n        </SocialMediaContainer>\n        <CloseButton onClick={onClose}>✕</CloseButton>\n      </Root>\n    </Modal>\n  );\n};\n","import React, {useState} from 'react';\nimport Tooltip, {TooltipPosition} from '../../../general/Tooltip';\nimport raw from 'raw.macro';\nimport {useWindowWidth} from '../../../../contextProviders/appContext';\nimport {\n  UtilityBarButtonBase,\n  columnsToRowsBreakpoint,\n  mediumSmallBreakpoint,\n  Text,\n  TooltipContent,\n  SvgBase,\n} from '../../Utils';\nimport useFluent from '../../../../hooks/useFluent';\nimport ShareModal from './ShareModal';\n\nconst shareIconSvg = raw('../../../../assets/icons/share.svg');\n\nconst Share = () => {\n  const windowDimensions = useWindowWidth();\n  const getString = useFluent();\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const openModal = () => setModalOpen(true);\n  const closeModal = () => setModalOpen(false);\n  const modal = modalOpen ? (\n    <ShareModal onClose={closeModal} />\n  ) : null;\n  return (\n    <>\n      <Tooltip\n        explanation={windowDimensions.width < mediumSmallBreakpoint &&\n          windowDimensions.width > columnsToRowsBreakpoint\n          ? <TooltipContent>{getString('global-ui-share')}</TooltipContent>\n          : null\n        }\n        cursor='pointer'\n        tooltipPosition={TooltipPosition.Bottom}\n      >\n        <UtilityBarButtonBase onClick={openModal}>\n          <SvgBase\n            dangerouslySetInnerHTML={{__html: shareIconSvg}}\n          />\n          <Text>\n            {getString('global-ui-share')}\n          </Text>\n        </UtilityBarButtonBase>\n      </Tooltip>\n      {modal}\n    </>\n  );\n};\n\nexport default Share;\n","import { useQuery, gql } from '@apollo/client';\nimport {\n  ClassificationNaicsIndustry,\n} from '../types/graphQL/graphQLTypes';\nimport {Datum as SearchDatum} from 'react-panel-search';\n\nconst GLOBAL_INDUSTRIES_QUERY = gql`\n  query GetGlobalIndustryData {\n    industries: classificationNaicsIndustryList {\n      naicsId\n      code\n      name\n      level\n      parentId\n      naicsIdTopParent\n      tradable\n      id\n    }\n  }\n`;\n\ninterface IndustryDatum {\n  id: ClassificationNaicsIndustry['id'];\n  naicsId: ClassificationNaicsIndustry['naicsId'];\n  code: ClassificationNaicsIndustry['code'];\n  name: ClassificationNaicsIndustry['name'];\n  level: ClassificationNaicsIndustry['level'];\n  parentId: ClassificationNaicsIndustry['parentId'];\n  naicsIdTopParent: ClassificationNaicsIndustry['naicsIdTopParent'];\n  tradable: ClassificationNaicsIndustry['tradable'];\n}\n\ninterface SuccessResponse {\n  industries: IndustryDatum[];\n}\n\nconst useGlobalIndustriesData = () => useQuery<SuccessResponse, never>(GLOBAL_INDUSTRIES_QUERY);\n\nconst industryDataToHierarchicalTreeData = (data: SuccessResponse | undefined) => {\n  const response: SearchDatum[] = [];\n  if (data !== undefined) {\n    const {industries} = data;\n    industries.forEach(({naicsId, name, level, parentId}) => {\n      if (name !== null && level !== null) {\n        response.push({\n          id: naicsId,\n          title: name,\n          level,\n          parent_id: parentId === null ? null : parentId.toString(),\n        });\n      }\n    });\n  }\n  return response;\n};\n\nexport const useGlobalIndustryHierarchicalTreeData = () => {\n  const {loading, error, data: responseData} = useGlobalIndustriesData();\n  const data = industryDataToHierarchicalTreeData(responseData);\n  return {loading, error, data};\n};\n\ninterface IndustryMap {\n  [id: string]: IndustryDatum;\n}\n\nconst industryDataToMap = (data: SuccessResponse | undefined) => {\n  const response: IndustryMap = {};\n  if (data !== undefined) {\n    const {industries} = data;\n    industries.forEach(({id, naicsId, name, level, parentId, naicsIdTopParent, code, tradable}) => {\n      response[naicsId] = {\n        id,\n        naicsId,\n        code,\n        name,\n        level,\n        parentId,\n        naicsIdTopParent,\n        tradable,\n      };\n    });\n  }\n  return response;\n};\n\nexport const useGlobalIndustryMap = () => {\n  const {loading, error, data: responseData} = useGlobalIndustriesData();\n  const data = industryDataToMap(responseData);\n  return {loading, error, data};\n};\n\nexport default useGlobalIndustriesData;\n\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport SimpleLoader from './SimpleLoader';\n\nexport const LoadingOverlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  bottom: 0;\n  right: 0;\n  background-color: rgba(0, 0, 0, 0.1);\n  backdrop-filter: blur(6px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 30;\n`;\n\nconst LoadingBlock = () => (\n  <LoadingOverlay>\n    <SimpleLoader size={80} />\n  </LoadingOverlay>\n);\n\nexport default LoadingBlock;\n","import React, { Component, ErrorInfo } from 'react';\nimport SimpleError from '../../components/transitionStateComponents/SimpleError';\nimport {LoadingOverlay} from '../transitionStateComponents/VizLoadingBlock';\n\ninterface State {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<{}, State> {\n  constructor(props: {}) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(_error: Error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // You can also log the error to an error reporting service\n    console.error(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return (\n        <LoadingOverlay>\n          <SimpleError fluentMessageId={'error-message-viz-failure'} />\n        </LoadingOverlay>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","export const defaultYear = 2021;\n\nexport function numberWithCommas(x: number | string) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nconst ranges = [\n  { divider: 1e18 , suffix: 'E' },\n  { divider: 1e15 , suffix: 'P' },\n  { divider: 1e12 , suffix: 'T' },\n  { divider: 1e9 , suffix: 'B' },\n  { divider: 1e6 , suffix: 'M' },\n  { divider: 1e3 , suffix: 'k' },\n];\n\nexport const formatNumber = (n: number, decimalPlaces?: number) => {\n  const fixedRange = decimalPlaces !== undefined ? decimalPlaces : 1;\n  for (const range of ranges) {\n    if (n >= range.divider) {\n      return parseFloat((n / range.divider).toFixed(fixedRange)) + range.suffix;\n    }\n  }\n  return decimalPlaces !== undefined\n    ? n.toFixed(decimalPlaces)\n    : n.toString();\n};\n\nconst rangesLong = [\n  { divider: 1e18 , suffix: 'quintillion' },\n  { divider: 1e15 , suffix: 'quadrillion' },\n  { divider: 1e12 , suffix: 'trillion' },\n  { divider: 1e9 , suffix: 'billion' },\n  { divider: 1e6 , suffix: 'million' },\n  { divider: 1e3 , suffix: 'thousand' },\n];\n\nexport const formatNumberLong = (n: number) => {\n  for (const range of rangesLong) {\n    if (n >= range.divider) {\n      return parseFloat((n / range.divider).toFixed(1)) + ' ' + range.suffix;\n    }\n  }\n  return n.toString();\n};\n\nfunction gcd(a: number, b: number): number {\n  return (b) ? gcd(b, a % b) : a;\n}\n\nexport const decimalToFraction = function (decimal: number) {\n  let top: number | string    = decimal.toString().replace(/\\d+[.]/, '');\n  const bottom: number  = Math.pow(10, top.length);\n  if (decimal > 1) {\n    top  = +top + Math.floor(decimal) * bottom;\n  }\n  const x = gcd(top as number, bottom);\n  return {\n    top    : (top as number / x),\n    bottom  : (bottom / x),\n    display  : (top as number / x) + ':' + (bottom / x),\n  };\n};\n\nexport function filterOutliers(arr: number[]) {\n\n    // Copy the values, rather than operating on references to existing values\n    const values = arr.concat();\n\n    // Then sort\n    values.sort( function(a, b) {\n            return a - b;\n         });\n\n    /* Then find a generous IQR. This is generous because if (values.length / 4)\n     * is not an int, then really you should average the two elements on either\n     * side to find q1.\n     */\n    const q1 = values[Math.floor((values.length / 4))];\n    // Likewise for q3.\n    const q3 = values[Math.ceil((values.length * (3 / 4)))];\n    const iqr = q3 - q1;\n\n    // Then find min and max values\n    const maxValue = q3 + iqr*1.5;\n    const minValue = q1 - iqr*1.5;\n\n    // Then filter anything beyond or beneath these values.\n    const filteredValues = values.filter(function(x) {\n        return (x <= maxValue) && (x >= minValue);\n    });\n\n    // Then return\n    return filteredValues;\n}\n","import React from 'react';\nimport {lightBaseColor} from '../../styling/styleUtils';\nimport styled, {keyframes} from 'styled-components/macro';\n\nconst Spinner = styled.div`\n  height: 1rem;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst bounceDelay = keyframes`\n  0%, 80%, 100% {\n    -webkit-transform: scale(0);\n    transform: scale(0);\n  } 40% {\n    -webkit-transform: scale(1.0);\n    transform: scale(1.0);\n  }\n`;\n\nconst Bounce = styled.div`\n  width: 0.6rem;\n  height: 0.6rem;\n  margin: 0 0.25rem 0;\n  background-color: ${lightBaseColor};\n  border-radius: 100%;\n  display: inline-block;\n  animation: ${bounceDelay} 1.4s infinite ease-in-out both;\n`;\n\nconst Bounce1 = styled(Bounce)`\n  animation-delay: -0.32s;\n`;\n\nconst Bounce2 = styled(Bounce)`\n  animation-delay: -0.16s;\n`;\n\nexport default () => {\n  return (\n    <Spinner>\n      <Bounce1 />\n      <Bounce2 />\n      <Bounce />\n    </Spinner>\n  );\n};","import React from 'react';\nimport SimpleLoader from '../../transitionStateComponents/SimpleLoader';\nimport PanelSearch, {Datum as SearchDatum} from 'react-panel-search';\nimport {\n  useGlobalIndustryHierarchicalTreeData,\n} from '../../../hooks/useGlobalIndustriesData';\nimport {\n  useGlobalClusterHierarchicalTreeData,\n} from '../../../hooks/useGlobalClusterData';\nimport {\n  useGlobalLocationHierarchicalTreeData,\n} from '../../../hooks/useGlobalLocationData';\nimport SimpleError from '../../transitionStateComponents/SimpleError';\nimport useSectorMap from '../../../hooks/useSectorMap';\nimport useClusterMap from '../../../hooks/useClusterMap';\nimport {DigitLevel} from '../../../types/graphQL/graphQLTypes';\nimport {\n  SearchContainerLight,\n  lightBaseColor,\n} from '../../../styling/styleUtils';\nimport {collapsedSizeMediaQueryValues, collapsedSizeMediaQuery} from '../Utils';\nimport useFluent from '../../../hooks/useFluent';\nimport {useWindowSize} from 'react-use';\nimport styled from 'styled-components/macro';\nimport ToggleDropdown from './ToggleDropdown';\nimport {ClusterLevel} from '../../../routing/routes';\nimport {joyrideClassNames} from '../../navigation/secondaryHeader/guide/CitiesGuide';\n\nconst LoadingContainer = styled.div`\n  border: solid 1px ${lightBaseColor};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst SearchContainer = styled(SearchContainerLight)`\n  max-width: 100%;\n  font-size: 0.5rem;\n  margin-right: 0.75rem;\n\n  .react-panel-search-search-results {\n    overflow-x: hidden;\n  }\n\n  .react-panel-search-search-bar-input {\n    font-size: 0.65rem;\n    padding-left: 1.15rem;\n  }\n\n  .react-panel-search-search-bar-search-icon {\n    width: 0.7rem;\n    margin: 0 0.3rem;\n  }\n\n  .react-panel-search-current-tier-static-title-outer,\n  .react-panel-search-current-tier-breadcrumb-outer {\n    padding: 0.55rem 0.45rem 0.55rem 0.4rem;\n  }\n\n  .react-panel-search-list-item,\n  .react-panel-search-current-tier-title {\n    font-size: 0.65rem;\n    padding: 0.55rem 1.25rem 0.55rem 0.5rem;\n  }\n\n  .react-panel-search-current-tier-title {\n    padding-left: 0;\n    padding-right: 0;\n    padding-top: 0.2rem;\n    grid-gap: 0;\n  }\n\n  .react-panel-search-current-tier-text {\n    padding: 0;\n  }\n\n  .react-panel-search-next-button,\n  .react-panel-search-previous-button {\n    width: 0.9rem;\n    height: 0.9rem;\n    padding: 0;\n\n    svg {\n      width: 0.6rem;\n    }\n  }\n  .react-panel-search-next-button {\n    margin: auto 6px;\n  }\n\n  .react-panel-search-search-bar-dropdown-arrow {\n    width: 0.6rem;\n    padding: 0.18rem;\n  }\n\n  .react-panel-search-list-no-results div {\n    font-size: 0.65rem;\n    padding: 0.5rem;\n  }\n\n  @media ${collapsedSizeMediaQuery} {\n    width: auto;\n    flex-shrink: 1;\n    height: 100%;\n    align-items: center;\n    position: relative;\n    min-width: 30px;\n  }\n`;\n\nexport enum Mode {\n  naics = 'naics',\n  cluster = 'cluster',\n  geo = 'geo',\n}\n\nexport interface SearchInGraphOptions {\n  hiddenParents: string[];\n  setHighlighted: (value: string | undefined) => void;\n  digitLevel: DigitLevel | null;\n  clusterLevel: ClusterLevel | null;\n  mode: Mode;\n  hidden?: boolean;\n}\n\nconst SearchIndustryInGraph = (props: SearchInGraphOptions) => {\n  const {\n    hiddenParents, setHighlighted, digitLevel, clusterLevel, mode, hidden,\n  } = props;\n\n  const getString = useFluent();\n  const sectorMap = useSectorMap();\n  const clusterMap = useClusterMap();\n  const industrySearchData = useGlobalIndustryHierarchicalTreeData();\n  const clusterSearchData = useGlobalClusterHierarchicalTreeData();\n  const locationSearchData = useGlobalLocationHierarchicalTreeData();\n  const windowDimensions = useWindowSize();\n\n  let hierarchalSearchData: undefined | SearchDatum[];\n  let tiers: DigitLevel | ClusterLevel | string | null;\n  let disallowSelectionLevels: (number | string)[] | undefined;\n  let defaultPlaceholderText: string;\n  let topLevelTitle: string;\n  if (mode === Mode.naics) {\n    hierarchalSearchData = industrySearchData.data;\n    tiers = digitLevel;\n    disallowSelectionLevels = tiers\n      ? Array.from(Array(tiers).keys()) : undefined;\n    defaultPlaceholderText = getString('global-ui-search-an-industry-in-graph');\n    topLevelTitle = getString('global-text-industries');\n  } else if (mode === Mode.cluster) {\n    hierarchalSearchData = clusterSearchData.data;\n    tiers = clusterLevel;\n    disallowSelectionLevels = clusterLevel === ClusterLevel.C3 ? [1] : undefined;\n    defaultPlaceholderText = getString('global-ui-search-a-cluster-in-graph');\n    topLevelTitle = getString('global-ui-skill-clusters');\n  } else if (mode === Mode.geo) {\n    hierarchalSearchData = locationSearchData.data;\n    disallowSelectionLevels = ['0'];\n    tiers = null;\n    defaultPlaceholderText = 'Find a city in map';\n    topLevelTitle = 'Countries';\n  } else {\n    hierarchalSearchData = [];\n    tiers = null;\n    defaultPlaceholderText = '';\n    topLevelTitle = '';\n  }\n\n  let searchPanel: React.ReactElement<any> | null;\n  if ((mode === Mode.naics && industrySearchData.loading) || (mode === Mode.cluster && clusterSearchData.loading) ||\n        (mode === Mode.geo && locationSearchData.loading)) {\n    searchPanel = (\n      <LoadingContainer>\n        <SimpleLoader />\n      </LoadingContainer>\n    );\n  } else if (mode === Mode.naics && industrySearchData.error !== undefined) {\n    console.error(industrySearchData.error);\n    searchPanel = (\n      <LoadingContainer>\n        <SimpleError />\n      </LoadingContainer>\n    );\n  } else if (mode === Mode.cluster && clusterSearchData.error !== undefined) {\n    console.error(clusterSearchData.error);\n    searchPanel = (\n      <LoadingContainer>\n        <SimpleError />\n      </LoadingContainer>\n    );\n  } else if (mode === Mode.geo && locationSearchData.error !== undefined) {\n    console.error(locationSearchData.error);\n    searchPanel = (\n      <LoadingContainer>\n        <SimpleError />\n      </LoadingContainer>\n    );\n  } else if ((mode === Mode.naics && hiddenParents.length === sectorMap.length) ||\n      (mode === Mode.cluster && hiddenParents.length === clusterMap.length)) {\n    searchPanel = (\n      <LoadingContainer>\n        <SimpleError fluentMessageId={'error-message-no-industries'} />\n      </LoadingContainer>\n    );\n  } else if (hierarchalSearchData !== undefined) {\n    const onSelect = (d: {id: string | number} | null) => {\n      if (d) {\n        setHighlighted(d.id as string);\n      } else {\n        setHighlighted(undefined);\n      }\n    };\n    const searchData: SearchDatum[] = hierarchalSearchData.filter(\n      ({level, id}) => (tiers === null || (level !== null && level <= tiers)) &&\n                        !hiddenParents.includes(id as string),\n    );\n\n    if (windowDimensions.width > collapsedSizeMediaQueryValues.max ||\n        windowDimensions.width < collapsedSizeMediaQueryValues.min) {\n      searchPanel = (\n        <PanelSearch\n          key={`PreChartPanelSearchKeyFor${digitLevel}${clusterLevel}${mode}`}\n          data={searchData}\n          topLevelTitle={topLevelTitle}\n          disallowSelectionLevels={disallowSelectionLevels}\n          defaultPlaceholderText={defaultPlaceholderText}\n          showCount={true}\n          resultsIdentation={1}\n          onSelect={onSelect}\n          maxResults={500}\n        />\n      );\n    } else {\n      searchPanel = (\n        <ToggleDropdown\n          disallowSelectionLevels={disallowSelectionLevels}\n          setHighlighted={setHighlighted}\n          rerenderKey={`${digitLevel}${clusterLevel}${mode}`}\n          searchData={searchData}\n          defaultPlaceholderText={defaultPlaceholderText}\n          topLevelTitle={topLevelTitle}\n        />\n      );\n    }\n  } else {\n    searchPanel = null;\n  }\n\n  return (\n    <SearchContainer\n      className={!hidden\n          ? mode === Mode.geo ? joyrideClassNames.searchCountryInGraph : joyrideClassNames.searchInGraph\n          : undefined\n      }\n      style={hidden ? {visibility: 'hidden'} : undefined}\n    >\n      {searchPanel}\n    </SearchContainer>\n  );\n};\n\nexport default React.memo(SearchIndustryInGraph);\n","import styled from 'styled-components/macro';\nimport {arrowContainerClassName} from '../components/general/Tooltip';\n\ninterface Input {\n  title: string;\n  color: string;\n  rows: string[][];\n  boldColumns?: number[];\n  underlineRows?: number[];\n  additionalHTML?: string;\n  hideArrow?: boolean;\n  simple?: boolean;\n}\n\nexport const RapidTooltipRoot = styled.div`\n  position: fixed;\n  z-index: 3000;\n  max-width: 16rem;\n  padding-bottom: 0.5rem;\n  font-size: 0.7rem;\n  line-height: 1.4;\n  text-transform: none;\n  transition: opacity 0.15s ease;\n  color: #333;\n  background-color: #fff;\n  border: 1px solid #dfdfdf;\n  border-radius: 4px;\n  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.15);\n  pointer-events: none;\n  transform: translate(-50%, calc(-100% - 1.5rem));\n  display: none;\n`;\n\nexport const getStandardTooltip = (input: Input) => {\n  const columnCount = input.rows.length && input.rows[0].length ? input.rows[0].length : 1;\n\n  let rows: string = '';\n  input.rows.forEach((r, i) => {\n    let row = '';\n    const underline = input.underlineRows && input.underlineRows.includes(i)\n      ? 'border-bottom: solid 1px #333;margin-top:auto;'\n      : '';\n    r.forEach((c, ii) => {\n      const alignment = ii === 0\n        ? 'justify-content: flex-start; text-align: left;'\n        : 'justify-content: flex-end; text-align: right;';\n      const style = input.boldColumns && input.boldColumns.includes(ii)\n        ? `style=\"font-weight: 600;${alignment}${underline}\"` : '';\n      row = row + `<div class=\"rapid-tooltip-cell\" ${style}>${c}</div>`;\n    });\n    rows = rows + row;\n  });\n\n  const grid = rows.length ? `\n    <div\n      class=\"rapid-tooltip-subsection-grid\"\n      style=\"display: grid; grid-template-columns: repeat(${columnCount}, auto);\"\n    >\n      ${rows}\n    </div>\n  ` : '';\n\n  const additionalContent = input.additionalHTML ? `<div>${input.additionalHTML}</div>` : '';\n  const arrow = input.hideArrow ? '' : `\n    <div class=\"rapid-tooltip-arrow-container ${arrowContainerClassName}\">\n      <div class=\"rapid-tooltip-arrow\"></div>\n    </div>\n  `;\n\n  const titleStyle = input.simple\n    ? `padding-bottom: 0; font-weight: 600;`\n    : `background-color: ${input.color};`;\n\n  return `\n    <div>\n      <div class=\"rapid-tooltip-title\" style=\"${titleStyle}\">\n        ${input.title}\n      </div>\n      ${grid}\n      ${additionalContent}\n    </div>\n    ${arrow}\n  `;\n};","import { useQuery, gql } from '@apollo/client';\nimport {\n  NaicsPeerEconStruct,\n  ClusterPeerEconStruct,\n  DigitLevel,\n  NaicsIndustry,\n  ClusterIndustry,\n  ClusterLevel,\n  GlobalIndustryAgg,\n} from '../types/graphQL/graphQLTypes';\nimport {extent} from 'd3-array';\nimport {filterOutliers} from '../Utils';\nimport sortBy from 'lodash/sortBy';\n\nconst GLOBAL_INDUSTRIES_QUERY = gql`\n  query GetAggregateIndustryData($level: Int!, $clusterLevel: Int!, $year: Int!, $cityId: Int!) {\n    aggregateData: naicsPeerEconStruct(cityId: $cityId, year: $year, peerGroup: \"global\", naicsLevel: $level) {\n      naicsId\n      sumNumCompany: totalCompanyCount\n      sumNumEmploy: totalEmployCount\n      avgNumCompany: avgCompanyCount\n      avgNumEmploy: avgEmployCount\n    }\n    aggregateClusterData: clusterPeerEconStruct(\n      cityId: $cityId, year: $year, peerGroup: \"global\", clusterLevel: $clusterLevel\n    ) {\n      clusterId\n      sumNumCompany: totalCompanyCount\n      sumNumEmploy: totalEmployCount\n      avgNumCompany: avgCompanyCount\n      avgNumEmploy: avgEmployCount\n    }\n    averageData: naicsIndustryList {\n      naicsId\n      yearsEducation\n      hourlyWage\n      level\n    }\n    clusterAverageData: clusterIndustryList {\n      clusterId\n      yearsEducation\n      hourlyWage\n      level\n    }\n  }\n`;\n\ninterface AggregateDatum {\n  sumNumCompany: NaicsPeerEconStruct['totalCompanyCount'];\n  sumNumEmploy: NaicsPeerEconStruct['totalEmployCount'];\n  avgNumCompany: NaicsPeerEconStruct['avgEmployCount'];\n  avgNumEmploy: NaicsPeerEconStruct['avgCompanyCount'];\n}\n\ninterface IndustryDatum extends AggregateDatum{\n  naicsId: NaicsPeerEconStruct['naicsId'];\n}\n\ninterface ClusterDatum extends AggregateDatum{\n  clusterId: ClusterPeerEconStruct['clusterId'];\n}\n\ninterface AverageDatum {\n  naicsId: NaicsIndustry['naicsId'];\n  yearsEducation: NaicsIndustry['yearsEducation'];\n  hourlyWage: NaicsIndustry['hourlyWage'];\n  level: NaicsIndustry['level'];\n}\n\ninterface ClusterAverageData {\n  clusterId: ClusterIndustry['clusterId'];\n  yearsEducation: ClusterIndustry['yearsEducation'];\n  hourlyWage: ClusterIndustry['hourlyWage'];\n  level: ClusterIndustry['level'];\n}\n\ninterface SuccessResponse {\n  aggregateData: IndustryDatum[];\n  aggregateClusterData: ClusterDatum[];\n  averageData: AverageDatum[];\n  clusterAverageData: ClusterAverageData[];\n}\n\ninterface CoreVariables {\n  level: DigitLevel;\n  year: number;\n  clusterLevel?: ClusterLevel;\n}\n\ninterface Variables extends CoreVariables {\n  cityId: number;\n  clusterLevel: ClusterLevel;\n}\n\nconst useAggregateIndustriesData = (variables: CoreVariables) =>\n  useQuery<SuccessResponse, Variables>(GLOBAL_INDUSTRIES_QUERY, {\n    variables: {\n      ...variables,\n      // 1022 = Boston's city id. For global peerGroup, city id does not matter,\n      // but it is still required for the query to be successful\n      cityId: 1022,\n      clusterLevel: variables.clusterLevel ? variables.clusterLevel : ClusterLevel.C1,\n    },\n  });\n\nexport interface IndustryMap {\n  globalMinMax: {\n    minSumNumCompany: GlobalIndustryAgg['sumNumCompany'];\n    maxSumNumCompany: GlobalIndustryAgg['sumNumCompany'];\n    minSumNumEmploy: GlobalIndustryAgg['sumNumEmploy'];\n    maxSumNumEmploy: GlobalIndustryAgg['sumNumEmploy'];\n    minAvgNumCompany: GlobalIndustryAgg['avgNumCompany'];\n    maxAvgNumCompany: GlobalIndustryAgg['avgNumCompany'];\n    minAvgNumEmploy: GlobalIndustryAgg['avgNumEmploy'];\n    maxAvgNumEmploy: GlobalIndustryAgg['avgNumEmploy'];\n    minYearsEducation: NaicsIndustry['yearsEducation'];\n    medianYearsEducation: NaicsIndustry['yearsEducation'];\n    maxYearsEducation: NaicsIndustry['yearsEducation'];\n    minHourlyWage: NaicsIndustry['hourlyWage'];\n    medianHourlyWage: NaicsIndustry['hourlyWage'];\n    maxHourlyWage: NaicsIndustry['hourlyWage'];\n  };\n  clusterMinMax: {\n    minSumNumCompany: GlobalIndustryAgg['sumNumCompany'];\n    maxSumNumCompany: GlobalIndustryAgg['sumNumCompany'];\n    minSumNumEmploy: GlobalIndustryAgg['sumNumEmploy'];\n    maxSumNumEmploy: GlobalIndustryAgg['sumNumEmploy'];\n    minAvgNumCompany: GlobalIndustryAgg['avgNumCompany'];\n    maxAvgNumCompany: GlobalIndustryAgg['avgNumCompany'];\n    minAvgNumEmploy: GlobalIndustryAgg['avgNumEmploy'];\n    maxAvgNumEmploy: GlobalIndustryAgg['avgNumEmploy'];\n    minYearsEducation: ClusterIndustry['yearsEducation'];\n    maxYearsEducation: ClusterIndustry['yearsEducation'];\n    medianYearsEducation: ClusterIndustry['yearsEducation'];\n    minHourlyWage: ClusterIndustry['hourlyWage'];\n    medianHourlyWage: ClusterIndustry['hourlyWage'];\n    maxHourlyWage: ClusterIndustry['hourlyWage'];\n  };\n  industries: {\n    [id: string]: IndustryDatum & {\n      yearsEducation: ClusterIndustry['yearsEducation'];\n      hourlyWage: ClusterIndustry['hourlyWage'];\n      yearsEducationRank: number;\n      hourlyWageRank: number;\n    };\n  };\n  clusters: {\n    [id: string]: ClusterDatum & {\n      yearsEducation: NaicsIndustry['yearsEducation'];\n      hourlyWage: NaicsIndustry['hourlyWage'];\n      yearsEducationRank: number;\n      hourlyWageRank: number;\n    };\n  };\n}\n\nconst industryDataToMap = (data: SuccessResponse | undefined, level: DigitLevel, clusterLevel: ClusterLevel) => {\n  const response: IndustryMap = {\n    industries: {},\n    clusters: {},\n    globalMinMax: {\n      minSumNumCompany: 0,\n      maxSumNumCompany: 0,\n      minSumNumEmploy: 0,\n      maxSumNumEmploy: 0,\n      minAvgNumCompany: 0,\n      maxAvgNumCompany: 0,\n      minAvgNumEmploy: 0,\n      maxAvgNumEmploy: 0,\n      minYearsEducation: 0,\n      maxYearsEducation: 0,\n      minHourlyWage: 0,\n      maxHourlyWage: 0,\n      medianHourlyWage: 0,\n      medianYearsEducation: 0,\n    },\n    clusterMinMax: {\n      minSumNumCompany: 0,\n      maxSumNumCompany: 0,\n      minSumNumEmploy: 0,\n      maxSumNumEmploy: 0,\n      minAvgNumCompany: 0,\n      maxAvgNumCompany: 0,\n      minAvgNumEmploy: 0,\n      maxAvgNumEmploy: 0,\n      minYearsEducation: 0,\n      maxYearsEducation: 0,\n      minHourlyWage: 0,\n      maxHourlyWage: 0,\n      medianHourlyWage: 0,\n      medianYearsEducation: 0,\n    },\n  };\n  if (data !== undefined) {\n    const {aggregateData, averageData, clusterAverageData, aggregateClusterData} = data;\n    const filteredAverageData = averageData.filter(d => d.level === level);\n    {\n      const [minSumNumCompany, maxSumNumCompany] = extent(aggregateData.map(d => d.sumNumCompany)) as [number, number];\n      const [minSumNumEmploy, maxSumNumEmploy] = extent(aggregateData.map(d => d.sumNumEmploy)) as [number, number];\n      const [minAvgNumCompany, maxAvgNumCompany] = extent(aggregateData.map(d => d.avgNumCompany)) as [number, number];\n      const [minAvgNumEmploy, maxAvgNumEmploy] = extent(aggregateData.map(d => d.avgNumEmploy)) as [number, number];\n      const yearsEducationNoOutliers = filterOutliers(filteredAverageData.map(d => d.yearsEducation));\n      const medianYearsEducation =\n        sortBy(filteredAverageData, ['yearsEducation'])[Math.round(filteredAverageData.length / 2)].yearsEducation;\n      const [minYearsEducation, maxYearsEducation] = extent(yearsEducationNoOutliers) as [number, number];\n      const hourlyWageNoOutliers = filterOutliers(filteredAverageData.map(d => d.hourlyWage));\n      const [minHourlyWage, maxHourlyWage] = extent(hourlyWageNoOutliers) as [number, number];\n      const medianHourlyWage =\n        sortBy(filteredAverageData, ['hourlyWage'])[Math.round(filteredAverageData.length / 2)].hourlyWage;\n      response.globalMinMax = {\n        minSumNumCompany, maxSumNumCompany,\n        minSumNumEmploy, maxSumNumEmploy,\n        minAvgNumCompany, maxAvgNumCompany,\n        minAvgNumEmploy, maxAvgNumEmploy,\n        minYearsEducation, maxYearsEducation,\n        minHourlyWage, maxHourlyWage,\n        medianYearsEducation, medianHourlyWage,\n      };\n    }\n    aggregateData.forEach(d => {\n      const averages = filteredAverageData.find(dd => dd.naicsId.toString() === d.naicsId.toString());\n      const yearsEducation = averages && averages.yearsEducation ? averages.yearsEducation : 0;\n      const hourlyWage = averages && averages.hourlyWage ? averages.hourlyWage : 0;\n      let yearsEducationRank = yearsEducation < response.globalMinMax.minYearsEducation\n        ? response.globalMinMax.minYearsEducation : yearsEducation;\n      if (yearsEducationRank > response.globalMinMax.maxYearsEducation) {\n        yearsEducationRank = response.globalMinMax.maxYearsEducation;\n      }\n      let hourlyWageRank =  hourlyWage < response.globalMinMax.minHourlyWage\n        ? response.globalMinMax.minHourlyWage : hourlyWage;\n      if (hourlyWageRank > response.globalMinMax.maxHourlyWage) {\n        hourlyWageRank = response.globalMinMax.maxHourlyWage;\n      }\n\n      response.industries[d.naicsId] = {\n        ...d,\n        yearsEducation,\n        hourlyWage,\n        yearsEducationRank,\n        hourlyWageRank,\n      };\n    });\n\n    const filteredAverageClusterData = clusterAverageData.filter(d => d.level === clusterLevel);\n    {\n      const [minSumNumCompany, maxSumNumCompany] = extent(aggregateClusterData.map(d => d.sumNumCompany)) as [number, number];\n      const [minSumNumEmploy, maxSumNumEmploy] = extent(aggregateClusterData.map(d => d.sumNumEmploy)) as [number, number];\n      const [minAvgNumCompany, maxAvgNumCompany] = extent(aggregateClusterData.map(d => d.avgNumCompany)) as [number, number];\n      const [minAvgNumEmploy, maxAvgNumEmploy] = extent(aggregateClusterData.map(d => d.avgNumEmploy)) as [number, number];\n      const yearsEducationNoOutliers = filterOutliers(filteredAverageClusterData.map(d => d.yearsEducation));\n      const medianYearsEducation =\n        sortBy(filteredAverageClusterData, ['yearsEducation'])[Math.round(filteredAverageClusterData.length / 2)].yearsEducation;\n      const [minYearsEducation, maxYearsEducation] = extent(yearsEducationNoOutliers) as [number, number];\n      const hourlyWageNoOutliers = filterOutliers(filteredAverageClusterData.map(d => d.hourlyWage));\n      const [minHourlyWage, maxHourlyWage] = extent(hourlyWageNoOutliers) as [number, number];\n      const medianHourlyWage =\n        sortBy(filteredAverageClusterData, ['hourlyWage'])[Math.round(filteredAverageClusterData.length / 2)].hourlyWage;\n      response.clusterMinMax = {\n        minSumNumCompany, maxSumNumCompany,\n        minSumNumEmploy, maxSumNumEmploy,\n        minAvgNumCompany, maxAvgNumCompany,\n        minAvgNumEmploy, maxAvgNumEmploy,\n        minYearsEducation, maxYearsEducation,\n        minHourlyWage, maxHourlyWage,\n        medianYearsEducation, medianHourlyWage,\n      };\n    }\n    aggregateClusterData.forEach(d => {\n      const averages = filteredAverageClusterData.find(dd => dd.clusterId.toString() === d.clusterId.toString());\n      const yearsEducation = averages && averages.yearsEducation ? averages.yearsEducation : 0;\n      const hourlyWage = averages && averages.hourlyWage ? averages.hourlyWage : 0;\n      let yearsEducationRank = yearsEducation < response.clusterMinMax.minYearsEducation\n        ? response.clusterMinMax.minYearsEducation : yearsEducation;\n      if (yearsEducationRank > response.clusterMinMax.maxYearsEducation) {\n        yearsEducationRank = response.clusterMinMax.maxYearsEducation;\n      }\n      let hourlyWageRank =  hourlyWage < response.clusterMinMax.minHourlyWage\n        ? response.clusterMinMax.minHourlyWage : hourlyWage;\n      if (hourlyWageRank > response.clusterMinMax.maxHourlyWage) {\n        hourlyWageRank = response.clusterMinMax.maxHourlyWage;\n      }\n\n      response.clusters[d.clusterId] = {\n        ...d,\n        yearsEducation,\n        hourlyWage,\n        yearsEducationRank,\n        hourlyWageRank,\n      };\n    });\n\n  }\n  return response;\n};\n\nexport const useAggregateIndustryMap = (variables: CoreVariables) => {\n  const clusterLevel = variables.clusterLevel ? variables.clusterLevel : ClusterLevel.C1;\n  const {loading, error, data: responseData} = useAggregateIndustriesData({\n    level: variables.level,\n    year: variables.year,\n    clusterLevel,\n  });\n  const data = industryDataToMap(responseData, variables.level, clusterLevel);\n  return {loading, error, data};\n};\n\nexport default useAggregateIndustriesData;\n","import React from 'react';\nimport {backgroundMedium} from '../../styling/styleUtils';\nimport styled, {keyframes} from 'styled-components/macro';\nimport {rgba} from 'polished';\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n    transform: scale(0.5);\n  }\n\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n`;\n\nconst Root = styled.div`\n  position: absolute;\n  top: 1rem;\n  left: 0;\n  right: 0;\n  pointer-events: none;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  z-index: 50;\n`;\n\nconst Content = styled.div`\n  background-color: ${rgba(backgroundMedium, 0.9)};\n  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.15);\n  padding: 1rem;\n  transform: scale(0.5);\n  opacity: 0;\n  animation: ${fadeIn} 0.2s ease-in-out 1 forwards;\n  pointer-events: all;\n  position: relative;\n  max-width: 280px;\n`;\n\nconst CloseButton = styled.button`\n  border: none;\n  background-color: transparent;\n  padding: 0.5rem;\n  color: #333;\n  position: absolute;\n  top: 0;\n  right: 0;\n`;\n\ninterface Props {\n  closeError: () => void;\n  children: React.ReactNode;\n  duration?: number;\n}\n\nconst QuickError = (props: Props) => {\n  const {closeError, duration, children} =props;\n\n  setTimeout(closeError, duration ? duration : 3000);\n\n  return (\n    <Root>\n      <Content>\n        {children}\n        <CloseButton onClick={closeError}>×</CloseButton>\n      </Content>\n    </Root>\n  );\n};\n\nexport default QuickError;\n","import React, {useRef, useEffect, useState} from 'react';\nimport {\n  useGlobalIndustryMap,\n} from '../../../hooks/useGlobalIndustriesData';\nimport { useQuery, gql } from '@apollo/client';\nimport {\n  CityIndustryYear,\n  DigitLevel,\n  ClassificationNaicsIndustry,\n  CompositionType,\n} from '../../../types/graphQL/graphQLTypes';\nimport {usePrevious} from 'react-use';\nimport TreeMap, {transformData, Inputs} from 'react-canvas-treemap';\nimport {sectorColorMap, educationColorRange, wageColorRange} from '../../../styling/styleUtils';\nimport {useWindowWidth} from '../../../contextProviders/appContext';\nimport styled from 'styled-components/macro';\nimport noop from 'lodash/noop';\nimport SimpleError from '../../transitionStateComponents/SimpleError';\nimport LoadingBlock, {LoadingOverlay} from '../../transitionStateComponents/VizLoadingBlock';\nimport Tooltip from '../../general/Tooltip';\nimport ErrorBoundary from '../ErrorBoundary';\nimport useFluent from '../../../hooks/useFluent';\nimport {numberWithCommas} from '../../../Utils';\nimport {breakPoints} from '../../../styling/GlobalGrid';\nimport {Indicator} from '../../general/PreChartRow';\nimport SimpleTextLoading from '../../transitionStateComponents/SimpleTextLoading';\nimport {RapidTooltipRoot, getStandardTooltip} from '../../../utilities/rapidTooltip';\nimport {rgba} from 'polished';\nimport {ColorBy} from '../../../routing/routes';\nimport {\n  useAggregateIndustryMap,\n} from '../../../hooks/useAggregateIndustriesData';\nimport {defaultYear, formatNumber} from '../../../Utils';\nimport {scaleLinear} from 'd3-scale';\nimport QuickError from '../../transitionStateComponents/QuickError';\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  grid-column: 1;\n  grid-row: 2;\n  position: relative;\n\n  @media ${breakPoints.small} {\n    grid-row: 3;\n    grid-column: 1;\n  }\n`;\n\nconst TreeMapContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n`;\n\nconst ECONOMIC_COMPOSITION_QUERY = gql`\n  query GetCityIndustryTreeData($cityId: Int!, $year: Int!) {\n    industries: cityIndustryYearList(cityId: $cityId, year: $year) {\n      id\n      naicsId\n      numCompany\n      numEmploy\n    }\n  }\n`;\n\ninterface SuccessResponse {\n  industries: {\n    id: CityIndustryYear['id'],\n    naicsId: CityIndustryYear['naicsId'],\n    numCompany: CityIndustryYear['numCompany'],\n    numEmploy: CityIndustryYear['numEmploy'],\n  }[];\n}\n\ninterface Variables {\n  cityId: number;\n  year: number;\n}\n\nexport const useEconomicCompositionQuery = (variables: Variables) =>\n  useQuery<SuccessResponse, Variables>(ECONOMIC_COMPOSITION_QUERY, { variables });\n\ninterface Props {\n  cityId: number;\n  year: number;\n  highlighted: string | undefined;\n  clearHighlighted: () => void;\n  digitLevel: DigitLevel;\n  colorBy: ColorBy;\n  compositionType: CompositionType;\n  hiddenSectors: ClassificationNaicsIndustry['id'][];\n  setIndicatorContent: (indicator: Indicator) => void;\n}\n\nconst CompositionTreeMap = (props: Props) => {\n  const {\n    cityId, year, digitLevel, compositionType, highlighted, hiddenSectors,\n    colorBy, setIndicatorContent,\n  } = props;\n  const industryMap = useGlobalIndustryMap();\n  const getString = useFluent();\n  const windowDimensions = useWindowWidth();\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const tooltipContentRef = useRef<HTMLDivElement | null>(null);\n  const highlightedTooltipRef = useRef<HTMLDivElement | null>(null);\n  const [dimensions, setDimensions] = useState<{width: number, height: number} | undefined>(undefined);\n  const {loading, error, data} = useEconomicCompositionQuery({cityId, year});\n  const aggregateIndustryDataMap = useAggregateIndustryMap({level: digitLevel, year: defaultYear});\n\n\n  useEffect(() => {\n    const node = rootRef.current;\n    if (node) {\n      setTimeout(() => {\n        const {width, height} = node.getBoundingClientRect();\n        setDimensions({width, height});\n      }, 0);\n    }\n  }, [rootRef, windowDimensions]);\n\n  const prevData = usePrevious(data);\n  let dataToUse: SuccessResponse | undefined;\n  if (data) {\n    dataToUse = data;\n  } else if (prevData) {\n    dataToUse = prevData;\n  } else {\n    dataToUse = undefined;\n  }\n\n\n  const indicator: Indicator = {\n    text: undefined,\n    tooltipContent: undefined,\n  };\n  let output: React.ReactElement<any> | null;\n  if (industryMap.loading || !dimensions || (loading && prevData === undefined) ||\n      ((colorBy === ColorBy.education || colorBy === ColorBy.wage) && aggregateIndustryDataMap.loading)\n    ) {\n    indicator.text = (\n      <>\n        {getString('global-ui-sample-size') + ': '}<SimpleTextLoading />\n      </>\n    );\n    output = <LoadingBlock />;\n  } else if (error !== undefined) {\n    indicator.text = getString('global-ui-sample-size') + ': ―';\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(error);\n  } else if (industryMap.error !== undefined) {\n    indicator.text = getString('global-ui-sample-size') + ': ―';\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(industryMap.error);\n  } else if (aggregateIndustryDataMap.error !== undefined &&\n    (colorBy === ColorBy.education || colorBy === ColorBy.wage)) {\n    indicator.text = getString('global-ui-sample-size') + ': ―';\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(aggregateIndustryDataMap.error);\n  } else if (dataToUse !== undefined) {\n    const {industries} = dataToUse;\n    const treeMapData: Inputs['data'] = [];\n    let total = 0;\n    industries.forEach(({naicsId, numCompany, numEmploy}) => {\n      const industry = industryMap.data[naicsId];\n      if (industry && industry.level === digitLevel) {\n        const {name, naicsIdTopParent} = industry;\n        if (!hiddenSectors.includes(naicsIdTopParent.toString())) {\n          const companies = numCompany ? numCompany : 0;\n          const employees = numEmploy ? numEmploy : 0;\n          total = compositionType === CompositionType.Companies ? total + companies : total + employees;\n          const value = compositionType === CompositionType.Companies ? companies : employees;\n          treeMapData.push({\n            id: naicsId,\n            value,\n            title: name ? name : '',\n            topLevelParentId: naicsIdTopParent.toString(),\n          });\n        }\n      }\n    });\n    let colorScale: (val: number) => string | undefined;\n    if (colorBy === ColorBy.education && aggregateIndustryDataMap.data !== undefined) {\n      colorScale = scaleLinear()\n                    .domain([\n                      aggregateIndustryDataMap.data.globalMinMax.minYearsEducation,\n                      aggregateIndustryDataMap.data.globalMinMax.medianYearsEducation,\n                      aggregateIndustryDataMap.data.globalMinMax.maxYearsEducation,\n                    ])\n                    .range(educationColorRange as any) as any;\n    } else if (colorBy === ColorBy.wage && aggregateIndustryDataMap.data !== undefined) {\n      colorScale = scaleLinear()\n                    .domain([\n                      aggregateIndustryDataMap.data.globalMinMax.minHourlyWage,\n                      aggregateIndustryDataMap.data.globalMinMax.medianHourlyWage,\n                      aggregateIndustryDataMap.data.globalMinMax.maxHourlyWage,\n                    ])\n                    .range(wageColorRange as any) as any;\n    } else {\n      colorScale = () => undefined;\n    }\n    for(const i in treeMapData) {\n      if (treeMapData[i] !== undefined) {\n        let fill: string | undefined;\n        if ((colorBy === ColorBy.education|| colorBy === ColorBy.wage) && aggregateIndustryDataMap.data) {\n          const target = aggregateIndustryDataMap.data.industries[treeMapData[i].id];\n          const targetValue = colorBy === ColorBy.education ? target.yearsEducationRank : target.hourlyWageRank;\n          fill = colorScale(targetValue);\n        }\n        treeMapData[i].fill = fill;\n      }\n    }\n    if (!treeMapData.length) {\n      indicator.text = getString('global-ui-sample-size') + ': ―';\n      output = (\n        <LoadingOverlay>\n          <SimpleError fluentMessageId={'global-ui-error-no-sectors-selected'} />\n        </LoadingOverlay>\n      );\n    } else {\n      const transformed = transformData({\n        data: treeMapData,\n        width: dimensions.width,\n        height: dimensions.height,\n        colorMap: sectorColorMap,\n      });\n      const loadingOverlay = loading ? <LoadingBlock /> : null;\n      const onHover = (id: string) => {\n        const node = tooltipContentRef.current;\n        const industry = industryMap.data[id];\n        const industryWithData = industries.find(({naicsId}) => naicsId === id);\n        if (industry && industryWithData && node) {\n          const color = sectorColorMap.find(c => c.id === industry.naicsIdTopParent.toString());\n          const numCompany = industryWithData.numCompany ? industryWithData.numCompany : 0;\n          const numEmploy = industryWithData.numEmploy ? industryWithData.numEmploy : 0;\n          const value = compositionType === CompositionType.Employees ? numEmploy : numCompany;\n          const share = (value / total * 100);\n          const shareString = share < 0.01 ? '<0.01%' : share.toFixed(2) + '%';\n          const rows = [\n            [getString('global-ui-naics-code') + ':', industry.code],\n            [getString('global-ui-year') + ':', year.toString()],\n            [getString('tooltip-share-generic', {value: compositionType}) + ':', shareString],\n          ];\n          if (compositionType === CompositionType.Employees) {\n            rows.push([\n              getString('tooltip-number-generic', {value: compositionType}) + ':',\n              numberWithCommas(formatNumber(Math.round(value))),\n            ]);\n          }\n          if ((colorBy === ColorBy.education|| colorBy === ColorBy.wage) && aggregateIndustryDataMap.data) {\n            const target = aggregateIndustryDataMap.data.industries[industry.naicsId];\n            const targetValue = colorBy === ColorBy.education ? target.yearsEducation : target.hourlyWage;\n            rows.push([\n              getString('global-formatted-color-by', {type: colorBy}),\n              (colorBy === ColorBy.wage ? '$' : '') + targetValue.toFixed(2),\n            ]);\n          }\n          node.innerHTML = getStandardTooltip({\n            title: industry.name ? industry.name : '',\n            color: color ? rgba(color.color, 0.3) : '#fff',\n            rows,\n            boldColumns: [1, 2],\n          });\n        }\n      };\n\n      const highlightedCell = transformed.treeMapCells.find(d => d.id === highlighted);\n\n      if (highlighted && highlightedCell) {\n        const node = highlightedTooltipRef.current;\n        const industry = industryMap.data[highlighted];\n        const industryWithData = industries.find(({naicsId}) => naicsId === highlighted);\n        if (industry && industryWithData && node) {\n          const color = sectorColorMap.find(c => c.id === industry.naicsIdTopParent.toString());\n          const numCompany = industryWithData.numCompany ? industryWithData.numCompany : 0;\n          const numEmploy = industryWithData.numEmploy ? industryWithData.numEmploy : 0;\n          const value = compositionType === CompositionType.Employees ? numEmploy : numCompany;\n          const share = (value / total * 100);\n          const shareString = share < 0.01 ? '<0.01%' : share.toFixed(2) + '%';\n          const rows = [\n            [getString('global-ui-naics-code') + ':', industry.code],\n            [getString('global-ui-year') + ':', year.toString()],\n            [getString('tooltip-share-generic', {value: compositionType}) + ':', shareString],\n          ];\n          if (compositionType === CompositionType.Employees) {\n            rows.push([\n              getString('tooltip-number-generic', {value: compositionType}) + ':',\n              numberWithCommas(formatNumber(Math.round(value))),\n            ]);\n          }\n          if ((colorBy === ColorBy.education|| colorBy === ColorBy.wage) && aggregateIndustryDataMap.data) {\n            const target = aggregateIndustryDataMap.data.industries[industry.naicsId];\n            const targetValue = colorBy === ColorBy.education ? target.yearsEducation : target.hourlyWage;\n            rows.push([\n              getString('global-formatted-color-by', {type: colorBy}),\n              (colorBy === ColorBy.wage ? '$' : '') + targetValue.toFixed(2),\n            ]);\n          }\n          node.innerHTML = getStandardTooltip({\n            title: industry.name ? industry.name : '',\n            color: color ? rgba(color.color, 0.3) : '#fff',\n            rows,\n            boldColumns: [1, 2],\n          }) + `\n           <div style=\"position:absolute;top: -5px;right:2px;font-size:1.1rem;\">×</div>\n          `;\n          node.style.position = 'absolute';\n          node.style.pointerEvents = 'all';\n          node.style.cursor = 'pointer';\n          node.style.display = 'block';\n          node.style.left =\n            highlightedCell.x0 + ((highlightedCell.x1 - highlightedCell.x0) / 2) + 'px';\n          node.style.top = highlightedCell.y0 + 16 + 'px';\n          const clearHighlighted = () => {\n            props.clearHighlighted();\n            node.removeEventListener('click', clearHighlighted);\n          };\n          node.addEventListener('click', clearHighlighted);\n        }\n      } else {\n        const node = highlightedTooltipRef.current;\n        if (node) {\n          node.style.display = 'none';\n        }\n      }\n\n      const highlightErrorPopup = highlighted && !highlightedCell ? (\n        <QuickError\n          closeError={props.clearHighlighted}\n        >\n          {getString('global-ui-error-industry-not-in-data-set')}\n        </QuickError>\n      ) : null;\n\n      indicator.text = loading ? (\n        <>\n          {getString('global-ui-sample-size') + ': '}<SimpleTextLoading />\n        </>\n      ) : `${getString('global-ui-sample-size')}: ${numberWithCommas(formatNumber(Math.round(total)))} ` +\n        getString('global-ui-estimated-total-employees');\n      indicator.tooltipContent = getString('glossary-total-shown');\n      const fallbackTitle =\n        'Treemap displaying the economic composition of the selected city ' +\n        'based on the number of ' + compositionType + ' found within the city. ' +\n        'The top values are as follows: ';\n      output = (\n        <TreeMapContainer>\n          <Tooltip\n            explanation={<div ref={tooltipContentRef} />}\n            cursor={'default'}\n            overrideStyles={true}\n          >\n            <ErrorBoundary>\n              <TreeMap\n                highlighted={highlighted}\n                cells={transformed.treeMapCells}\n                numCellsTier={0}\n                chartContainerWidth={dimensions.width}\n                chartContainerHeight={dimensions.height}\n                onCellClick={noop}\n                onMouseOverCell={onHover}\n                onMouseLeaveChart={noop}\n                fallbackTitle={fallbackTitle}\n              />\n            </ErrorBoundary>\n          </Tooltip>\n          {loadingOverlay}\n          {highlightErrorPopup}\n        </TreeMapContainer>\n      );\n    }\n  } else {\n    output = null;\n  }\n\n  setIndicatorContent(indicator);\n  return (\n    <>\n      <Root ref={rootRef}>\n        {output}\n        <RapidTooltipRoot\n          ref={highlightedTooltipRef}\n        />\n      </Root>\n    </>\n  );\n};\n\nexport default React.memo(CompositionTreeMap);\n","import { useQuery, gql } from '@apollo/client';\nimport {\n  ClassificationNaicsCluster,\n} from '../types/graphQL/graphQLTypes';\nimport {Datum as SearchDatum} from 'react-panel-search';\n\nconst GLOBAL_CLUSTER_QUERY = gql`\n  query GetGlobalClusterData {\n    clusters: classificationNaicsClusterList {\n      clusterId\n      parentId\n      clusterIdTopParent\n      level\n      name: shortName\n      tradable\n      id\n    }\n  }\n`;\n\ninterface Cluster {\n  clusterId: ClassificationNaicsCluster['clusterId'];\n  parentId: ClassificationNaicsCluster['parentId'];\n  clusterIdTopParent: ClassificationNaicsCluster['clusterIdTopParent'];\n  level: ClassificationNaicsCluster['level'];\n  name: ClassificationNaicsCluster['name'];\n  tradable: ClassificationNaicsCluster['tradable'];\n  id: ClassificationNaicsCluster['id'];\n}\n\ninterface SuccessResponse {\n  clusters: Cluster[];\n}\n\nconst useGlobalClusterData = () => useQuery<SuccessResponse, never>(GLOBAL_CLUSTER_QUERY);\n\nconst clusterDataToHierarchicalTreeData = (data: SuccessResponse | undefined) => {\n  const response: SearchDatum[] = [];\n  if (data !== undefined) {\n    const {clusters} = data;\n    clusters.forEach(({clusterId, name, level, clusterIdTopParent}) => {\n      if (name !== null && level !== null && level !== 2) {\n        response.push({\n          id: clusterId,\n          title: name,\n          level,\n          parent_id: clusterIdTopParent === null || clusterId === clusterIdTopParent.toString()\n            ? null : clusterIdTopParent.toString(),\n        });\n      }\n    });\n  }\n  return response;\n};\n\nexport const useGlobalClusterHierarchicalTreeData = () => {\n  const {loading, error, data: responseData} = useGlobalClusterData();\n  const data = clusterDataToHierarchicalTreeData(responseData);\n  return {loading, error, data};\n};\n\ninterface ClusterMap {\n  [id: string]: Cluster;\n}\n\nconst clusterDataToMap = (data: SuccessResponse | undefined, skipLevel2?: boolean) => {\n  const response: ClusterMap = {};\n  if (data !== undefined) {\n    const {clusters} = data;\n    clusters.forEach(({id, clusterId, name, level, parentId, clusterIdTopParent, tradable}) => {\n      if (!skipLevel2 || level !== 2) {\n        response[clusterId] = {\n          id,\n          clusterId,\n          name,\n          level,\n          parentId: skipLevel2 && parentId !== null ? clusterIdTopParent : parentId,\n          tradable,\n          clusterIdTopParent,\n        };\n      }\n    });\n  }\n  return response;\n};\n\ninterface Options {\n  skipLevel2?: boolean;\n}\n\nexport const useGlobalClusterMap = (options?: Options) => {\n  const skipLevel2 = options && options.skipLevel2 ? true : false;\n  const {loading, error, data: responseData} = useGlobalClusterData();\n  const data = clusterDataToMap(responseData, skipLevel2);\n  return {loading, error, data};\n};\n\nexport default useGlobalClusterData;\n\n","import React, {useRef, useEffect, useState} from 'react';\nimport {\n  useGlobalClusterMap,\n} from '../../../hooks/useGlobalClusterData';\nimport { useQuery, gql } from '@apollo/client';\nimport {\n  CityClusterYear,\n  DigitLevel,\n  CompositionType,\n  ClassificationNaicsCluster,\n} from '../../../types/graphQL/graphQLTypes';\nimport {usePrevious} from 'react-use';\nimport TreeMap, {transformData, Inputs} from 'react-canvas-treemap';\nimport {clusterColorMap} from '../../../styling/styleUtils';\nimport {useWindowWidth} from '../../../contextProviders/appContext';\nimport styled from 'styled-components/macro';\nimport noop from 'lodash/noop';\nimport SimpleError from '../../../components/transitionStateComponents/SimpleError';\nimport LoadingBlock, {LoadingOverlay} from '../../transitionStateComponents/VizLoadingBlock';\nimport Tooltip from '../../general/Tooltip';\nimport ErrorBoundary from '../ErrorBoundary';\nimport useFluent from '../../../hooks/useFluent';\nimport {numberWithCommas} from '../../../Utils';\nimport {breakPoints} from '../../../styling/GlobalGrid';\nimport {Indicator} from '../../../components/general/PreChartRow';\nimport SimpleTextLoading from '../../../components/transitionStateComponents/SimpleTextLoading';\nimport {RapidTooltipRoot, getStandardTooltip} from '../../../utilities/rapidTooltip';\nimport {ColorBy, ClusterLevel} from '../../../routing/routes';\nimport {scaleSymlog, scaleLinear} from 'd3-scale';\nimport {extent} from 'd3-array';\nimport {intensityColorRange, educationColorRange, wageColorRange} from '../../../styling/styleUtils';\nimport {defaultYear, formatNumber} from '../../../Utils';\nimport {\n  useAggregateIndustryMap,\n} from '../../../hooks/useAggregateIndustriesData';\nimport {rgba} from 'polished';\nimport QuickError from '../../transitionStateComponents/QuickError';\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  grid-column: 1;\n  grid-row: 2;\n  position: relative;\n\n  @media ${breakPoints.small} {\n    grid-row: 3;\n    grid-column: 1;\n  }\n`;\n\nconst TreeMapContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n`;\n\nconst CLUSTER_COMPOSITION_QUERY = gql`\n  query GetCityIndustryTreeData($cityId: Int!, $year: Int!) {\n    clusters: cityClusterYearList(cityId: $cityId, year: $year) {\n      id\n      clusterId\n      level\n      numCompany\n      numEmploy\n      rcaNumCompany\n      rcaNumEmploy\n    }\n  }\n`;\n\ninterface SuccessResponse {\n  clusters: {\n    id: CityClusterYear['id'],\n    clusterId: CityClusterYear['clusterId'],\n    level: CityClusterYear['level'],\n    numCompany: CityClusterYear['numCompany'],\n    numEmploy: CityClusterYear['numEmploy'],\n    rcaNumCompany: CityClusterYear['rcaNumCompany'],\n    rcaNumEmploy: CityClusterYear['rcaNumEmploy'],\n  }[];\n}\n\ninterface Variables {\n  cityId: number;\n  year: number;\n}\n\nexport const useClusterCompositionQuery = (variables: Variables) =>\n  useQuery<SuccessResponse, Variables>(CLUSTER_COMPOSITION_QUERY, { variables });\n\ninterface Props {\n  cityId: number;\n  year: number;\n  highlighted: string | undefined;\n  colorBy: ColorBy;\n  compositionType: CompositionType;\n  hiddenClusters: ClassificationNaicsCluster['id'][];\n  clusterLevel: ClusterLevel;\n  setIndicatorContent: (indicator: Indicator) => void;\n  clearHighlighted: () => void;\n}\n\nconst CompositionTreeMap = (props: Props) => {\n  const {\n    cityId, year, compositionType, highlighted,\n    clusterLevel, setIndicatorContent,\n    colorBy, hiddenClusters,\n  } = props;\n  const clusterMap = useGlobalClusterMap();\n  const getString = useFluent();\n  const windowDimensions = useWindowWidth();\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const tooltipContentRef = useRef<HTMLDivElement | null>(null);\n  const highlightedTooltipRef = useRef<HTMLDivElement | null>(null);\n  const [dimensions, setDimensions] = useState<{width: number, height: number} | undefined>(undefined);\n  const {loading, error, data} = useClusterCompositionQuery({cityId, year});\n  const aggregateIndustryDataMap = useAggregateIndustryMap({\n    level: DigitLevel.Six, year: defaultYear, clusterLevel: parseInt(clusterLevel, 10),\n  });\n\n  useEffect(() => {\n    const node = rootRef.current;\n    if (node) {\n      setTimeout(() => {\n        const {width, height} = node.getBoundingClientRect();\n        setDimensions({width, height});\n      }, 0);\n    }\n  }, [rootRef, windowDimensions]);\n\n\n  const prevData = usePrevious(data);\n  let dataToUse: SuccessResponse | undefined;\n  if (data) {\n    dataToUse = data;\n  } else if (prevData) {\n    dataToUse = prevData;\n  } else {\n    dataToUse = undefined;\n  }\n\n  const indicator: Indicator = {\n    text: undefined,\n    tooltipContent: undefined,\n  };\n  let output: React.ReactElement<any> | null;\n  if (clusterMap.loading || !dimensions || (loading && prevData === undefined) ||\n      ((colorBy === ColorBy.education || colorBy === ColorBy.wage) && aggregateIndustryDataMap.loading)) {\n    indicator.text = (\n      <>\n        {getString('global-ui-total') + ': '}<SimpleTextLoading />\n      </>\n    );\n    output = <LoadingBlock />;\n  } else if (error !== undefined) {\n    indicator.text = getString('global-ui-total') + ': ―';\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(error);\n  } else if (clusterMap.error !== undefined) {\n    indicator.text = getString('global-ui-total') + ': ―';\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(clusterMap.error);\n  } else if (aggregateIndustryDataMap.error !== undefined &&\n    (colorBy === ColorBy.education || colorBy === ColorBy.wage)) {\n    indicator.text = getString('global-ui-total') + ': ―';\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(aggregateIndustryDataMap.error);\n  } else if (dataToUse !== undefined) {\n    const clusters = dataToUse.clusters.filter(c => c.level && c.level.toString() === clusterLevel);\n    const treeMapData: Inputs['data'] = [];\n\n    const allRCAValues = clusters.map(c => {\n      if (compositionType === CompositionType.Employees) {\n        return c.rcaNumEmploy ? c.rcaNumEmploy : 0;\n      } else {\n        return c.rcaNumCompany ? c.rcaNumCompany : 0;\n      }\n    });\n\n    const minMax = extent(allRCAValues) as [number, number];\n\n    let total = 0;\n    clusters.forEach(({clusterId, numCompany, numEmploy}) => {\n      const cluster = clusterMap.data[clusterId];\n      if (cluster && cluster.level && cluster.level.toString() === clusterLevel) {\n        const {name, clusterIdTopParent} = cluster;\n        if (clusterIdTopParent && !hiddenClusters.includes(clusterIdTopParent.toString())) {\n          const companies = numCompany ? numCompany : 0;\n          const employees = numEmploy ? numEmploy : 0;\n          total = compositionType === CompositionType.Companies ? total + companies : total + employees;\n          const value = compositionType === CompositionType.Companies ? companies : employees;\n          treeMapData.push({\n            id: clusterId,\n            value,\n            title: name ? name : '',\n            topLevelParentId: clusterIdTopParent ? clusterIdTopParent.toString() : clusterId.toString(),\n          });\n        }\n      }\n    });\n\n\n    let colorScale: (val: number) => string | undefined;\n    if (colorBy === ColorBy.education && aggregateIndustryDataMap.data !== undefined) {\n      colorScale = scaleLinear()\n                    .domain([\n                      aggregateIndustryDataMap.data.clusterMinMax.minYearsEducation,\n                      aggregateIndustryDataMap.data.clusterMinMax.medianYearsEducation,\n                      aggregateIndustryDataMap.data.clusterMinMax.maxYearsEducation,\n                    ])\n                    .range(educationColorRange as any) as any;\n    } else if (colorBy === ColorBy.wage && aggregateIndustryDataMap.data !== undefined) {\n      colorScale = scaleLinear()\n                    .domain([\n                      aggregateIndustryDataMap.data.clusterMinMax.minHourlyWage,\n                      aggregateIndustryDataMap.data.clusterMinMax.medianHourlyWage,\n                      aggregateIndustryDataMap.data.clusterMinMax.maxHourlyWage,\n                    ])\n                    .range(wageColorRange as any) as any;\n    } else {\n      // colorScale = () => undefined;\n      colorScale = scaleSymlog()\n        .domain(minMax)\n        .range(intensityColorRange as any) as unknown as (value: number) => string;\n    }\n    for(const i in treeMapData) {\n      if (treeMapData[i] !== undefined) {\n        let fill: string | undefined;\n        const clusterIndustryDatum = aggregateIndustryDataMap.data.clusters[treeMapData[i].id];\n        if (colorBy === ColorBy.education && aggregateIndustryDataMap.data !== undefined) {\n          if (clusterIndustryDatum) {\n            fill = colorScale(clusterIndustryDatum.yearsEducationRank) as string;\n          } else {\n            fill = 'gray';\n          }\n        } else if (colorBy === ColorBy.wage && aggregateIndustryDataMap.data !== undefined) {\n          if (clusterIndustryDatum) {\n            fill = colorScale(clusterIndustryDatum.hourlyWageRank) as string;\n          } else {\n            fill = 'gray';\n          }\n        } else {\n          fill = undefined;\n        }\n        treeMapData[i].fill = fill;\n      }\n    }\n\n    if (!treeMapData.length) {\n      indicator.text = getString('global-ui-total') + ': ―';\n      output = (\n        <LoadingOverlay>\n          <SimpleError fluentMessageId={'global-ui-error-no-sectors-selected'} />\n        </LoadingOverlay>\n      );\n    } else {\n      const transformed = transformData({\n        data: treeMapData,\n        width: dimensions.width,\n        height: dimensions.height,\n        colorMap: clusterColorMap,\n      });\n      const loadingOverlay = loading ? <LoadingBlock /> : null;\n      const onHover = (id: string) => {\n        const node = tooltipContentRef.current;\n        const cluster = clusterMap.data[id];\n        const clusterWithData = clusters.find(({clusterId}) => clusterId === id);\n        if (cluster && clusterWithData && node) {\n          const numCompany = clusterWithData.numCompany ? clusterWithData.numCompany : 0;\n          const numEmploy = clusterWithData.numEmploy ? clusterWithData.numEmploy : 0;\n          const value = compositionType === CompositionType.Employees ? numEmploy : numCompany;\n          const share = (value / total * 100);\n          const shareString = share < 0.01 ? '<0.01%' : share.toFixed(2) + '%';\n          const color = clusterColorMap.find(c => cluster.clusterIdTopParent && c.id === cluster.clusterIdTopParent.toString());\n          const rows = [\n            [getString('global-ui-year') + ':', year.toString()],\n            [getString('tooltip-share-generic', {value: compositionType}) + ':', shareString],\n          ];\n          if (compositionType === CompositionType.Employees) {\n            rows.push([\n              getString('tooltip-number-generic', {value: compositionType}) + ':',\n              numberWithCommas(formatNumber(Math.round(value))),\n            ]);\n          }\n          if ((colorBy === ColorBy.education|| colorBy === ColorBy.wage) && aggregateIndustryDataMap.data) {\n            const target = aggregateIndustryDataMap.data.clusters[cluster.clusterId];\n            const targetValue = colorBy === ColorBy.education ? target.yearsEducation : target.hourlyWage;\n            rows.push([\n              getString('global-formatted-color-by', {type: colorBy}),\n              (colorBy === ColorBy.wage ? '$' : '') + targetValue.toFixed(2),\n            ]);\n          }\n          node.innerHTML = getStandardTooltip({\n            title: cluster.name ? cluster.name : '',\n            color: color ? rgba(color.color, 0.3) : '#fff',\n            rows,\n            boldColumns: [1, 2],\n          });\n        }\n      };\n\n\n      const highlightedCell = transformed.treeMapCells.find(d => d.id === highlighted);\n\n      if (highlighted && highlightedCell) {\n        const node = highlightedTooltipRef.current;\n        const cluster = clusterMap.data[highlighted];\n        const clusterWithData = clusters.find(({clusterId}) => clusterId === highlighted);\n        if (cluster && clusterWithData && node) {\n          const numCompany = clusterWithData.numCompany ? clusterWithData.numCompany : 0;\n          const numEmploy = clusterWithData.numEmploy ? clusterWithData.numEmploy : 0;\n          const value = compositionType === CompositionType.Employees ? numEmploy : numCompany;\n          const share = (value / total * 100);\n          const shareString = share < 0.01 ? '<0.01%' : share.toFixed(2) + '%';\n          const color = clusterColorMap.find(c => cluster.clusterIdTopParent && c.id === cluster.clusterIdTopParent.toString());\n          const rows = [\n            [getString('global-ui-year') + ':', year.toString()],\n            [getString('tooltip-share-generic', {value: compositionType}) + ':', shareString],\n          ];\n          if (compositionType === CompositionType.Employees) {\n            rows.push([\n              getString('tooltip-number-generic', {value: compositionType}) + ':',\n              numberWithCommas(formatNumber(Math.round(value))),\n            ]);\n          }\n          if ((colorBy === ColorBy.education|| colorBy === ColorBy.wage) && aggregateIndustryDataMap.data) {\n            const target = aggregateIndustryDataMap.data.clusters[cluster.clusterId];\n            const targetValue = colorBy === ColorBy.education ? target.yearsEducation : target.hourlyWage;\n            rows.push([\n              getString('global-formatted-color-by', {type: colorBy}),\n              (colorBy === ColorBy.wage ? '$' : '') + targetValue.toFixed(2),\n            ]);\n          }\n          node.innerHTML = getStandardTooltip({\n            title: cluster.name ? cluster.name : '',\n            color: color ? rgba(color.color, 0.3) : '#fff',\n            rows,\n            boldColumns: [1, 2],\n          }) + `\n           <div style=\"position:absolute;top: 2px;right:2px;\">×</div>\n          `;\n          node.style.position = 'absolute';\n          node.style.pointerEvents = 'all';\n          node.style.cursor = 'pointer';\n          node.style.display = 'block';\n          node.style.left =\n            highlightedCell.x0 + ((highlightedCell.x1 - highlightedCell.x0) / 2) + 'px';\n          node.style.top = highlightedCell.y0 + 16 + 'px';\n          const clearHighlighted = () => {\n            props.clearHighlighted();\n            node.removeEventListener('click', clearHighlighted);\n          };\n          node.addEventListener('click', clearHighlighted);\n        }\n      } else {\n        const node = highlightedTooltipRef.current;\n        if (node) {\n          node.style.display = 'none';\n        }\n      }\n\n      const highlightErrorPopup = highlighted && !highlightedCell ? (\n        <QuickError\n          closeError={props.clearHighlighted}\n        >\n          {getString('global-ui-error-industry-not-in-data-set')}\n        </QuickError>\n      ) : null;\n\n      indicator.text = loading ? (\n        <>\n          {getString('global-ui-sample-size') + ': '}<SimpleTextLoading />\n        </>\n      ) : `${getString('global-ui-sample-size')}: ${numberWithCommas(formatNumber(Math.round(total)))} `\n          + getString('global-ui-estimated-total-employees');\n      indicator.tooltipContent = getString('glossary-total-shown');\n      const fallbackTitle =\n        'Treemap displaying the economic composition of the selected city ' +\n        'based on the number of ' + compositionType + ' found within the city. ' +\n        'The top values are as follows: ';\n      output = (\n        <TreeMapContainer>\n          <Tooltip\n            explanation={<div ref={tooltipContentRef} />}\n            cursor={'default'}\n            overrideStyles={true}\n          >\n            <ErrorBoundary>\n              <TreeMap\n                highlighted={highlighted}\n                cells={transformed.treeMapCells}\n                numCellsTier={0}\n                chartContainerWidth={dimensions.width}\n                chartContainerHeight={dimensions.height}\n                onCellClick={noop}\n                onMouseOverCell={onHover}\n                onMouseLeaveChart={noop}\n                fallbackTitle={fallbackTitle}\n              />\n            </ErrorBoundary>\n          </Tooltip>\n          {loadingOverlay}\n          {highlightErrorPopup}\n        </TreeMapContainer>\n      );\n    }\n  } else {\n    output = null;\n  }\n\n  setIndicatorContent(indicator);\n  return (\n    <>\n      <Root ref={rootRef}>\n        {output}\n        <RapidTooltipRoot\n          ref={highlightedTooltipRef}\n        />\n      </Root>\n    </>\n  );\n};\n\nexport default React.memo(CompositionTreeMap);\n","import React, {useState} from 'react';\nimport styled from 'styled-components/macro';\nimport {\n  primaryFont,\n  fadeInAnimation,\n  backgroundDark,\n  secondaryFont,\n  noOutlineOnFocus,\n  radioButtonCss,\n} from '../../../styling/styleUtils';\nimport {rgba} from 'polished';\nimport useFluent from '../../../hooks/useFluent';\n\nconst Root = styled.div`\n  position: relative;\n  font-family: ${primaryFont};\n  z-index: 40;\n`;\nconst Button = styled.button`\n  display: flex;\n  align-items: center;\n  margin: 0.1rem;\n  text-transform: uppercase;\n  font-size: 0.65rem;\n  font-size: clamp(0.5rem, 0.75vw, 0.75rem);\n  font-family: ${primaryFont};\n  background-color: #fff;\n  border: none;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n  flex-shrink: 1;\n  flex-grow: 0;\n  flex-basis: 1;\n  width: min-content;\n  height: 28px;\n  white-space: pre-wrap;\n  ${noOutlineOnFocus}\n`;\n\nconst Block = styled.div<{$checked: boolean}>`\n  width: 0.75rem;\n  height: 0.75rem;\n  width: clamp(0.5rem, 1vw, 1.2rem);\n  height: clamp(0.5rem, 1vw, 1.2rem);\n  margin-right: 0.2rem;\n  position: relative;\n  flex-shrink: 0;\n\n  &:after {\n    ${({$checked}) => $checked ? \"content: '';\" : ''}\n    width: 0.1rem;\n    border-radius: 80px;\n    height: 180%;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n    transform: rotate(45deg);\n    background-color: #333;\n  }\n`;\n\nconst HideIsolateRoot = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  transform: translate(0, -100%);\n  pointer-events: none;\n  display: flex;\n  justify-content: center;\n  ${fadeInAnimation}\n`;\n\nconst HideIsolateContent = styled.div`\n  pointer-events: all;\n  margin: auto;\n  position: relative;\n`;\n\nconst HideIsolateText = styled.div`\n  border-radius: 4px;\n  padding: 9px 14px;\n  background-color: ${backgroundDark};\n  color: #fff;\n  border-radius: 4px;\n  box-shadow: 0px 1px 4px 0px rgba(0, 0, 0, 0.25);\n`;\n\nconst ArrowContainer = styled.div`\n  width: 100%;\n  height: 0.5rem;\n  display: flex;\n  justify-content: center;\n`;\n\nconst Arrow = styled.div`\n  width: 0;\n  height: 0;\n  border-left: 0.5rem solid transparent;\n  border-right: 0.5rem solid transparent;\n  border-top: 0.5rem solid ${backgroundDark};\n  position: relative;\n  top: -2px;\n`;\n\nconst Title = styled.div`\n  font-size: 0.9rem;\n  text-transform: uppercase;\n  text-align: center;\n  white-space: nowrap;\n`;\n\nconst Hr = styled.hr`\n  max-width: 5rem;\n  border-top: solid 2px;\n`;\n\nconst CloseButton = styled.button`\n  border: none;\n  padding: 0.2rem;\n  background-color: transparent;\n  color: #fff;\n  position: absolute;\n  top: 0;\n  right: 0;\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\nconst HideIsolateButton = styled.button`\n  margin: 8px;\n  text-transform: uppercase;\n  font-family: ${secondaryFont};\n  color: #fff;\n  background-color: transparent;\n  border: none;\n  white-space: nowrap;\n  ${noOutlineOnFocus}\n  ${radioButtonCss}\n\n  &:hover {\n    background-color: #fff;\n    color: ${backgroundDark};\n  }\n`;\n\nexport interface CategoryDatum {\n  id: string;\n  color: string;\n  name: string;\n}\n\ninterface Props {\n  category: CategoryDatum;\n  toggleCategory?: () => void;\n  isolateCategory?: () => void;\n  isHidden: boolean;\n  isIsolated: boolean;\n}\n\nconst Label = ({category: {color, name}, toggleCategory, isolateCategory, isHidden, isIsolated}: Props) => {\n  const [isHovered, setIsHovered] = useState<boolean>(false);\n  const getString = useFluent();\n  const toggleButton = toggleCategory ? (\n    <HideIsolateButton\n      $checked={isHidden}\n      onClick={toggleCategory}\n    >\n      {getString('global-ui-hide')}\n    </HideIsolateButton>\n  ) : null;\n  const isolateButton = isolateCategory ? (\n    <HideIsolateButton\n      $checked={isIsolated}\n      onClick={isolateCategory}\n    >\n      {getString('global-ui-keep-only')}\n    </HideIsolateButton>\n  ) : null;\n  const hideIsolateButtons = isolateButton || toggleButton ? (\n    <ButtonWrapper>\n      {toggleButton}\n      {isolateButton}\n    </ButtonWrapper>\n  ) : null;\n  const hideIsolate = isHovered ? (\n    <HideIsolateRoot>\n      <HideIsolateContent>\n        <HideIsolateText>\n          <Title>{name}</Title>\n          <Hr style={{borderColor: color}}/>\n          {hideIsolateButtons}\n        </HideIsolateText>\n        <ArrowContainer>\n          <Arrow />\n        </ArrowContainer>\n        <CloseButton onClick={() => setIsHovered(false)}>\n          ×\n        </CloseButton>\n      </HideIsolateContent>\n    </HideIsolateRoot>\n  ) : null;\n  return (\n    <Root\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      style={{zIndex: isHovered ? 150 : undefined}}\n    >\n      <Button\n        style={{\n          backgroundColor: isHovered ? rgba(color, 0.3) : undefined,\n          opacity: isHidden ? 0.5 : undefined,\n        }}\n        onClick={toggleCategory}\n      >\n        <Block\n          style={{backgroundColor: color}}\n          $checked={isHidden}\n        />\n        {name}\n      </Button>\n      {hideIsolate}\n    </Root>\n  );\n};\n\nexport default Label;\n","import React from 'react';\nimport styled, {keyframes} from 'styled-components/macro';\nimport Label, {CategoryDatum} from './Label';\nimport {breakPoints} from '../../../styling/GlobalGrid';\nimport {\n  backgroundMedium,\n  baseColor,\n} from '../../../styling/styleUtils';\nimport raw from 'raw.macro';\nimport {joyrideClassNames} from '../../navigation/secondaryHeader/guide/CitiesGuide';\n\nconst ReloadImgSrc = raw('../../../assets/icons/reload.svg');\n\nconst RootBase = styled.div`\n  grid-row: 3;\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n\n  @media ${breakPoints.small} {\n    grid-row: 4;\n  }\n`;\n\nconst StandardRoot = styled(RootBase)`\n  grid-column: 1;\n  justify-content: center;\n`;\n\nconst FullWidthRoot = styled(RootBase)`\n  grid-column: 1 / -1;\n`;\n\nconst StandardContent = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  position: relative;\n  align-items: center;\n  box-sizing: border-box;\n  padding: 0.875rem 0;\n\n  @media ${breakPoints.small} {\n    margin-bottom: 3rem;\n  }\n`;\n\nconst FullWidthContent = styled(StandardContent)`\n  padding: 0.875rem 0;\n\n  @media ${breakPoints.small} {\n    padding-right: 0;\n  }\n`;\n\nconst fadeAndSlideIn = keyframes`\n  0% {\n    transform: translate(300%, 0);\n    opacity: 0;\n  }\n\n  70% {\n    transform: translate(90%, 0);\n    opacity: 0.7;\n  }\n\n  100% {\n    transform: translate(110%, 0);\n    opacity: 1;\n  }\n`;\n\nconst fadeAndSlideDown = keyframes`\n  0% {\n    transform: translate(0, -50%);\n    opacity: 0;\n  }\n\n  70% {\n    transform: translate(0, 20%);\n    opacity: 0.7;\n  }\n\n  100% {\n    transform: translate(0, 0);\n    opacity: 1;\n  }\n`;\n\nconst ResetLabelsButtonContainer = styled.div`\n  position: absolute;\n  text-align: center;\n  pointer-events: none;\n  right: 0;\n\n  @media (max-width: 1000px) {\n    left: 0;\n    bottom: -0.5rem;\n  }\n`;\n\nconst ResetLabelsButton = styled.button`\n  pointer-events: all;\n  animation: ${fadeAndSlideIn} 0.2s ease-in-out 1 forwards;\n  text-transform: uppercase;\n  color: ${baseColor};\n  background-color: ${backgroundMedium};\n  font-size: 0.5rem;\n  font-weight: 600;\n  outline-color: ${backgroundMedium};\n  transition: outline 0.1s ease-in-out;\n  padding: 0.3rem 0.5rem;\n  display: inline-flex;\n  align-items: center;\n  width: 5rem;\n\n  &:hover, &:focus {\n    outline: solid 2px ${backgroundMedium};\n  }\n\n  @media (max-width: 1000px) {\n    animation: ${fadeAndSlideDown} 0.2s ease-in-out 1 forwards;\n    width: auto;\n    left: 0;\n    bottom: 0;\n  }\n`;\n\nconst ReloadIcon = styled.div`\n  width: 1rem;\n  height: 1rem;\n  margin-right: 0.5rem;\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    path {\n      fill: ${baseColor};\n    }\n  }\n\n  @media (max-width: 1000px) {\n    width: 0.7rem;\n    height: 0.7rem;\n  }\n`;\n\ninterface BaseProps {\n  categories: CategoryDatum[];\n  fullWidth?: boolean;\n}\n\ntype Props = BaseProps & (\n  {\n    allowToggle: true;\n    toggleCategory: (id: string) => void;\n    isolateCategory: (id: string) => void;\n    hiddenCategories: string[];\n    resetCategories: () => void;\n    resetText: string;\n  } | {\n    allowToggle: false;\n  }\n);\n\nconst CategoryLabels = (props: Props) => {\n  const {categories, fullWidth} = props;\n  let output: React.ReactElement<any>;\n  if (props.allowToggle) {\n    const {\n      toggleCategory, isolateCategory, hiddenCategories,\n      resetCategories, resetText,\n    } = props;\n\n    const labels = categories.map(category => {\n      const isHidden = !!hiddenCategories.find(id => id === category.id);\n      const isIsolated = hiddenCategories.length === categories.length - 1 && !isHidden;\n      return (\n        <Label\n          key={'sector-label-' + category.id}\n          category={category}\n          toggleCategory={() => toggleCategory(category.id)}\n          isolateCategory={() => isolateCategory(category.id)}\n          isHidden={isHidden}\n          isIsolated={isIsolated}\n        />\n      );\n    });\n\n    const resetButton = hiddenCategories.length ? (\n      <ResetLabelsButtonContainer>\n        <ResetLabelsButton onClick={resetCategories}>\n          <ReloadIcon dangerouslySetInnerHTML={{__html: ReloadImgSrc}} /> {resetText}\n        </ResetLabelsButton>\n      </ResetLabelsButtonContainer>\n    ) : null;\n\n    output = (\n      <>\n        {labels}\n        {resetButton}\n      </>\n    );\n  } else {\n    const labels = categories.map(category => (\n      <Label\n        key={'sector-label-' + category.id}\n        category={category}\n        isHidden={false}\n        isIsolated={false}\n      />\n    ));\n\n    output = (\n      <>\n        {labels}\n      </>\n    );\n  }\n\n  const Root = fullWidth ? FullWidthRoot : StandardRoot;\n  const Content = fullWidth ? FullWidthContent : StandardContent;\n\n  return (\n    <Root>\n      <Content className={!props.allowToggle ? joyrideClassNames.colorLegendNoFilter : joyrideClassNames.colorLegend}>\n        {output}\n      </Content>\n    </Root>\n  );\n};\n\nexport default CategoryLabels;\n","import useFluent from './useFluent';\nimport {\n  sectorColorMap,\n} from '../styling/styleUtils';\n\nexport default () => {\n  const getString = useFluent();\n  return sectorColorMap.map(({id, color}) => ({id, color, name: getString('global-naics-sector-name-' + id)}));\n};","import useFluent from './useFluent';\nimport {\n  clusterColorMap,\n} from '../styling/styleUtils';\n\nexport default () => {\n  const getString = useFluent();\n  return clusterColorMap.map(({id, color}) => ({id, color, name: getString('global-cluster-c1-name-' + id)}));\n};","import React, {useEffect, useState} from 'react';\nimport {\n  useEconomicCompositionQuery,\n} from '../../../../../components/dataViz/treeMap/CompositionTreeMap';\nimport {\n  useClusterCompositionQuery,\n} from '../../../../../components/dataViz/treeMap/ClusterCompositionTreeMap';\nimport LoadingBlock from '../../../../../components/transitionStateComponents/VizLoadingBlock';\nimport {transformData, Inputs} from 'react-canvas-treemap';\nimport {\n  useGlobalIndustryMap,\n} from '../../../../../hooks/useGlobalIndustriesData';\nimport {\n  useGlobalClusterMap,\n} from '../../../../../hooks/useGlobalClusterData';\nimport {\n  DigitLevel,\n  CompositionType,\n} from '../../../../../types/graphQL/graphQLTypes';\nimport {\n  sectorColorMap,\n  clusterColorMap,\n  FullPageOverlay,\n  educationColorRange,\n  wageColorRange,\n} from '../../../../../styling/styleUtils';\nimport html2canvas from 'html2canvas';\nimport {\n  AggregationMode,\n  ColorBy,\n  ClusterLevel,\n} from '../../../../../routing/routes';\nimport {scaleLinear} from 'd3-scale';\nimport {defaultYear} from '../../../../../Utils';\nimport {\n  useAggregateIndustryMap,\n} from '../../../../../hooks/useAggregateIndustriesData';\n\ninterface Props {\n  cityId: number;\n  cityName: string | undefined;\n  year: number;\n  onClose: () => void;\n  compositionType: CompositionType;\n  aggregationMode: AggregationMode;\n  hiddenSectors: string[];\n  hiddenClusters: string[];\n  digitLevel: DigitLevel;\n  clusterLevel: ClusterLevel;\n  colorBy: ColorBy;\n  treeMapCellsNode: HTMLDivElement;\n}\n\nexport default (props: Props) => {\n  const {\n    cityId, year, onClose, compositionType, hiddenSectors, digitLevel, treeMapCellsNode,\n    cityName, hiddenClusters, aggregationMode, clusterLevel, colorBy,\n  } = props;\n\n  const industryResponse = useEconomicCompositionQuery({cityId, year});\n  const clusterResponse = useClusterCompositionQuery({cityId, year});\n  const industryMap = useGlobalIndustryMap();\n  const clusterMap = useGlobalClusterMap();\n  const aggregateIndustryDataMap = useAggregateIndustryMap({\n    level: digitLevel, year: defaultYear, clusterLevel: parseInt(clusterLevel, 10)});\n  const [effectRan, setEffectRan] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (industryResponse.data !== undefined && !industryMap.loading && !industryMap.error &&\n        clusterResponse.data !== undefined && !clusterMap.loading && !clusterMap.error &&\n        aggregateIndustryDataMap.loading !== true && !aggregateIndustryDataMap.error &&\n        aggregateIndustryDataMap.data !== undefined && !effectRan\n      ) {\n      setEffectRan(true);\n      const boundingRect = treeMapCellsNode.getBoundingClientRect();\n      const width = boundingRect.width * 2;\n      const height = boundingRect.height * 2;\n      const treeMapData: Inputs['data'] = [];\n      let colorScale: (val: number) => string | undefined;\n      let colorMap: {id: string, color: string}[];\n      if (aggregationMode === AggregationMode.cluster) {\n        const {clusters} = clusterResponse.data;\n        colorMap = clusterColorMap;\n        if (colorBy === ColorBy.education && aggregateIndustryDataMap.data !== undefined) {\n          colorScale = scaleLinear()\n                        .domain([\n                          aggregateIndustryDataMap.data.clusterMinMax.minYearsEducation,\n                          aggregateIndustryDataMap.data.clusterMinMax.medianYearsEducation,\n                          aggregateIndustryDataMap.data.clusterMinMax.maxYearsEducation,\n                        ])\n                        .range(educationColorRange as any) as any;\n        } else if (colorBy === ColorBy.wage && aggregateIndustryDataMap.data !== undefined) {\n          colorScale = scaleLinear()\n                        .domain([\n                          aggregateIndustryDataMap.data.clusterMinMax.minHourlyWage,\n                          aggregateIndustryDataMap.data.clusterMinMax.medianHourlyWage,\n                          aggregateIndustryDataMap.data.clusterMinMax.maxHourlyWage,\n                        ])\n                        .range(wageColorRange as any) as any;\n        } else {\n          colorScale = () => undefined;\n        }\n        clusters.forEach(({clusterId, numCompany, numEmploy}) => {\n          const cluster = clusterMap.data[clusterId];\n          if (cluster && cluster.level !== null && cluster.level.toString() === clusterLevel) {\n            const {name, clusterIdTopParent} = cluster;\n            if (!hiddenClusters.includes((clusterIdTopParent as number).toString())) {\n              const companies = numCompany ? numCompany : 0;\n              const employees = numEmploy ? numEmploy : 0;\n              let fill: string | undefined;\n              const clusterIndustryDatum = aggregateIndustryDataMap.data.clusters[clusterId];\n              if (colorBy === ColorBy.education && aggregateIndustryDataMap.data !== undefined) {\n                if (clusterIndustryDatum) {\n                  fill = colorScale(clusterIndustryDatum.yearsEducationRank) as string;\n                } else {\n                  fill = 'gray';\n                }\n              } else if (colorBy === ColorBy.wage && aggregateIndustryDataMap.data !== undefined) {\n                if (clusterIndustryDatum) {\n                  fill = colorScale(clusterIndustryDatum.hourlyWageRank) as string;\n                } else {\n                  fill = 'gray';\n                }\n              } else {\n                fill = undefined;\n              }\n              treeMapData.push({\n                id: clusterId,\n                value: compositionType === CompositionType.Companies ? companies : employees,\n                title: name ? name : '',\n                fill,\n                topLevelParentId: (clusterIdTopParent as number).toString(),\n              });\n            }\n          }\n        });\n      } else {\n        const {industries} = industryResponse.data;\n        colorMap = sectorColorMap;\n        if (colorBy === ColorBy.education && aggregateIndustryDataMap.data !== undefined) {\n          colorScale = scaleLinear()\n                        .domain([\n                          aggregateIndustryDataMap.data.globalMinMax.minYearsEducation,\n                          aggregateIndustryDataMap.data.globalMinMax.medianYearsEducation,\n                          aggregateIndustryDataMap.data.globalMinMax.maxYearsEducation,\n                        ])\n                        .range(educationColorRange as any) as any;\n        } else if (colorBy === ColorBy.wage && aggregateIndustryDataMap.data !== undefined) {\n          colorScale = scaleLinear()\n                        .domain([\n                          aggregateIndustryDataMap.data.globalMinMax.minHourlyWage,\n                          aggregateIndustryDataMap.data.globalMinMax.medianHourlyWage,\n                          aggregateIndustryDataMap.data.globalMinMax.maxHourlyWage,\n                        ])\n                        .range(wageColorRange as any) as any;\n        } else {\n          colorScale = () => undefined;\n        }\n        industries.forEach(({naicsId, numCompany, numEmploy}) => {\n          const industry = industryMap.data[naicsId];\n          if (industry && industry.level === digitLevel) {\n            const {name, naicsIdTopParent} = industry;\n            if (!hiddenSectors.includes(naicsIdTopParent.toString())) {\n              const companies = numCompany ? numCompany : 0;\n              const employees = numEmploy ? numEmploy : 0;\n              let fill: string | undefined;\n              if ((colorBy === ColorBy.education|| colorBy === ColorBy.wage) && aggregateIndustryDataMap.data) {\n                const target = aggregateIndustryDataMap.data.industries[naicsId];\n                const targetValue = colorBy === ColorBy.education ? target.yearsEducationRank : target.hourlyWageRank;\n                fill = colorScale(targetValue);\n              }\n              treeMapData.push({\n                id: naicsId,\n                value: compositionType === CompositionType.Companies ? companies : employees,\n                title: name ? name : '',\n                fill,\n                topLevelParentId: naicsIdTopParent.toString(),\n              });\n            }\n          }\n        });\n      }\n      const transformed = transformData({\n        data: treeMapData,\n        width,\n        height,\n        colorMap,\n      });\n      const canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      const context = canvas.getContext('2d');\n      if (context) {\n        transformed.treeMapCells.forEach(cell => {\n          context.beginPath();\n          context.rect(cell.x0, cell.y0, cell.x1, cell.y1);\n          context.fillStyle = cell.color;\n          context.fill();\n          context.strokeStyle = '#fff';\n          context.stroke();\n        });\n        html2canvas(treeMapCellsNode, {allowTaint: true, backgroundColor: 'rgba(0,0,0,0)'})\n          .then(cellLabels => {\n            context.drawImage(cellLabels, 0, 0, width, height);\n            const link = document.createElement('a');\n            link.download = cityName\n              ? `${cityName} - Economic Composition of Number of ${compositionType} in ${year}.png`\n              : 'treemap-visualization.png';\n            link.href = canvas.toDataURL('image/png');\n            link.click();\n            link.remove();\n            onClose();\n          })\n          .catch(e => {\n            console.error(e);\n            onClose();\n          });\n      } else {\n        console.error('Failed to get context for ' + canvas);\n        onClose();\n      }\n    }\n  }, [\n    aggregateIndustryDataMap,\n    aggregationMode,\n    industryResponse,\n    clusterResponse,\n    industryMap,\n    clusterMap,\n    onClose,\n    compositionType,\n    digitLevel,\n    clusterLevel,\n    hiddenSectors,\n    hiddenClusters,\n    treeMapCellsNode,\n    cityName,\n    year,\n    colorBy,\n    effectRan,\n  ]);\n\n  if (industryResponse.error) {\n    console.error(industryResponse.error);\n    onClose();\n  }\n\n  if (clusterResponse.error) {\n    console.error(clusterResponse.error);\n    onClose();\n  }\n\n  return (\n    <FullPageOverlay>\n      <LoadingBlock />\n    </FullPageOverlay>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport {breakPoints} from '../../../styling/GlobalGrid';\nimport {educationColorRange} from '../../../styling/styleUtils';\nimport useFluent from '../../../hooks/useFluent';\nimport {joyrideClassNames} from '../../navigation/secondaryHeader/guide/CitiesGuide';\n\nconst RootBase = styled.div`\n  grid-row: 3;\n\n  @media ${breakPoints.small} {\n    grid-row: 4;\n  }\n`;\n\nconst StandardRoot = styled(RootBase)`\n  grid-column: 1;\n\n  @media (max-width: 1200px) {\n    grid-column: 1 / -1;\n  }\n`;\n\nconst FullWidthRoot = styled(RootBase)`\n  grid-column: 1 / -1;\n`;\n\nconst Content = styled.div`\n  padding: 0.875rem 0;\n`;\n\nconst Bar = styled.div`\n  width: 100%;\n  height: 0.6rem;\n  background: linear-gradient(90deg, ${educationColorRange[0]} 0%, ${educationColorRange[1]} 50%, ${educationColorRange[2]} 100%);\n`;\n\nconst Labels = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-size: 0.75rem;\n  text-transform: uppercase;\n`;\n\ninterface Props {\n  fullWidth?: boolean;\n}\n\nconst IntensityLegend = (props: Props) => {\n  const {fullWidth} = props;\n  const Root = fullWidth ? FullWidthRoot : StandardRoot;\n  const getString = useFluent();\n\n  return (\n    <Root className={joyrideClassNames.colorLegendNoFilter}>\n      <Content>\n        <Labels>\n          <div>{getString('global-education-low')}</div>\n          <div>{getString('global-education-high')}</div>\n        </Labels>\n        <Bar />\n      </Content>\n    </Root>\n  );\n};\n\nexport default IntensityLegend;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport {breakPoints} from '../../../styling/GlobalGrid';\nimport {wageColorRange} from '../../../styling/styleUtils';\nimport useFluent from '../../../hooks/useFluent';\nimport {joyrideClassNames} from '../../navigation/secondaryHeader/guide/CitiesGuide';\n\nconst RootBase = styled.div`\n  grid-row: 3;\n\n  @media ${breakPoints.small} {\n    grid-row: 4;\n  }\n`;\n\nconst StandardRoot = styled(RootBase)`\n  grid-column: 1;\n\n  @media (max-width: 1200px) {\n    grid-column: 1 / -1;\n  }\n`;\n\nconst FullWidthRoot = styled(RootBase)`\n  grid-column: 1 / -1;\n`;\n\nconst Content = styled.div`\n  padding: 0.875rem 0;\n`;\n\nconst Bar = styled.div`\n  width: 100%;\n  height: 0.6rem;\n  background: linear-gradient(90deg, ${wageColorRange[0]} 0%, ${wageColorRange[1]} 50%, ${wageColorRange[2]} 100%);\n`;\n\nconst Labels = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-size: 0.75rem;\n  text-transform: uppercase;\n`;\n\ninterface Props {\n  fullWidth?: boolean;\n}\n\nconst IntensityLegend = (props: Props) => {\n  const {fullWidth} = props;\n  const Root = fullWidth ? FullWidthRoot : StandardRoot;\n  const getString = useFluent();\n\n  return (\n    <Root className={joyrideClassNames.colorLegendNoFilter}>\n      <Content>\n        <Labels>\n          <div>{getString('global-wages-low')}</div>\n          <div>{getString('global-wages-high')}</div>\n        </Labels>\n        <Bar />\n      </Content>\n    </Root>\n  );\n};\n\nexport default IntensityLegend;\n","import {\n  backgroundDark,\n  ButtonBase,\n} from '../../styling/styleUtils';\nimport styled from 'styled-components/macro';\nimport {breakPointValues} from '../../styling/GlobalGrid';\n\nexport const collapsedSizeMediaQueryValues = {\n  min: breakPointValues.width.small + 1,\n  max: 1280,\n};\n\nexport const collapsedSizeMediaQuery = `\n  screen and\n  (min-width: ${collapsedSizeMediaQueryValues.min}px) and\n  (max-width: ${collapsedSizeMediaQueryValues.max}px)\n`;\n\nexport const textClassName = 'expanding-button-responsive-text';\n\nexport const ExpandingButton = styled(ButtonBase)`\n  margin-right: 0.25rem;\n  position: relative;\n  font-size: 0.85rem;\n\n  @media ${collapsedSizeMediaQuery} {\n    background-color: ${backgroundDark};\n    border-radius: 4000px;\n    position: absolute;\n    left: 0;\n    border: solid 2px transparent;\n    display: flex;\n    justify-content: center;\n    outline: none;\n    font-size: 0.7rem;\n    padding: 0;\n\n    span {\n      margin: 0;\n      width: 1.3rem;\n      height: 1.3rem;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      svg {\n        padding: 0;\n        width: 0.75rem;\n        height: 0.75rem;\n        fill: #fff;\n      }\n    }\n\n    .${textClassName} {\n      white-space: nowrap;\n      opacity: 0;\n      width: 0;\n      /* max-width needed for safari */\n      max-width: 0;\n      transition: all 0.15s ease-in-out;\n      color: #fff;\n      border-top-right-radius: 4000px;\n      border-bottom-right-radius: 4000px;\n      background-color: ${backgroundDark};\n      display: flex;\n      align-items: center;\n      padding-left: 0;\n      pointer-events: none;\n      overflow: hidden;\n    }\n\n    &:hover {\n      box-shadow: 0px 0px 0px 1px #fff;\n      z-index: 100;\n\n      .${textClassName} {\n        opacity: 1;\n        width: 118px;\n        /* max-width needed for safari */\n        max-width: 118px;\n        padding-left: 0.15rem;\n      }\n    }\n  }\n`;\n","import React, {useState} from 'react';\nimport PanelSearch, {Datum as SearchDatum} from 'react-panel-search';\nimport useFluent from '../../../hooks/useFluent';\nimport styled, {keyframes} from 'styled-components/macro';\nimport {\n  textClassName,\n  ExpandingButton,\n  collapsedSizeMediaQuery,\n} from '../Utils';\nimport raw from 'raw.macro';\n\nconst readThisChartIconSVG = raw('../../../assets/icons/magnifying-glass.svg');\n\nconst Root = styled.div`\n  position: relative;\n  height: 100%;\n  display: flex;\n  align-items: center;\n`;\n\nconst jumpIn = keyframes`\n  0% {\n    transform: scale(0.92);\n  }\n\n  75% {\n    transform: scale(1.03);\n  }\n\n  90% {\n    transform: scale(0.95);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n`;\n\nconst DropdownContainer = styled.div`\n  position: absolute;\n  right: -0.7rem;\n  width: 200px;\n  z-index: 200;\n  transform: scale(0.92);\n  animation: ${jumpIn} 0.2s ease-in-out 1 forwards;\n\n  button.react-panel-search-search-bar-clear-button {\n    padding: 0.4rem 0.1rem;\n  }\n`;\n\nconst ToggleButton = styled(ExpandingButton)`\n  @media ${collapsedSizeMediaQuery} {\n    right: 0;\n    left: auto;\n    z-index: 10;\n\n    &:hover {\n      .${textClassName} {\n        width: 155px;\n        /* max-width needed for safari */\n        max-width: 155px;\n      }\n    }\n  }\n`;\n\nexport interface SearchInGraphOptions {\n  disallowSelectionLevels: (number | string)[] | undefined;\n  setHighlighted: (value: string | undefined) => void;\n  rerenderKey: string;\n  searchData: SearchDatum[];\n  defaultPlaceholderText: string;\n  topLevelTitle: string;\n}\n\nconst SearchIndustryInGraph = (props: SearchInGraphOptions) => {\n  const {\n    setHighlighted, rerenderKey, disallowSelectionLevels, searchData,\n    defaultPlaceholderText, topLevelTitle,\n  } = props;\n\n  const getString = useFluent();\n\n  const [isDropdownVisible, setIsDropdownVisible] = useState<boolean>();\n  const [internalSelectedValue, setInternalSelectedValue] = useState<SearchDatum | null>();\n\n  const onSelect = (d: SearchDatum | null) => {\n    if (d) {\n      setHighlighted(d.id as string);\n    } else {\n      setHighlighted(undefined);\n    }\n    setInternalSelectedValue(d);\n    if (d === null) {\n      setIsDropdownVisible(false);\n    }\n  };\n\n  const dropdown = isDropdownVisible ? (\n    <DropdownContainer>\n      <PanelSearch\n        key={'ButtonTogglePreChartPanelSearchKeyFor' + rerenderKey}\n        data={searchData}\n        topLevelTitle={topLevelTitle}\n        disallowSelectionLevels={disallowSelectionLevels}\n        defaultPlaceholderText={defaultPlaceholderText}\n        showCount={true}\n        resultsIdentation={1}\n        onSelect={onSelect}\n        maxResults={500}\n        onClose={() => !internalSelectedValue ? setIsDropdownVisible(false) : null}\n        focusOnRender={true}\n      />\n    </DropdownContainer>\n  ) : null;\n\n  return (\n    <Root>\n      <ToggleButton onClick={() => setIsDropdownVisible(true)}>\n        <span dangerouslySetInnerHTML={{__html: readThisChartIconSVG}} />\n        <div className={textClassName}>{getString('global-ui-search-an-industry-in-graph')}</div>\n      </ToggleButton>\n      {dropdown}\n    </Root>\n  );\n};\n\nexport default React.memo(SearchIndustryInGraph);\n","import React, {useState} from 'react';\nimport styled from 'styled-components/macro';\nimport {breakPoints} from '../../styling/GlobalGrid';\nimport {\n  backgroundDark,\n  ButtonBase,\n  primaryColor,\n  primaryColorLight,\n  baseColor,\n  lightBorderColor,\n} from '../../styling/styleUtils';\nimport useFluent from '../../hooks/useFluent';\nimport raw from 'raw.macro';\nimport SearchIndustryInGraph, {SearchInGraphOptions} from './searchIndustryInGraphDropdown';\nimport CurrentSettingsTooltip from '../dataViz/settings/CurrentSettingsTooltip';\nimport Settings, {SettingsOptions} from '../dataViz/settings';\nimport Tooltip, {TooltipTheme, TooltipPosition} from './Tooltip';\nimport {collapsedSizeMediaQuery} from './Utils';\nimport HowToRead from './howToRead';\nimport {joyrideClassNames} from '../navigation/secondaryHeader/guide/CitiesGuide';\n\nconst gearIcon = raw('../../assets/icons/settings.svg');\n\nconst Root = styled.div<{$hasIndicator: boolean}>`\n  display: contents;\n\n  @media ${collapsedSizeMediaQuery} {\n    grid-row: 1;\n    grid-column: 1 / 3;\n    display: ${({$hasIndicator}) => $hasIndicator ? 'contents' : 'flex'};\n    flex-direction: row-reverse;\n    justify-content: space-between;\n    position: relative;\n  }\n\n  @media ${breakPoints.small} {\n    grid-row: 2;\n    grid-column: 1;\n    display: block;\n  }\n`;\n\nconst RowBase = styled.div`\n  grid-column: 1;\n  padding: 0.75rem 0 0.25rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst LeftColumn = styled(RowBase)`\n  grid-row: 1;\n  font-size: 0.75rem;\n  font-size: clamp(0.75rem, 1.5vw, 1rem);\n  text-align: right;\n  font-size: 0.85rem;\n\n  @media ${collapsedSizeMediaQuery} {\n    flex-grow: 1;\n    position: relative;\n    padding-left: 2rem;\n  }\n`;\n\nconst IndicatorTooltipContainer = styled.span`\n  position: relative;\n  top: 0.2rem;\n`;\n\nconst RightColumn = styled(RowBase)`\n  grid-column: 2;\n`;\n\nconst IndicatorRoot = styled.div`\n  margin-left: auto;\n  display: flex;\n  align-items: center;\n`;\n\nconst SettingsButton = styled(ButtonBase)`\n  margin-left: auto;\n  height: 100%;\n  white-space: nowrap;\n`;\n\nconst NavButton = styled(ButtonBase)`\n  border: solid 1px ${backgroundDark};\n  flex-shrink: 1;\n  text-align: center;\n  margin-left: 0.5rem;\n  margin-left: clamp(0.5rem, 1vw, 2rem);\n  margin-top: 0.25rem;\n  margin-bottom: 0.25rem;\n\n  @media ${collapsedSizeMediaQuery} {\n    margin-left: 0;\n  }\n`;\n\nconst HighlightedNavButton = styled(NavButton)`\n  background-color: ${backgroundDark};\n  color: #fff;\n`;\n\nconst UnderlineNavButton = styled.button`\n  font-size: 0.7rem;\n  text-transform: uppercase;\n  font-weight: 600;\n  color: ${baseColor};\n  border-bottom: solid 4px transparent;\n  background-color: transparent;\n  position: relative;\n\n  &:after {\n    content: '';\n    display: block;\n    width: 100%;\n    height: 0;\n    border-bottom: solid 1px ${lightBorderColor};\n    position: absolute;\n    bottom: -4px;\n    left: 0;\n    right: 0;\n  }\n\n  &:hover {\n    border-bottom: solid 4px ${primaryColorLight};\n  }\n`;\nconst UnderlineHighlightedNavButton = styled(UnderlineNavButton)`\n  border-bottom: solid 4px ${primaryColor};\n\n  &:hover {\n    border-bottom: solid 4px ${primaryColor};\n  }\n`;\n\nconst NavButtonTooltip = styled.div`\n  position: absolute;\n  display: inline;\n  top: -0.1rem;\n  transform: translateX(0.5rem);\n`;\n\nconst ButtonNavContainer = styled.div`\n  margin: auto;\n  max-width: 100%;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n\n  @media ${breakPoints.small} {\n    margin-right: 0;\n    justify-content: flex-end;\n  }\n`;\n\nexport interface Indicator {\n  text: React.ReactNode;\n  tooltipContent?: React.ReactNode;\n}\n\nexport interface VizNavItem {\n  label: string;\n  active: boolean;\n  onClick: () => void;\n  tooltipContent?: React.ReactNode;\n}\n\nexport enum VizNavStyle {\n  Block = 'block',\n  Underline = 'underline',\n}\n\ninterface Props {\n  indicator?: Indicator;\n  searchInGraphOptions?: SearchInGraphOptions;\n  settingsOptions?: SettingsOptions;\n  vizNavigation?: VizNavItem[];\n  vizNavigationStyle?: VizNavStyle;\n}\n\nconst PreChartRow = (props: Props) => {\n  const {\n    indicator, searchInGraphOptions, settingsOptions, vizNavigation,\n    vizNavigationStyle,\n  } = props;\n\n  const [settingsOpen, setSettingsOpen] = useState<boolean>(false);\n\n  const getString = useFluent();\n\n  const indicatorTooltip = indicator && indicator.tooltipContent ? (\n    <IndicatorTooltipContainer>\n      <Tooltip\n        explanation={indicator.tooltipContent}\n      />\n    </IndicatorTooltipContainer>\n  ) : null;\n\n  const indicatorElm = indicator ? (\n    <IndicatorRoot>\n      <span>\n        {indicatorTooltip}\n        {indicator.text}\n      </span>\n    </IndicatorRoot>\n  ) : null;\n\n  const rightColumnStyle: React.CSSProperties | undefined = indicatorElm ? {\n  display: 'flex',\n  justifyContent: 'flex-end',\n  } : undefined;\n\n  const vizNavigationButtonElms = vizNavigation && vizNavigation.length ? vizNavigation.map(link => {\n    const Button = vizNavigationStyle === VizNavStyle.Underline\n      ? link.active ? UnderlineHighlightedNavButton : UnderlineNavButton\n      : link.active ? HighlightedNavButton : NavButton;\n    const tooltipContent = link.tooltipContent ? (\n      <IndicatorTooltipContainer>\n        <NavButtonTooltip>\n          <Tooltip\n            explanation={link.tooltipContent}\n          />\n        </NavButtonTooltip>\n      </IndicatorTooltipContainer>\n    ) : null;\n    return (\n      <div key={link.label}>\n        <Button\n          onClick={link.onClick}\n        >\n          {link.label}\n          {tooltipContent}\n        </Button>\n      </div>\n    );\n  }) : null;\n  const vizNavigationButtons = vizNavigation && vizNavigation.length ? (\n    <ButtonNavContainer className={joyrideClassNames.vizToggle}>{vizNavigationButtonElms}</ButtonNavContainer>\n  ) : null;\n\n  const searchInGraph = searchInGraphOptions ? (\n    <SearchIndustryInGraph {...searchInGraphOptions} />\n  ) : null;\n\n  const settingsButton = settingsOptions ? (\n    <Tooltip\n      explanation={!settingsOpen\n        ? <CurrentSettingsTooltip settingsOptions={settingsOptions} />\n        : null\n      }\n      theme={TooltipTheme.Dark}\n      tooltipPosition={TooltipPosition.Bottom}\n    >\n      <SettingsButton\n        onClick={() => setSettingsOpen(current => !current)}\n        className={joyrideClassNames.vizOptions}\n      >\n        <span dangerouslySetInnerHTML={{__html: gearIcon}} />\n        {getString('global-ui-settings')}\n      </SettingsButton>\n    </Tooltip>\n  ) : null;\n\n  const settingsPanel = settingsOpen ? (\n    <Settings\n      onClose={() => setSettingsOpen(false)}\n      settingsOptions={settingsOptions ? settingsOptions : {}}\n    />\n  ) : null;\n\n  return (\n    <>\n      <Root $hasIndicator={indicatorElm !== null}>\n        <RightColumn style={rightColumnStyle}>\n          {searchInGraph}\n          {settingsButton}\n        </RightColumn>\n        <LeftColumn>\n          <HowToRead\n          />\n          {vizNavigationButtons}\n          {indicatorElm}\n        </LeftColumn>\n      </Root>\n      {settingsPanel}\n    </>\n  );\n};\n\nexport default React.memo(PreChartRow);\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport useQueryParams from '../../../hooks/useQueryParams';\nimport useFluent from '../../../hooks/useFluent';\nimport {\n  DigitLevel,\n  defaultDigitLevel,\n  defaultCompositionType,\n} from '../../../types/graphQL/graphQLTypes';\nimport {\n  defaultClusterMode,\n  ColorBy,\n  CityColorBy,\n  defaultNodeSizing,\n  NodeSizing,\n  defaultCityNodeSizing,\n  defaultAggregationMode,\n} from '../../../routing/routes';\nimport {SettingsOptions} from './index';\nimport upperFirst from 'lodash/upperFirst';\n\nconst Root = styled.div`\n  text-align: center;\n`;\n\nconst Title = styled.div`\n  margin-bottom: 0.2rem;\n  font-size: 0.85rem;\n`;\n\nconst Segment = styled.div`\n  font-size: 0.7rem;\n  margin-top: 0.4rem;\n  display: flex;\n  flex-direction: column;\n  text-transform: capitalize;\n`;\n\nconst Subtitle = styled.em`\n  opacity: 0.55;\n  font-size: 0.65rem;\n`;\n\ninterface Props {\n  settingsOptions: SettingsOptions;\n}\n\nconst CurrentSettingsTooltip = (props: Props) => {\n  const {settingsOptions} = props;\n\n  const params = useQueryParams();\n  const getString = useFluent();\n\n  const compositionText = settingsOptions.compositionType !== undefined ? (\n    <Segment>\n      <Subtitle>{getString('global-ui-numbers-based-on')}</Subtitle>\n      <em>{params.composition_type ? params.composition_type : defaultCompositionType}</em>\n    </Segment>\n  ) : null;\n\n  const aggregationText = settingsOptions.aggregationMode !== undefined ? (\n    <Segment>\n      <Subtitle>{getString('global-ui-aggregation-mode')}</Subtitle>\n      <em>{upperFirst(params.aggregation ? params.aggregation : defaultAggregationMode)}</em>\n    </Segment>\n  ) : null;\n\n  const detailLevel = settingsOptions.digitLevel !== undefined ? (\n    <Segment>\n      <Subtitle>{getString('global-ui-detail-level')}</Subtitle>\n      <em>{params.digit_level ? params.digit_level : (\n        typeof settingsOptions.digitLevel === 'object' && settingsOptions.digitLevel.sixDigitOnlyMessage\n          ? DigitLevel.Six : defaultDigitLevel\n      )} {getString('global-ui-digit-level')}</em>\n    </Segment>\n  ) : null;\n\n  const clusterLevel = settingsOptions.clusterLevel !== undefined ? (\n    <Segment>\n      <Subtitle>{getString('global-ui-cluster-level')}</Subtitle>\n      <em>\n        {getString('global-ui-cluster-aggregation-level', {\n          cluster: 'cluster_' + params.cluster_overlay ? params.cluster_overlay : defaultDigitLevel,\n        })}\n      </em>\n    </Segment>\n  ) : null;\n\n  const hideClusters = settingsOptions.clusterOverlayMode !== undefined ? (\n    <Segment>\n      <Subtitle>{getString('global-ui-show-clusters')}</Subtitle>\n      <em>{params.cluster_overlay ? params.cluster_overlay : defaultClusterMode}</em>\n    </Segment>\n  ) : null;\n\n  let nodeSizingValue: NodeSizing | undefined;\n  if (typeof settingsOptions.nodeSizing !== 'object' && params.node_sizing === NodeSizing.rca) {\n    nodeSizingValue = defaultNodeSizing;\n  } else if (typeof settingsOptions.nodeSizing === 'object' && settingsOptions.nodeSizing.rca &&\n      !params.node_sizing) {\n    nodeSizingValue = NodeSizing.rca;\n  } else {\n    nodeSizingValue = !params.node_sizing ? defaultNodeSizing : params.node_sizing;\n  }\n  const sizeBy = settingsOptions.nodeSizing !== undefined ? (\n    <Segment>\n      <Subtitle>{getString('global-ui-node-sizing')}</Subtitle>\n      <em>\n        {getString('global-formatted-size-by', {type: nodeSizingValue})}\n      </em>\n    </Segment>\n  ) : null;\n\n  const defaultColorByText = settingsOptions.clusterLevel !== undefined ? 'Cluster' : ColorBy.sector;\n  const colorBy = settingsOptions.colorBy !== undefined ? (\n    <Segment>\n      <Subtitle>{\n        typeof settingsOptions.colorBy === 'object' && settingsOptions.colorBy.nodes\n          ? getString('global-ui-node-color-by') : getString('global-ui-color-by')\n      }</Subtitle>\n      <em>{params.color_by ? params.color_by : defaultColorByText}</em>\n    </Segment>\n  ) : null;\n\n  const citySizeBy = settingsOptions.cityNodeSizing !== undefined ? (\n    <Segment>\n      <Subtitle>{getString('global-ui-node-sizing')}</Subtitle>\n      <em>\n        {getString('global-formatted-size-by', {type:\n          params.city_node_sizing ? params.city_node_sizing : defaultCityNodeSizing})}\n      </em>\n    </Segment>\n  ) : null;\n\n  const cityColorBy = settingsOptions.cityColorBy !== undefined ? (\n    <Segment>\n      <Subtitle>{getString('global-ui-node-color-by')}</Subtitle>\n      <em>{upperFirst(params.city_color_by ? params.city_color_by : CityColorBy.proximity)}</em>\n    </Segment>\n  ) : null;\n\n  const rcaThreshold = settingsOptions.rcaThreshold !== undefined ? (\n    <Segment>\n      <Subtitle>RCA Threshold</Subtitle>\n      <em>{params.rca_threshold !== undefined ? params.rca_threshold : 1}</em>\n    </Segment>\n  ) : null;\n\n  return (\n    <Root>\n      <Title>{getString('global-ui-change-settings')}</Title>\n      <Segment>\n        <em>{getString('global-ui-current-settings')}</em>\n      </Segment>\n      {compositionText}\n      {aggregationText}\n      {detailLevel}\n      {clusterLevel}\n      {hideClusters}\n      {sizeBy}\n      {colorBy}\n      {rcaThreshold}\n      {cityColorBy}\n      {citySizeBy}\n    </Root>\n  );\n};\n\nexport default CurrentSettingsTooltip;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport ReactSlider from 'react-slider';\nimport {\n  primaryColor,\n  backgroundDark,\n  backgroundMedium,\n} from '../../../styling/styleUtils';\nimport {scaleLog} from 'd3-scale';\n\nconst slideRootClassName = 'react-slider-root-class';\nconst slideThumbClassName = 'react-slider-thumb-class';\nconst slideTrackClassName = 'react-slider-track-class';\n\nconst Root = styled.div`\n  width: 100%;\n  margin: 0.875rem 0 2rem;\n`;\nconst SliderContainer = styled.div`\n  width: 100%;\n  box-sizing: border-box;\n  padding: 0 1rem 0 2rem;\n  flex-shrink: 0;\n  margin: 0rem auto 1.15rem;\n  position: relative;\n\n  .${slideThumbClassName} {\n    background-color: ${primaryColor};\n    height: 1rem;\n    width: 1rem;\n    border-radius: 1000px;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    outline: none;\n\n    span {\n      color: ${primaryColor};\n      transform: translateY(-125%);\n      white-space: nowrap;\n    }\n  }\n  .${slideThumbClassName}-0 {\n    transform: translateX(-0.1rem);\n  }\n  .${slideTrackClassName} {\n    margin-top: 0.25rem;\n  }\n  .${slideTrackClassName}-0 {\n    background-color: ${backgroundMedium};\n    height: 0.5rem;\n  }\n  .${slideTrackClassName}-1 {\n    background-color: ${backgroundDark};\n    height: 0.5rem;\n  }\n  .${slideTrackClassName}-2 {\n    background-color: ${backgroundMedium};\n    height: 0.5rem;\n  }\n`;\n\n// 0.0001\n// 0.001\n// 0.01\n// 0.1\n// 1\n// 10\n// 100\n// 1000\n\n\ninterface Props {\n  updateValue: (val: number) => void;\n  initialValue: number;\n}\n\ninterface ThumbState {\n  index: number;\n  value: number | number[];\n  valueNow: number;\n}\n\nconst RCAThresholdSlider = ({updateValue, initialValue}: Props) => {\n  const logScale = scaleLog().domain([0.001, 100]).range([1, 120]);\n\n  const logScaleWithZero = (value: number) => value ? logScale(value) : 0;\n  const convertValue = (value: number) => {\n    const logValue = value ? logScale.invert(value) : 0;\n    let decimalPlaces = 0;\n    if (logValue < 0.0001) {\n      decimalPlaces = 6;\n    } else if (logValue < 0.001) {\n      decimalPlaces = 5;\n    } else if (logValue < 0.01) {\n      decimalPlaces = 4;\n    } else if (logValue < 0.1) {\n      decimalPlaces = 3;\n    } else if (logValue < 0.9) {\n      decimalPlaces = 2;\n    }  else if (logValue < 10 && logValue > 1.15) {\n      decimalPlaces = 1;\n    } else {\n      decimalPlaces = 0;\n    }\n    return value ? parseFloat(logValue.toFixed(decimalPlaces)) : 0;\n  };\n\n  const thumbRender = (p: React.HTMLProps<HTMLDivElement>, state: ThumbState) => (\n    <small {...p}><span>Presence Value {'≥'} {convertValue(state.valueNow)}</span></small>\n  );\n\n  return (\n    <Root>\n      <SliderContainer>\n        <ReactSlider\n          className={slideRootClassName}\n          thumbClassName={slideThumbClassName}\n          trackClassName={slideTrackClassName}\n          defaultValue={isNaN(initialValue) ? logScaleWithZero(1) : logScaleWithZero(initialValue)}\n          renderThumb={thumbRender}\n          max={120}\n          min={0}\n          onAfterChange={(v: number) => updateValue(convertValue(v))}\n        />\n      </SliderContainer>\n    </Root>\n  );\n};\n\nexport default RCAThresholdSlider;","import React from 'react';\nimport styled, {keyframes} from 'styled-components/macro';\nimport {\n  useHistory,\n} from 'react-router-dom';\nimport queryString from 'query-string';\nimport useQueryParams from '../../../hooks/useQueryParams';\nimport useFluent from '../../../hooks/useFluent';\nimport {\n  secondaryFont,\n  backgroundDark,\n  primaryColorLight,\n  BlockButton,\n  BlockButtonHighlighted,\n  baseColor,\n} from '../../../styling/styleUtils';\nimport {\n  CompositionType,\n  defaultDigitLevel,\n  defaultCompositionType,\n  DigitLevel,\n} from '../../../types/graphQL/graphQLTypes';\nimport {breakPoints} from '../../../styling/GlobalGrid';\nimport {\n  ClusterMode,\n  defaultClusterMode,\n  NodeSizing,\n  defaultNodeSizing,\n  ColorBy,\n  ClusterLevel,\n  defaultClusterLevel,\n  CityNodeSizing,\n  CityColorBy,\n  defaultCityNodeSizing,\n  defaultAggregationMode,\n  AggregationMode,\n} from '../../../routing/routes';\nimport raw from 'raw.macro';\nimport Tooltip, {TooltipTheme} from '../../general/Tooltip';\nimport upperFirst from 'lodash/upperFirst';\nimport RCAThresholdSlider from './RCAThresholdSlider';\nimport googleAnalyticsEvent from '../../analytics/googleAnalyticsEvent';\n\nconst gearIcon = raw('../../../assets/icons/settings.svg');\n\nconst slideIn = keyframes`\n  0% {\n    transform: translate(100%, 0);\n  }\n\n  75% {\n    transform: translate(-8%, 0);\n  }\n\n  90% {\n    transform: translate(5, 0);\n  }\n\n  100% {\n    transform: translate(0, 0);\n  }\n`;\n\nconst Root = styled.div`\n  grid-column: 2;\n  grid-row: 2;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  background-color: #fff;\n  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.15);\n  transform: translate(100%, 0);\n  animation: ${slideIn} 0.4s ease-in-out 1 forwards;\n  z-index: 100;\n\n  @media ${breakPoints.small} {\n    grid-row: 1;\n    grid-column: 1;\n    height: auto;\n  }\n`;\n\nconst ContentRoot = styled.div`\n  width: 100%;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  overflow: auto;\n  ::-webkit-scrollbar {\n    -webkit-appearance: none;\n    width: 7px;\n  }\n  ::-webkit-scrollbar-thumb {\n    border-radius: 4px;\n    background-color: rgba(0, 0, 0, .3);\n  }\n  ::-webkit-scrollbar-track {\n    background-color: rgba(0, 0, 0, .1);\n  }\n\n  @media ${breakPoints.small} {\n    position: static;\n    overflow: visible;\n  }\n\n  @media ${breakPoints.small} {\n    position: relative;\n  }\n`;\n\n\nconst Title = styled.h1`\n  margin: 0;\n  padding: 0.5rem 0.8rem;\n  border-bottom: solid 1px ${backgroundDark};\n  background-color: ${primaryColorLight};\n  font-family: ${secondaryFont};\n  font-size: 1rem;\n  text-transform: uppercase;\n  font-weight: 400;\n  display: flex;\n  align-items: center;\n  position: sticky;\n  top: 0;\n  z-index: 5;\n\n  span {\n    width: 1rem;\n    height: 1rem;\n    display: inline-block;\n    line-height: 0;\n    margin-right: 0.25rem;\n\n    svg {\n      width: 100%;\n      height: 100%;\n      fill: ${backgroundDark};\n    }\n  }\n`;\n\nconst CloseButton = styled.button`\n  margin-left: auto;\n  padding: 0 0 0 1rem;\n  border: none;\n  background-color: transparent;\n  font-size: 1.25rem;\n  font-weight: 400;\n  font-family: ${secondaryFont};\n  transform: translate(0, -1px);\n`;\n\nconst Content = styled.div`\n  padding: 1rem 0.4rem;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst SettingGrid = styled.div`\n  display: grid;\n  grid-template-columns: auto 1fr;\n  grid-template-rows: auto auto;\n  grid-row-gap: 0.5rem;\n  align-items: center;\n  margin-bottom: 1rem;\n`;\n\nconst SettingsInputContainer = styled.div`\n  grid-column: 2;\n  grid-row: 2;\n`;\n\nconst DisabledSettingsInputContainer = styled(SettingsInputContainer)`\n  opacity: 0.5;\n  pointer-events: none;\n`;\n\nconst CompostionButtonBase = styled(BlockButton)`\n  text-transform: capitalize;\n\n  &.disabled-option {\n    opacity: 0.5;\n    cursor: default;\n    &:hover {\n      color: ${baseColor};\n      background-color: transparent;\n    }\n  }\n`;\nconst CompostionButtonHighlight = styled(BlockButtonHighlighted)`\n  text-transform: capitalize;\n\n  &.disabled-option {\n    opacity: 0.5;\n    cursor: default;\n    &:hover {\n      color: ${baseColor};\n      background-color: transparent;\n    }\n  }\n`;\n\nconst Label = styled.label`\n  font-size: 1rem;\n  display: block;\n  grid-column: 2;\n  grid-row: 1;\n\n  @media ${breakPoints.medium} {\n    font-size: 0.75rem;\n  }\n`;\n\nconst DisabledLabel = styled(Label)`\n  opacity: 0.5;\n`;\n\nconst DigitLevelButton = styled.button<{$selected: boolean}>`\n  font-size: 0.85rem;\n  width: 100%;\n  text-transform: none;\n  display: block;\n  background-color: transparent;\n  padding: 0.45rem 0;\n  display: flex;\n  position: relative;\n  margin: 0;\n\n  &:hover:not(.disabled-option) {\n    &:before {\n      background-color: ${backgroundDark};\n    }\n  }\n  &.disabled-option {\n    opacity: 0.5;\n    cursor: default;\n  }\n\n  &:focus, &:active {\n    color: ${backgroundDark};\n  }\n\n  &:before {\n    flex-shrink: 0;\n    content: '';\n    display: block;\n    width: 0.85rem;\n    height: 0.85rem;\n    border: solid 1px ${backgroundDark};\n    border-radius: 2000px;\n    background-color: ${({$selected}) => $selected ? backgroundDark : '#fff'};\n    margin-right: 0.75rem;\n    transition: all 0.1s ease-in-out;\n    position: relative;\n    z-index: 2;\n  }\n\n  &:after {\n    flex-shrink: 0;\n    content: '';\n    width: 0.5rem;\n    border-right: solid 1px ${backgroundDark};\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n  }\n\n  &:first-child:after {\n    top: 0.7rem;\n  }\n\n  &:last-child {\n    align-items: flex-end;\n    &:after {\n      bottom: 0.7rem;\n    }\n  }\n\n  @media ${breakPoints.medium} {\n    font-size: 0.75rem;\n  }\n`;\n\nconst DigitLevelSoloButton = styled(DigitLevelButton)`\n   &:after {\n     display: none;\n   }\n`;\n\nconst ResetButton = styled(BlockButton)`\n  margin: 1rem auto;\n`;\n\nexport interface SettingsOptions {\n  digitLevel?: boolean | {\n    sixDigitOnlyMessage?: string;\n    defaultDigitLevel?: DigitLevel;\n  };\n  compositionType?: boolean | {\n    disabledOptions?: CompositionType[];\n  };\n  clusterOverlayMode?: boolean;\n  nodeSizing?: boolean | {\n    rca: boolean;\n  };\n  colorBy?: boolean | {\n    nodes: boolean,\n  };\n  clusterLevel?: boolean | {\n    disabledOptions?: ClusterLevel[];\n  };\n  cityNodeSizing?: boolean;\n  cityColorBy?: boolean;\n  aggregationMode?: boolean;\n  rcaThreshold?: boolean;\n}\n\ninterface Props {\n  onClose: () => void;\n  settingsOptions: SettingsOptions;\n}\n\nconst Settings = (props: Props) => {\n  const {\n    onClose, settingsOptions,\n  } = props;\n  const history = useHistory();\n  const params = useQueryParams();\n  const getString = useFluent();\n\n  const updateSetting = (param: string, value: string | number) => {\n    const query = queryString.stringify({...params, [param]: value});\n    const newUrl = query ? history.location.pathname + '?' + query : history.location.pathname;\n    googleAnalyticsEvent('Viz Options', param, `${value}`);\n    history.push(newUrl);\n  };\n\n  const resetSettings = () => {\n    const {\n      digit_level: _unusedDigitLevel,\n      cluster_level: _unusedClusterLevel,\n      composition_type: _unusedCompositionType,\n      cluster_overlay: _unusedHideClusters,\n      node_sizing: _unusedNodeSizing,\n      color_by: _unusedColorBy,\n      city_color_by: _unusedCityColorBy,\n      city_node_sizing: _unusedCitySizeBy,\n      aggregation: _unusedAggregation,\n      rca_threshold: _rcaThreshold,\n      ...rest\n    } = params;\n    const query = queryString.stringify({...rest});\n    const newUrl = query ? history.location.pathname + '?' + query : history.location.pathname;\n    history.push(newUrl);\n  };\n\n  let compositionOptions: React.ReactElement<any> | null;\n  if (settingsOptions.compositionType !== undefined) {\n    const CompanyButton = (!params.composition_type && defaultCompositionType === CompositionType.Companies) ||\n                          (params.composition_type === CompositionType.Companies)\n                          ? CompostionButtonHighlight : CompostionButtonBase;\n\n    const EmployeeButton = (!params.composition_type && defaultCompositionType === CompositionType.Employees) ||\n                          (params.composition_type === CompositionType.Employees)\n                          ? CompostionButtonHighlight : CompostionButtonBase;\n    const InputContainer = settingsOptions.compositionType !== false\n      ? SettingsInputContainer : DisabledSettingsInputContainer;\n    const LabelContainer = settingsOptions.compositionType !== false ? Label : DisabledLabel;\n    const tooltipText = settingsOptions.compositionType !== false\n      ? getString('glossary-composition') : getString('glossary-composition-disabled');\n    const disabledOptions = typeof settingsOptions.compositionType === 'object' &&\n      settingsOptions.compositionType.disabledOptions ? settingsOptions.compositionType.disabledOptions : [];\n    compositionOptions = (\n      <SettingGrid>\n        <Tooltip\n          explanation={tooltipText}\n        />\n        <LabelContainer>{getString('global-ui-numbers-based-on')}</LabelContainer>\n        <InputContainer>\n          <EmployeeButton\n            onClick={disabledOptions.includes(CompositionType.Employees)\n              ? undefined : () => updateSetting('composition_type', CompositionType.Employees)}\n            className={disabledOptions.includes(CompositionType.Employees) ? 'disabled-option' : undefined}\n          >\n            <Tooltip\n              explanation={disabledOptions.includes(CompositionType.Employees)\n                ? getString('global-ui-settings-option-na')\n                : null\n              }\n              theme={TooltipTheme.Dark}\n              cursor={disabledOptions.includes(CompositionType.Employees) ? 'default' : 'pointer'}\n            >\n              {CompositionType.Employees}\n            </Tooltip>\n          </EmployeeButton>\n          <CompanyButton\n            onClick={disabledOptions.includes(CompositionType.Companies)\n              ? undefined : () => updateSetting('composition_type', CompositionType.Companies)}\n            className={disabledOptions.includes(CompositionType.Companies) ? 'disabled-option' : undefined}\n          >\n            <Tooltip\n              explanation={disabledOptions.includes(CompositionType.Companies)\n                ? getString('global-ui-settings-option-na')\n                : null\n              }\n              theme={TooltipTheme.Dark}\n              cursor={disabledOptions.includes(CompositionType.Companies) ? 'default' : 'pointer'}\n            >\n              {CompositionType.Companies}\n            </Tooltip>\n          </CompanyButton>\n        </InputContainer>\n      </SettingGrid>\n    );\n  } else {\n    compositionOptions = null;\n  }\n\n  let aggregationMode: React.ReactElement<any> | null;\n  if (settingsOptions.aggregationMode !== undefined) {\n    const ClusterButton = (!params.aggregation && defaultAggregationMode === AggregationMode.cluster) ||\n      (params.aggregation === AggregationMode.cluster)\n        ? CompostionButtonHighlight : CompostionButtonBase;\n    const NaicButton = (!params.aggregation && defaultAggregationMode === AggregationMode.industries) ||\n      (params.aggregation === AggregationMode.industries)\n      ? CompostionButtonHighlight : CompostionButtonBase;\n    const InputContainer = settingsOptions.aggregationMode === true\n      ? SettingsInputContainer : DisabledSettingsInputContainer;\n    const LabelContainer = settingsOptions.aggregationMode === true ? Label : DisabledLabel;\n    aggregationMode = (\n      <SettingGrid>\n        <Tooltip\n          explanation={getString('glossary-cluster-vs-naics')}\n        />\n        <LabelContainer>{getString('global-ui-aggregation-mode')}</LabelContainer>\n        <InputContainer>\n          <NaicButton\n            onClick={() => updateSetting('aggregation', AggregationMode.industries)}\n          >\n            {getString('global-text-industry-groups')}\n          </NaicButton>\n          <ClusterButton\n            onClick={() => updateSetting('aggregation', AggregationMode.cluster)}\n          >\n            {getString('global-ui-skill-clusters')}\n          </ClusterButton>\n        </InputContainer>\n      </SettingGrid>\n    );\n  } else {\n    aggregationMode = null;\n  }\n\n  let digitLevelOptions: React.ReactElement<any> | null;\n  if (settingsOptions.digitLevel !== undefined) {\n    const InputContainer = settingsOptions.digitLevel !== false\n      ? SettingsInputContainer : DisabledSettingsInputContainer;\n    const LabelContainer = settingsOptions.digitLevel !== false ? Label : DisabledLabel;\n    const tooltipText = settingsOptions.digitLevel !== false\n      ? getString('glossary-digit-level') : getString('glossary-digit-level-disabled');\n    const sixDigitOnlyMessage = typeof settingsOptions.digitLevel === 'object' &&\n      settingsOptions.digitLevel.sixDigitOnlyMessage ? settingsOptions.digitLevel.sixDigitOnlyMessage : '';\n    const defaultValue = typeof settingsOptions.digitLevel === 'object' && settingsOptions.digitLevel.defaultDigitLevel\n      ? settingsOptions.digitLevel.defaultDigitLevel : defaultDigitLevel;\n    digitLevelOptions = sixDigitOnlyMessage ? (\n      <SettingGrid>\n        <Tooltip\n          explanation={tooltipText}\n        />\n        <LabelContainer>{getString('global-ui-detail-level')}</LabelContainer>\n        <InputContainer>\n          <DigitLevelSoloButton\n            $selected={true}\n          >\n            {DigitLevel.Six}-{getString('global-ui-digit-level')}\n          </DigitLevelSoloButton>\n          <small><em>{sixDigitOnlyMessage}</em></small>\n        </InputContainer>\n      </SettingGrid>\n    ) : (\n      <SettingGrid>\n        <Tooltip\n          explanation={tooltipText}\n        />\n        <LabelContainer>{getString('global-ui-detail-level')}</LabelContainer>\n        <InputContainer>\n          <DigitLevelButton\n            onClick={() => updateSetting('digit_level', DigitLevel.Sector)}\n            $selected={settingsOptions.digitLevel !== false && ((!params.digit_level && defaultValue === DigitLevel.Sector) ||\n                    (params.digit_level === DigitLevel.Sector.toString()))}\n          >\n            <span>{DigitLevel.Sector}-{getString('global-ui-digit-level')} / {getString('global-ui-sector-level')}</span>\n          </DigitLevelButton>\n          <DigitLevelButton\n            onClick={() => updateSetting('digit_level', DigitLevel.Two)}\n            $selected={settingsOptions.digitLevel !== false && ((!params.digit_level && defaultValue === DigitLevel.Two) ||\n                    (params.digit_level === DigitLevel.Two.toString()))}\n          >\n            <span>{DigitLevel.Two}-{getString('global-ui-digit-level')}</span>\n          </DigitLevelButton>\n          <DigitLevelButton\n            onClick={() => updateSetting('digit_level', DigitLevel.Three)}\n            $selected={settingsOptions.digitLevel !== false && ((!params.digit_level && defaultValue === DigitLevel.Three) ||\n                    (params.digit_level === DigitLevel.Three.toString()))}\n          >\n            <span>{DigitLevel.Three}-{getString('global-ui-digit-level')}</span>\n          </DigitLevelButton>\n          <DigitLevelButton\n            onClick={() => updateSetting('digit_level', DigitLevel.Four)}\n            $selected={settingsOptions.digitLevel !== false && ((!params.digit_level && defaultValue === DigitLevel.Four) ||\n                    (params.digit_level === DigitLevel.Four.toString()))}\n          >\n            <span>{DigitLevel.Four}-{getString('global-ui-digit-level')}</span>\n          </DigitLevelButton>\n          <DigitLevelButton\n            onClick={() => updateSetting('digit_level', DigitLevel.Five)}\n            $selected={settingsOptions.digitLevel !== false && ((!params.digit_level && defaultValue === DigitLevel.Five) ||\n                    (params.digit_level === DigitLevel.Five.toString()))}\n          >\n            <span>{DigitLevel.Five}-{getString('global-ui-digit-level')}</span>\n          </DigitLevelButton>\n          <DigitLevelButton\n            onClick={() => updateSetting('digit_level', DigitLevel.Six)}\n            $selected={settingsOptions.digitLevel !== false && ((!params.digit_level && defaultValue === DigitLevel.Six) ||\n                    (params.digit_level === DigitLevel.Six.toString()))}\n          >\n            <span>{DigitLevel.Six}-{getString('global-ui-digit-level')}</span>\n          </DigitLevelButton>\n        </InputContainer>\n      </SettingGrid>\n    );\n  } else {\n    digitLevelOptions = null;\n  }\n  let clusterLevelOptions: React.ReactElement<any> | null;\n  if (settingsOptions.clusterLevel !== undefined) {\n    const InputContainer = settingsOptions.clusterLevel !== false\n      ? SettingsInputContainer : DisabledSettingsInputContainer;\n    const LabelContainer = settingsOptions.clusterLevel !== false ? Label : DisabledLabel;\n    const tooltipText = settingsOptions.clusterLevel !== false\n      ? getString('glossary-cluster-level') : getString('glossary-cluster-level-disabled');\n    const disabledOptions = typeof settingsOptions.clusterLevel === 'object' &&\n      settingsOptions.clusterLevel.disabledOptions ? settingsOptions.clusterLevel.disabledOptions : [];\n    clusterLevelOptions = (\n      <SettingGrid>\n        <Tooltip\n          explanation={tooltipText}\n        />\n        <LabelContainer>{getString('global-ui-cluster-level')}</LabelContainer>\n        <InputContainer>\n          <DigitLevelButton\n            onClick={!disabledOptions.includes(ClusterLevel.C1) ?\n              () => updateSetting('cluster_level', ClusterLevel.C1) : undefined}\n            className={disabledOptions.includes(ClusterLevel.C1) ? 'disabled-option' : undefined}\n            $selected={settingsOptions.clusterLevel !== false && ((!params.cluster_level && defaultClusterLevel === ClusterLevel.C1) ||\n              params.cluster_level === ClusterLevel.C1)\n            }\n          >\n            <Tooltip\n              explanation={disabledOptions.includes(ClusterLevel.C1)\n                ? getString('global-ui-settings-option-na')\n                : null\n              }\n              theme={TooltipTheme.Dark}\n              cursor={disabledOptions.includes(ClusterLevel.C1) ? 'default' : 'pointer'}\n            >\n              <span>{getString('global-ui-cluster-aggregation-level', {cluster: 'cluster_' + ClusterLevel.C1})}</span>\n            </Tooltip>\n          </DigitLevelButton>\n          <DigitLevelButton\n            onClick={!disabledOptions.includes(ClusterLevel.C3) ?\n              () => updateSetting('cluster_level', ClusterLevel.C3) : undefined}\n            className={disabledOptions.includes(ClusterLevel.C3) ? 'disabled-option' : undefined}\n            $selected={settingsOptions.clusterLevel !== false && ((!params.cluster_level && defaultClusterLevel === ClusterLevel.C3) ||\n              params.cluster_level === ClusterLevel.C3)\n            }\n          >\n            <Tooltip\n              explanation={disabledOptions.includes(ClusterLevel.C3)\n                ? getString('global-ui-settings-option-na')\n                : null\n              }\n              theme={TooltipTheme.Dark}\n              cursor={disabledOptions.includes(ClusterLevel.C3) ? 'default' : 'pointer'}\n            >\n              <span>{getString('global-ui-cluster-aggregation-level', {cluster: 'cluster_' + ClusterLevel.C3})}</span>\n            </Tooltip>\n          </DigitLevelButton>\n        </InputContainer>\n      </SettingGrid>\n    );\n  } else {\n    clusterLevelOptions = null;\n  }\n\n  let clusterOverlayToggle: React.ReactElement<any> | null;\n  if (settingsOptions.clusterOverlayMode !== undefined) {\n    const InputContainer = settingsOptions.clusterOverlayMode === true\n      ? SettingsInputContainer : DisabledSettingsInputContainer;\n    const LabelContainer = settingsOptions.clusterOverlayMode === true ? Label : DisabledLabel;\n    const tooltipText = settingsOptions.clusterOverlayMode === true\n      ? getString('glossary-cluster-overlay') : getString('glossary-cluster-overlay-disabled');\n    clusterOverlayToggle = (\n      <SettingGrid>\n        <Tooltip\n          explanation={tooltipText}\n        />\n        <LabelContainer>{getString('global-ui-show-clusters')}</LabelContainer>\n        <InputContainer>\n          <DigitLevelButton\n            onClick={() => updateSetting('cluster_overlay', ClusterMode.outline)}\n            $selected={(!params.cluster_overlay && defaultClusterMode === ClusterMode.outline) ||\n              params.cluster_overlay === ClusterMode.outline\n            }\n          >\n            <span>{upperFirst(ClusterMode.outline)}</span>\n          </DigitLevelButton>\n          <DigitLevelButton\n            onClick={() => updateSetting('cluster_overlay', ClusterMode.overlay)}\n            $selected={(!params.cluster_overlay && defaultClusterMode === ClusterMode.overlay) ||\n              params.cluster_overlay === ClusterMode.overlay\n            }\n          >\n            <span>{upperFirst(ClusterMode.overlay)}</span>\n          </DigitLevelButton>\n          <DigitLevelButton\n            onClick={() => updateSetting('cluster_overlay', ClusterMode.none)}\n            $selected={(!params.cluster_overlay && defaultClusterMode === ClusterMode.none) ||\n              params.cluster_overlay === ClusterMode.none\n            }\n          >\n            <span>{upperFirst(ClusterMode.none)}</span>\n          </DigitLevelButton>\n        </InputContainer>\n      </SettingGrid>\n    );\n  } else {\n    clusterOverlayToggle = null;\n  }\n\n\n  let nodeSizingOptions: React.ReactElement<any> | null;\n  if (settingsOptions.nodeSizing !== undefined) {\n    const nodeSizingActive = settingsOptions.nodeSizing === true || typeof settingsOptions.nodeSizing === 'object';\n    const InputContainer = nodeSizingActive === true\n      ? SettingsInputContainer : DisabledSettingsInputContainer;\n    const LabelContainer = nodeSizingActive === true ? Label : DisabledLabel;\n    const defaultValue = typeof settingsOptions.nodeSizing === 'object' && settingsOptions.nodeSizing.rca\n      ? NodeSizing.rca : defaultNodeSizing;\n    const currentValue = typeof settingsOptions.nodeSizing !== 'object' && params.node_sizing === NodeSizing.rca\n      ? defaultValue : params.node_sizing;\n    const sizeByRca = typeof settingsOptions.nodeSizing === 'object' && settingsOptions.nodeSizing.rca\n      ? (\n        <DigitLevelButton\n          onClick={() => updateSetting('node_sizing', NodeSizing.rca)}\n          $selected={(!currentValue && defaultValue === NodeSizing.rca) || currentValue === NodeSizing.rca}\n        >\n          <span>{getString('global-formatted-size-by', {type: NodeSizing.rca})}</span>\n        </DigitLevelButton>\n      ) : null;\n    nodeSizingOptions = (\n      <SettingGrid>\n        <Tooltip\n          explanation={getString('glossary-node-sizing')}\n        />\n        <LabelContainer>{getString('global-ui-node-sizing')}</LabelContainer>\n        <InputContainer>\n          {sizeByRca}\n          <DigitLevelButton\n            onClick={() => updateSetting('node_sizing', NodeSizing.cityEmployees)}\n            $selected={(!currentValue && defaultValue === NodeSizing.cityEmployees) || currentValue === NodeSizing.cityEmployees}\n          >\n            <span>{getString('global-formatted-size-by', {type: NodeSizing.cityEmployees})}</span>\n          </DigitLevelButton>\n          <DigitLevelButton\n            onClick={() => updateSetting('node_sizing', NodeSizing.cityCompanies)}\n            $selected={(!currentValue && defaultValue === NodeSizing.cityCompanies) || currentValue === NodeSizing.cityCompanies}\n          >\n            <span>{getString('global-formatted-size-by', {type: NodeSizing.cityCompanies})}</span>\n          </DigitLevelButton>\n          <DigitLevelButton\n            onClick={() => updateSetting('node_sizing', NodeSizing.uniform)}\n            $selected={(!currentValue && defaultValue === NodeSizing.uniform) || currentValue === NodeSizing.uniform}\n          >\n            <span>{getString('global-formatted-size-by', {type: NodeSizing.uniform})}</span>\n          </DigitLevelButton>\n          <DigitLevelButton\n            onClick={() => updateSetting('node_sizing', NodeSizing.globalEmployees)}\n            $selected={(!currentValue && defaultValue === NodeSizing.globalEmployees) || currentValue === NodeSizing.globalEmployees}\n          >\n            <span>{getString('global-formatted-size-by', {type: NodeSizing.globalEmployees})}</span>\n          </DigitLevelButton>\n          <DigitLevelButton\n            onClick={() => updateSetting('node_sizing', NodeSizing.globalCompanies)}\n            $selected={(!currentValue && defaultValue === NodeSizing.globalCompanies) || currentValue === NodeSizing.globalCompanies}\n          >\n            <span>{getString('global-formatted-size-by', {type: NodeSizing.globalCompanies})}</span>\n          </DigitLevelButton>\n        </InputContainer>\n      </SettingGrid>\n    );\n  } else {\n    nodeSizingOptions = null;\n  }\n\n  let colorByOptions: React.ReactElement<any> | null;\n  if (settingsOptions.colorBy !== undefined) {\n    const InputContainer = settingsOptions.colorBy !== false\n      ? SettingsInputContainer : DisabledSettingsInputContainer;\n    const LabelContainer = settingsOptions.colorBy !== false ? Label : DisabledLabel;\n    const tooltipText = typeof settingsOptions.colorBy === 'object' && settingsOptions.colorBy.nodes\n      ? getString('glossary-color-nodes-by') : getString('glossary-color-by');\n    const labelText = typeof settingsOptions.colorBy === 'object' && settingsOptions.colorBy.nodes\n      ? getString('global-ui-node-color-by') : getString('global-ui-color-by');\n    const defaultColorByText = settingsOptions.clusterLevel !== undefined\n      ? 'Knowledge Cluster (High aggregation)' : 'Industry groups (Sector level)';\n    const defaultIsSelected = !params.color_by || params.color_by === ColorBy.sector;\n    const rcaThreshold = settingsOptions.rcaThreshold && defaultIsSelected ? (\n      <RCAThresholdSlider\n        key={'rca-slider-key-' + params.rca_threshold}\n        updateValue={v => updateSetting('rca_threshold', v)}\n        initialValue={params.rca_threshold ? parseFloat(params.rca_threshold) : 1}\n      />\n    ) : null;\n    colorByOptions = (\n      <SettingGrid>\n        <Tooltip\n          explanation={tooltipText}\n        />\n        <LabelContainer>{labelText}</LabelContainer>\n        <InputContainer>\n          <DigitLevelButton\n            onClick={!defaultIsSelected ? () => updateSetting('color_by', ColorBy.sector) : undefined}\n            $selected={defaultIsSelected}\n          >\n            <div>{defaultColorByText}{rcaThreshold}</div>\n          </DigitLevelButton>\n          <DigitLevelButton\n            onClick={() => updateSetting('color_by', ColorBy.education)}\n            $selected={params.color_by === ColorBy.education}\n          >\n            <span>{getString('global-formatted-color-by', {type: ColorBy.education})}</span>\n          </DigitLevelButton>\n          <DigitLevelButton\n            onClick={() => updateSetting('color_by', ColorBy.wage)}\n            $selected={params.color_by === ColorBy.wage}\n          >\n            <span>{getString('global-formatted-color-by', {type: ColorBy.wage})}</span>\n          </DigitLevelButton>\n        </InputContainer>\n      </SettingGrid>\n    );\n  } else {\n    colorByOptions = null;\n  }\n\n  let cityColorByOptions: React.ReactElement<any> | null;\n  if (settingsOptions.cityColorBy !== undefined) {\n    const InputContainer = settingsOptions.cityColorBy !== false\n      ? SettingsInputContainer : DisabledSettingsInputContainer;\n    const LabelContainer = settingsOptions.cityColorBy !== false ? Label : DisabledLabel;\n    cityColorByOptions = (\n      <SettingGrid>\n        <Tooltip\n          explanation={getString('glossary-city-color-by')}\n        />\n        <LabelContainer>{getString('global-ui-node-color-by')}</LabelContainer>\n        <InputContainer>\n          <DigitLevelSoloButton\n            $selected={true}\n          >\n            {upperFirst(CityColorBy.proximity)}\n          </DigitLevelSoloButton>\n          <small><em>{getString('color-by-proximity-only')}</em></small>\n        </InputContainer>\n      </SettingGrid>\n    );\n  } else {\n    cityColorByOptions = null;\n  }\n\n  let cityNodeSizingOptions: React.ReactElement<any> | null;\n  if (settingsOptions.cityNodeSizing !== undefined) {\n    const InputContainer = settingsOptions.cityNodeSizing === true\n      ? SettingsInputContainer : DisabledSettingsInputContainer;\n    const LabelContainer = settingsOptions.cityNodeSizing === true ? Label : DisabledLabel;\n    cityNodeSizingOptions = (\n      <SettingGrid>\n        <Tooltip\n          explanation={getString('glossary-city-node-sizing')}\n        />\n        <LabelContainer>{getString('global-ui-node-sizing')}</LabelContainer>\n        <InputContainer>\n          <DigitLevelButton\n            onClick={() => updateSetting('city_node_sizing', CityNodeSizing.population)}\n            $selected={(!params.city_node_sizing && defaultCityNodeSizing === CityNodeSizing.population) || params.city_node_sizing === CityNodeSizing.population}\n          >\n            <span>{getString('global-formatted-size-by', {type: CityNodeSizing.population})}</span>\n          </DigitLevelButton>\n          <DigitLevelButton\n            onClick={() => updateSetting('city_node_sizing', CityNodeSizing.gdpPpp)}\n            $selected={(!params.city_node_sizing && defaultCityNodeSizing === CityNodeSizing.gdpPpp) || params.city_node_sizing === CityNodeSizing.gdpPpp}\n          >\n            <span>{getString('global-formatted-size-by', {type: CityNodeSizing.gdpPpp})}</span>\n          </DigitLevelButton>\n          <DigitLevelButton\n            onClick={() => updateSetting('city_node_sizing', CityNodeSizing.uniform)}\n            $selected={(!params.city_node_sizing && defaultCityNodeSizing === CityNodeSizing.uniform) || params.city_node_sizing === CityNodeSizing.uniform}\n          >\n            <span>{getString('global-formatted-size-by', {type: CityNodeSizing.uniform})}</span>\n          </DigitLevelButton>\n        </InputContainer>\n      </SettingGrid>\n    );\n  } else {\n    cityNodeSizingOptions = null;\n  }\n\n  return (\n    <Root>\n      <ContentRoot>\n        <Title>\n          <span dangerouslySetInnerHTML={{__html: gearIcon}} />\n          {getString('global-ui-settings')}\n          <CloseButton onClick={onClose}>×</CloseButton>\n        </Title>\n        <Content>\n          {compositionOptions}\n          {aggregationMode}\n          {digitLevelOptions}\n          {clusterLevelOptions}\n          {clusterOverlayToggle}\n          {nodeSizingOptions}\n          {colorByOptions}\n          {cityColorByOptions}\n          {cityNodeSizingOptions}\n          <ResetButton onClick={resetSettings}>\n            {getString('global-ui-settings-reset')}\n          </ResetButton>\n        </Content>\n      </ContentRoot>\n    </Root>\n  );\n};\n\n\nexport default Settings;\n","import React, {useState} from 'react';\nimport {textClassName, ExpandingButton} from '../Utils';\nimport raw from 'raw.macro';\nimport useFluent from '../../../hooks/useFluent';\nimport {joyrideClassNames} from '../../navigation/secondaryHeader/guide/CitiesGuide';\nimport {useRouteMatch} from 'react-router-dom';\nimport {Routes} from '../../../routing/routes';\nimport styled, {keyframes} from 'styled-components/macro';\nimport {\n  baseColor,\n  secondaryFont,\n} from '../../../styling/styleUtils';\nimport Modal from '../../standardModal';\nimport TreemapPNG from './static/treemap.png';\nimport IndustrySpacePNG from './static/industry_space.png';\nimport SwotPNG from './static/swot.png';\n\nconst growIn = keyframes`\n  0% {\n    transform: scale(0.4);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n`;\n\nconst Root = styled.div`\n  background-color: #fff;\n  position: relative;\n  animation: ${growIn} 0.1s normal forwards ease-in-out;\n  animation-iteration-count: 1;\n  color: ${baseColor};\n  height: 100%;\n  padding: 0;\n  width: 1000px;\n  max-width: 100%;\n  box-sizing: border-box;\n\n  @media (max-width: 1200px) {\n    width: 900px;\n  }\n\n  @media (max-width: 950px) {\n    width: 750px;\n  }\n\n  @media (max-width: 800px) {\n    width: 550px;\n  }\n\n  @media screen and (max-height: 800px) {\n    overflow: visible;\n  }\n`;\n\nconst Image = styled.img`\n  width: 1000px;\n  max-width: 100%;\n`;\n\nconst CloseButton = styled.button`\n  background-color: transparent;\n  border-none;\n  padding: 0 0.5rem;\n  color: ${baseColor};\n  text-transform: uppercase;\n  font-size: 1.5rem;\n  font-family: ${secondaryFont};\n  position: absolute;\n  right: 0;\n  top: 0;\n`;\n\nconst readThisChartIconSVG = raw('../../../assets/icons/read-this-chart.svg');\n\nconst HowToRead = () => {\n  const getString = useFluent();\n\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n\n  const isTreemap = useRouteMatch(Routes.CityEconomicComposition);\n  const isIndustrySpace = useRouteMatch(Routes.CityIndustrySpacePosition);\n  const isSwot = useRouteMatch(Routes.CityGrowthOpportunities);\n\n  let source: string | undefined;\n  if (isTreemap && isTreemap.isExact) {\n    source = TreemapPNG;\n  } else if (isIndustrySpace && isIndustrySpace.isExact) {\n    source = IndustrySpacePNG;\n  } else if (isSwot && isSwot.isExact) {\n    source = SwotPNG;\n  }\n\n  if (source) {\n    const modal = modalOpen ? (\n      <Modal\n        onClose={() => setModalOpen(false)}\n        width={'auto'}\n        height={'auto'}\n      >\n        <Root>\n          <Image\n            src={source}\n          />\n          <CloseButton onClick={() => setModalOpen(false)}>✕</CloseButton>\n        </Root>\n      </Modal>\n    ) : null;\n\n    return (\n      <>\n        <ExpandingButton\n          className={joyrideClassNames.howToRead}\n          onClick={() => setModalOpen(true)}\n        >\n          <span dangerouslySetInnerHTML={{__html: readThisChartIconSVG}} />\n          <div className={textClassName}>{getString('global-ui-read-chart')}</div>\n        </ExpandingButton>\n        {modal}\n      </>\n    );\n  }\n  return null;\n};\n\nexport default HowToRead;\n","import { useQuery, DocumentNode } from '@apollo/client';\nimport {\n  CityIndustryYear,\n  GlobalIndustryYear,\n  isValidPeerGroup,\n  PeerGroup,\n} from '../../../types/graphQL/graphQLTypes';\nimport {\n  ECONOMIC_COMPOSITION_COMPARISON_QUERY,\n  PEER_GROUP_ECONOMIC_COMPOSITION_COMPARISON_QUERY,\n  WORLD_ECONOMIC_COMPOSITION_COMPARISON_QUERY,\n} from './industryQueries';\nimport {\n  CLUSTER_ECONOMIC_COMPOSITION_COMPARISON_QUERY,\n  CLUSTER_PEER_GROUP_ECONOMIC_COMPOSITION_COMPARISON_QUERY,\n  CLUSTER_WORLD_ECONOMIC_COMPOSITION_COMPARISON_QUERY,\n} from './clusterQueries';\nimport { AggregationMode } from '../../../routing/routes';\n\nexport enum RegionGroup {\n  World = 'world',\n}\n\ninterface IndustriesList {\n  id: CityIndustryYear['id'];\n  industryId: CityIndustryYear['naicsId'];\n  numCompany: CityIndustryYear['numCompany'];\n  numEmploy: CityIndustryYear['numEmploy'];\n}\n\nexport interface SuccessResponse {\n  primaryCityIndustries: IndustriesList[];\n  secondaryCityIndustries: IndustriesList[];\n}\n\ninterface CityVariables {\n  primaryCity: number;\n  secondaryCity: number;\n  year: number;\n}\n\ninterface GroupIndustryList {\n  id: GlobalIndustryYear['naicsId'];\n  industryId: GlobalIndustryYear['naicsId'];\n  numCompany: GlobalIndustryYear['avgNumCompany'];\n  numEmploy: GlobalIndustryYear['avgNumEmploy'];\n}\n\ninterface GroupSuccessResponse {\n  primaryCityIndustries: IndustriesList[];\n  groupIndustries_1: GroupIndustryList[];\n  groupIndustries_2: GroupIndustryList[];\n  groupIndustries_3?: GroupIndustryList[];\n  groupIndustries_4?: GroupIndustryList[];\n  groupIndustries_5?: GroupIndustryList[];\n  groupIndustries_6?: GroupIndustryList[];\n}\n\nexport const useEconomicCompositionComparisonQuery = (variables: CityVariables) =>\n  useQuery<SuccessResponse, CityVariables>(ECONOMIC_COMPOSITION_COMPARISON_QUERY, { variables });\n\ninterface InputVariables {\n  primaryCity: number;\n  comparison: number | RegionGroup | PeerGroup;\n  year: number;\n  aggregation: AggregationMode;\n}\n\ninterface QueryVariables {\n  primaryCity: number;\n  secondaryCity?: number;\n  peerGroup?: PeerGroup;\n  year: number;\n}\n\nexport const useComparisonQuery = (input: InputVariables) => {\n  let QUERY: DocumentNode;\n  const variables: QueryVariables = {primaryCity: input.primaryCity, year: input.year};\n  if (input.aggregation === AggregationMode.cluster) {\n    if (input.comparison === RegionGroup.World) {\n      QUERY = CLUSTER_WORLD_ECONOMIC_COMPOSITION_COMPARISON_QUERY;\n    } else if (isValidPeerGroup(input.comparison)) {\n      variables.peerGroup = input.comparison as PeerGroup;\n      QUERY = CLUSTER_PEER_GROUP_ECONOMIC_COMPOSITION_COMPARISON_QUERY;\n    } else {\n      variables.secondaryCity = input.comparison as number | undefined;\n      QUERY = CLUSTER_ECONOMIC_COMPOSITION_COMPARISON_QUERY;\n    }\n\n  } else {\n    if (input.comparison === RegionGroup.World) {\n      QUERY = WORLD_ECONOMIC_COMPOSITION_COMPARISON_QUERY;\n    } else if (isValidPeerGroup(input.comparison)) {\n      variables.peerGroup = input.comparison as PeerGroup;\n      QUERY = PEER_GROUP_ECONOMIC_COMPOSITION_COMPARISON_QUERY;\n    } else {\n      variables.secondaryCity = input.comparison as number | undefined;\n      QUERY = ECONOMIC_COMPOSITION_COMPARISON_QUERY;\n    }\n  }\n  const {loading, error, data: response} = useQuery<SuccessResponse>(QUERY, { variables });\n  let data: SuccessResponse | undefined;\n  if (input.comparison === RegionGroup.World || isValidPeerGroup(input.comparison)) {\n    data = response === undefined ? response : {\n      primaryCityIndustries: response.primaryCityIndustries,\n      secondaryCityIndustries: [],\n    };\n    if (data !== undefined && response !== undefined) {\n      const {\n        groupIndustries_1, groupIndustries_2, groupIndustries_3,\n        groupIndustries_4, groupIndustries_5, groupIndustries_6,\n      } = response as any as GroupSuccessResponse;\n      if (groupIndustries_1) {\n        data.secondaryCityIndustries.push(\n          ...groupIndustries_1.map(d => ({...d, id: `${d.id}`, industryId: `${d.industryId}` })),\n        );\n      }\n      if (groupIndustries_2) {\n        data.secondaryCityIndustries.push(\n          ...groupIndustries_2.map(d => ({...d, id: `${d.id}`, industryId: `${d.industryId}` })),\n        );\n      }\n      if (groupIndustries_3) {\n        data.secondaryCityIndustries.push(\n          ...groupIndustries_3.map(d => ({...d, id: `${d.id}`, industryId: `${d.industryId}` })),\n        );\n      }\n      if (groupIndustries_4) {\n        data.secondaryCityIndustries.push(\n          ...groupIndustries_4.map(d => ({...d, id: `${d.id}`, industryId: `${d.industryId}` })),\n        );\n      }\n      if (groupIndustries_5) {\n        data.secondaryCityIndustries.push(\n          ...groupIndustries_5.map(d => ({...d, id: `${d.id}`, industryId: `${d.industryId}` })),\n        );\n      }\n      if (groupIndustries_6) {\n        data.secondaryCityIndustries.push(\n          ...groupIndustries_6.map(d => ({...d, id: `${d.id}`, industryId: `${d.industryId}` })),\n        );\n      }\n    }\n  } else {\n    data = response;\n  }\n\n  return {loading, error, data};\n};\n\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport {backgroundDark} from '../../styling/styleUtils';\nimport {breakPoints} from '../../styling/GlobalGrid';\n\nconst Root = styled.div`\n  grid-column: 2;\n  grid-row: 2;\n  max-height: 100%;\n  position: relative;\n\n  @media ${breakPoints.small} {\n    grid-row: 1;\n    grid-column: 1;\n  }\n`;\n\nconst ScrollContainer = styled.div`\n  width: 100%;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  overflow-y: auto;\n  overflow-x: hidden;\n  display: flex;\n  align-items: center;\n\n  ::-webkit-scrollbar {\n    -webkit-appearance: none;\n    width: 7px;\n  }\n  ::-webkit-scrollbar-thumb {\n    border-radius: 4px;\n    background-color: rgba(0, 0, 0, .3);\n  }\n  ::-webkit-scrollbar-track {\n    background-color: rgba(0, 0, 0, .1);\n  }\n\n  @media ${breakPoints.small} {\n    position: static;\n    overflow: visible;\n  }\n`;\n\nconst ContentContainer = styled.div`\n  padding-left: 0.75rem;\n  border-left: solid 2px ${backgroundDark};\n  width: 100%;\n  margin: auto;\n\n  @media ${breakPoints.small} {\n    padding-left: 0;\n    border-left: none;\n  }\n`;\n\nconst StandardSideTextBlock = ({children, clearStyles}: {children: React.ReactNode, clearStyles?: boolean}) => {\n  const Content = clearStyles ? React.Fragment : ContentContainer;\n  return (\n    <Root>\n      <ScrollContainer style={{alignItems: clearStyles ? 'flex-start' : undefined}}>\n        <Content>\n          {children}\n        </Content>\n      </ScrollContainer>\n    </Root>\n  );\n};\n\nexport default StandardSideTextBlock;\n","import React from 'react';\nimport styled, {keyframes} from 'styled-components/macro';\nimport {backgroundDark} from '../../styling/styleUtils';\nimport {breakPoints} from '../../styling/GlobalGrid';\n\nconst Root = styled.div`\n  grid-column: 2;\n  grid-row: 2;\n  max-height: 100%;\n  position: relative;\n\n  @media ${breakPoints.small} {\n    grid-row: 1;\n    grid-column: 1;\n  }\n`;\n\nconst ScrollContainer = styled.div`\n  width: 100%;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  overflow-y: auto;\n  overflow-x: hidden;\n  display: flex;\n  align-items: center;\n\n  ::-webkit-scrollbar {\n    -webkit-appearance: none;\n    width: 7px;\n  }\n  ::-webkit-scrollbar-thumb {\n    border-radius: 4px;\n    background-color: rgba(0, 0, 0, .3);\n  }\n  ::-webkit-scrollbar-track {\n    background-color: rgba(0, 0, 0, .1);\n  }\n\n  @media ${breakPoints.small} {\n    position: static;\n    overflow: visible;\n  }\n`;\n\nconst ContentContainer = styled.div`\n  padding-left: 0.75rem;\n  border-left: solid 2px ${backgroundDark};\n  width: 100%;\n  margin: auto;\n\n  @media ${breakPoints.small} {\n    padding-left: 0;\n    border-left: none;\n  }\n`;\nconst flickerAnimation = keyframes`\n  0%   { opacity: 1; }\n  50%  { opacity: 0.5; }\n  100% { opacity: 1; }\n`;\n\nconst TitleBar = styled.div`\n  height: 1.5rem;\n  background-color: #efefef;\n  margin-bottom: 0.4rem;\n  animation: ${flickerAnimation} 1s infinite;\n`;\n\nconst ParaBar = styled.div`\n  height: 0.845rem;\n  background-color: #efefef;\n  margin-bottom: 0.35rem;\n  animation: ${flickerAnimation} 1s infinite;\n`;\n\nconst StandardSideTextLoading = ({clearStyles}: {clearStyles?: boolean}) => {\n  const Content = clearStyles ? React.Fragment : ContentContainer;\n  return (\n    <Root>\n      <ScrollContainer style={{alignItems: clearStyles ? 'flex-start' : undefined}}>\n        <Content>\n          <TitleBar style={{width: '95%'}} />\n          <TitleBar style={{width: '60%', marginBottom: '1rem'}} />\n          <ParaBar style={{width: '93%'}} />\n          <ParaBar style={{width: '87%'}} />\n          <ParaBar style={{width: '76%'}} />\n          <ParaBar style={{width: '90%'}} />\n          <ParaBar style={{width: '84%'}} />\n          <ParaBar style={{width: '76%'}} />\n          <ParaBar style={{width: '59%'}} />\n        </Content>\n      </ScrollContainer>\n    </Root>\n  );\n};\n\nexport default StandardSideTextLoading;\n","import React from 'react';\nimport StandardSideTextBlock from '../../../../../components/general/StandardSideTextBlock';\nimport {\n  ContentParagraph,\n  ContentTitle,\n} from '../../../../../styling/styleUtils';\nimport useFluent, {possessive, ordinalNumber} from '../../../../../hooks/useFluent';\nimport useCurrentCity from '../../../../../hooks/useCurrentCity';\nimport useGlobalLocationData from '../../../../../hooks/useGlobalLocationData';\nimport StandardSideTextLoading from '../../../../../components/transitionStateComponents/StandardSideTextLoading';\nimport {formatNumberLong} from '../../../../../Utils';\nimport {useEconomicCompositionQuery} from '../../../../../components/dataViz/treeMap/CompositionTreeMap';\nimport {\n  useGlobalIndustryMap,\n} from '../../../../../hooks/useGlobalIndustriesData';\nimport {DigitLevel, CompositionType, CityPeerGroupCounts} from '../../../../../types/graphQL/graphQLTypes';\nimport orderBy from 'lodash/orderBy';\nimport { useQuery, gql } from '@apollo/client';\nimport Helmet from 'react-helmet';\n\nconst ADDITIONAL_ECON_COMP_DATA = gql`\n  query GetPeerGroupCityCounts($cityId: Int!) {\n    cityPeerGroupCounts(cityId: $cityId) {\n      region\n    }\n  }\n`;\n\ninterface SuccessResponse {\n  cityPeerGroupCounts: {region: CityPeerGroupCounts['region']};\n}\n\n\ninterface Props {\n  year: number;\n  cityId: number;\n  compositionType: CompositionType;\n}\n\ninterface IndustryDatum {\n  name: string;\n  sector: string;\n  count: number;\n}\n\nconst SideText = ({year, cityId, compositionType}: Props) => {\n  const getString = useFluent();\n  const {loading, city} = useCurrentCity();\n  const locations = useGlobalLocationData();\n  const composition = useEconomicCompositionQuery({year, cityId});\n  const industryMap = useGlobalIndustryMap();\n  const additional = useQuery<SuccessResponse, {cityId: number}>(ADDITIONAL_ECON_COMP_DATA, {\n    variables: {cityId} });\n  if (loading || locations.loading || composition.loading || additional.loading) {\n    return <StandardSideTextLoading />;\n  } else if (city && locations.data && composition.data && composition.data.industries.length &&\n    additional.data\n  ) {\n    const cityName = city.name ? city.name : '';\n    const cityNamePlural = possessive([cityName]);\n    const {countries, regions} = locations.data;\n    const {industries} = composition.data;\n    const country = countries.find(d => city.countryId !== null && d.countryId === city.countryId.toString());\n    const region = regions.find(d => city.region !== null && d.regionId === city.region.toString());\n\n    let total = 0;\n    let totalEmploy = 0;\n    const allSectors: IndustryDatum[] = [];\n    const allDigitThreeIndustries: IndustryDatum[] = [];\n    industries.forEach(({naicsId, numCompany, numEmploy}) => {\n      const industry = industryMap.data[naicsId];\n      const companies = numCompany ? numCompany : 0;\n      const employees = numEmploy ? numEmploy : 0;\n      const count = compositionType === CompositionType.Companies ? companies : employees;\n      if (industry && industry.level === DigitLevel.Three) {\n        const {name, naicsIdTopParent} = industry;\n        allDigitThreeIndustries.push({\n          count,\n          name: name ? name : '',\n          sector: naicsIdTopParent.toString(),\n        });\n      }\n      if (industry && industry.level === DigitLevel.Sector) {\n        total = compositionType === CompositionType.Companies ? total + companies : total + employees;\n        totalEmploy = totalEmploy + employees;\n        const {name, naicsIdTopParent} = industry;\n        allSectors.push({\n          count,\n          name: name ? name : '',\n          sector: naicsIdTopParent.toString(),\n        });\n      }\n    });\n\n    const largestSector: IndustryDatum | undefined = orderBy(allSectors, ['count'], ['desc'])[0];\n    if (!largestSector) {\n      return <StandardSideTextLoading />;\n    }\n    const largest3DigitIndustryInSector = orderBy(\n      allDigitThreeIndustries.filter(d => d.sector === largestSector.sector), ['count'], ['desc'],\n    )[0];\n\n    const secondLargestSector: IndustryDatum | undefined = orderBy(allSectors, ['count'], ['desc'])[1];\n    if (!secondLargestSector) {\n      return <StandardSideTextLoading />;\n    }\n    const secondLargest3DigitIndustryInSector = orderBy(\n      allDigitThreeIndustries.filter(d => d.sector === secondLargestSector.sector), ['count'], ['desc'],\n    )[0];\n\n    const title = getString('economic-composition-title', {\n      'name-plural': cityNamePlural,\n    });\n    const para1 = getString('economic-composition-para-1', {\n      'name': cityName,\n      'name-plural': cityNamePlural,\n      'income-level': getString('global-formatted-income-class', {type: city.incomeClass}),\n      'country': country ? country.nameShortEn : '',\n      'pop-year': '2015',\n      'population': formatNumberLong(city.population ? city.population : 0),\n      'gdppc': formatNumberLong(city.gdppc ? city.gdppc : 0),\n      'region-size-rank': ordinalNumber([city.regionPopRank ? city.regionPopRank : 0]),\n      'region-wealth-rank': ordinalNumber([city.regionGdppcRank ? city.regionGdppcRank : 0]),\n      'region-name': region ? region.regionName : '',\n      'region-city-count': additional.data.cityPeerGroupCounts.region + 1,\n      'num-employ': formatNumberLong(totalEmploy),\n    });\n\n    const para2 = getString('economic-composition-para-2', {\n      'name': cityName,\n      'largest-sector': largestSector.name,\n      'largest-sector-share-percent': parseFloat((largestSector.count / total * 100).toFixed(2)),\n      'composition-type': compositionType,\n      'largest-3-digit-industry-in-sector': largest3DigitIndustryInSector.name,\n      'largest-3-digit-industry-in-sector-share-percent':\n        parseFloat((largest3DigitIndustryInSector.count / total * 100).toFixed(2)),\n      'second-largest-sector': secondLargestSector.name,\n      'second-largest-sector-share-percent': parseFloat((secondLargestSector.count / total * 100).toFixed(2)),\n      'second-largest-3-digit-industry-in-sector': secondLargest3DigitIndustryInSector.name,\n      'second-largest-3-digit-industry-in-sector-share-percent':\n        parseFloat((secondLargest3DigitIndustryInSector.count / total * 100).toFixed(2)),\n    });\n\n    return (\n      <StandardSideTextBlock>\n        <Helmet>\n          <title>{title + ' | ' + getString('meta-data-title-default-suffix')}</title>\n          <meta property='og:title' content={title + ' | ' + getString('meta-data-title-default-suffix')} />\n        </Helmet>\n        <ContentTitle>{title}</ContentTitle>\n        <ContentParagraph>{para1}</ContentParagraph>\n        <ContentParagraph>{para2}</ContentParagraph>\n      </StandardSideTextBlock>\n    );\n  } else {\n    return null;\n  }\n\n};\n\nexport default SideText;\n","import React, {useState, useRef, useCallback, useEffect} from 'react';\nimport UtilityBar, {DownloadType} from '../../../../../components/navigation/secondaryHeader/UtilityBar';\nimport CompositionTreeMap from '../../../../../components/dataViz/treeMap/CompositionTreeMap';\nimport ClusterCompositionTreeMap from '../../../../../components/dataViz/treeMap/ClusterCompositionTreeMap';\nimport {defaultYear} from '../../../../../Utils';\nimport {\n  ContentGrid,\n} from '../../../../../styling/styleUtils';\nimport {\n  ClassificationNaicsIndustry,\n  ClassificationNaicsCluster,\n  CompositionType,\n  defaultDigitLevel,\n  defaultCompositionType,\n} from '../../../../../types/graphQL/graphQLTypes';\nimport CategoryLabels from '../../../../../components/dataViz/legend/CategoryLabels';\nimport styled from 'styled-components/macro';\nimport useGlobalLocationData from '../../../../../hooks/useGlobalLocationData';\nimport useSectorMap from '../../../../../hooks/useSectorMap';\nimport useClusterMap from '../../../../../hooks/useClusterMap';\nimport DownloadImageOverlay from './DownloadImageOverlay';\nimport useQueryParams from '../../../../../hooks/useQueryParams';\nimport useFluent from '../../../../../hooks/useFluent';\nimport EducationLegend from '../../../../../components/dataViz/legend/EducationLegend';\nimport WageLegend from '../../../../../components/dataViz/legend/WageLegend';\nimport {\n  ColorBy,\n  AggregationMode,\n  defaultAggregationMode,\n  ClusterLevel,\n  defaultClusterLevel,\n} from '../../../../../routing/routes';\nimport PreChartRow, {Indicator} from '../../../../../components/general/PreChartRow';\nimport {usePrevious} from 'react-use';\nimport {Mode} from '../../../../../components/general/searchIndustryInGraphDropdown';\nimport SideText from './SideText';\n\nconst TreeMapRoot = styled.div`\n  display: contents;\n`;\n\ninterface Props {\n  cityId: string;\n}\n\nconst EconomicComposition = (props: Props) => {\n  const { cityId } = props;\n  const [highlighted, setHighlighted] = useState<string | undefined>(undefined);\n  const clearHighlighted = useCallback(() => setHighlighted(undefined), [setHighlighted]);\n  const prevHighlighted = usePrevious(highlighted);\n  const [hiddenSectors, setHiddenSectors] = useState<ClassificationNaicsIndustry['id'][]>([]);\n  const [hiddenClusters, setHiddenClusters] = useState<ClassificationNaicsCluster['id'][]>([]);\n  const {digit_level, cluster_level, composition_type, color_by, aggregation} = useQueryParams();\n  const compositionType= composition_type ? composition_type as CompositionType : defaultCompositionType;\n  const sectorMap = useSectorMap();\n  const clusterMap = useClusterMap();\n\n  useEffect(() => clearHighlighted, [digit_level, clearHighlighted]);\n\n  const toggleSector = (sectorId: ClassificationNaicsIndustry['id']) =>\n    hiddenSectors.includes(sectorId)\n      ? setHiddenSectors(hiddenSectors.filter(sId => sId !== sectorId))\n      : setHiddenSectors([...hiddenSectors, sectorId]);\n  const isolateSector = (sectorId: ClassificationNaicsIndustry['id']) =>\n    hiddenSectors.length === sectorMap.length - 1 && !hiddenSectors.find(sId => sId === sectorId)\n      ? setHiddenSectors([])\n      : setHiddenSectors([...sectorMap.map(s => s.id).filter(sId => sId !== sectorId)]);\n  const resetSectors = () => setHiddenSectors([]);\n\n  const toggleCluster = (clusterId: ClassificationNaicsCluster['id']) =>\n    hiddenClusters.includes(clusterId)\n      ? setHiddenClusters(hiddenClusters.filter(sId => sId !== clusterId))\n      : setHiddenClusters([...hiddenClusters, clusterId]);\n  const isolateCluster = (clusterId: ClassificationNaicsCluster['id']) =>\n    hiddenClusters.length === clusterMap.length - 1 && !hiddenClusters.find(sId => sId === clusterId)\n      ? setHiddenClusters([])\n      : setHiddenClusters([...clusterMap.map(s => s.id).filter(sId => sId !== clusterId)]);\n  const resetClusters = () => setHiddenClusters([]);\n\n  const [activeDownload, setActiveDownload] = useState<DownloadType | null>(null);\n  const closeDownload = () => setActiveDownload(null);\n\n  const [indicatorContent, setIndicatorContent] = useState<Indicator>({\n    text: undefined,\n    tooltipContent: undefined,\n  });\n\n  const treeMapRef = useRef<HTMLDivElement | null>(null);\n  const globalLocationData = useGlobalLocationData();\n  const getString = useFluent();\n\n  const isClusterTreeMap =\n    (!aggregation && defaultAggregationMode === AggregationMode.cluster) || (aggregation === AggregationMode.cluster);\n\n  let download: React.ReactElement<any> | null;\n  if (activeDownload === DownloadType.Image && treeMapRef.current) {\n    const cellsNode = treeMapRef.current.querySelector('div.react-canvas-tree-map-masterContainer');\n    if (cellsNode) {\n      const targetCity = globalLocationData.data && globalLocationData.data.cities.find(c => c.cityId === cityId);\n      download = (\n        <DownloadImageOverlay\n          onClose={closeDownload}\n          cityId={parseInt(cityId, 10)}\n          cityName={targetCity && targetCity.name ? targetCity.name : undefined}\n          year={defaultYear}\n          digitLevel={digit_level ? parseInt(digit_level, 10) : defaultDigitLevel}\n          clusterLevel={cluster_level ? cluster_level : defaultClusterLevel}\n          aggregationMode={isClusterTreeMap ? AggregationMode.cluster : AggregationMode.industries}\n          colorBy={color_by ? color_by : ColorBy.sector}\n          compositionType={compositionType}\n          hiddenClusters={hiddenClusters}\n          hiddenSectors={hiddenSectors}\n          treeMapCellsNode={cellsNode as HTMLDivElement}\n        />\n      );\n    } else {\n      download = null;\n      setActiveDownload(null);\n    }\n  } else {\n    download = null;\n  }\n\n  let legend: React.ReactElement<any> | null;\n  if (color_by === ColorBy.education) {\n    legend = (\n      <EducationLegend />\n    );\n  } else if (color_by === ColorBy.wage) {\n    legend = (\n      <WageLegend />\n    );\n  } else  {\n    if (isClusterTreeMap) {\n      legend = (\n        <CategoryLabels\n          categories={clusterMap}\n          allowToggle={true}\n          toggleCategory={toggleCluster}\n          isolateCategory={isolateCluster}\n          hiddenCategories={hiddenClusters}\n          resetCategories={resetClusters}\n          resetText={getString('global-ui-reset-clusters')}\n          fullWidth={false}\n        />\n      );\n    } else {\n      legend = (\n        <CategoryLabels\n          categories={sectorMap}\n          allowToggle={true}\n          toggleCategory={toggleSector}\n          isolateCategory={isolateSector}\n          hiddenCategories={hiddenSectors}\n          resetCategories={resetSectors}\n          resetText={getString('global-ui-reset-sectors')}\n          fullWidth={true}\n        />\n      );\n    }\n  }\n\n  const treeMapViz = isClusterTreeMap ? (\n    <ClusterCompositionTreeMap\n      cityId={parseInt(cityId, 10)}\n      year={defaultYear}\n      clusterLevel={cluster_level ? cluster_level : defaultClusterLevel}\n      colorBy={color_by ? color_by : ColorBy.sector}\n      compositionType={compositionType}\n      highlighted={highlighted}\n      clearHighlighted={clearHighlighted}\n      hiddenClusters={hiddenClusters}\n      setIndicatorContent={setIndicatorContent}\n    />\n  ) : (\n    <CompositionTreeMap\n      cityId={parseInt(cityId, 10)}\n      year={defaultYear}\n      digitLevel={digit_level ? parseInt(digit_level, 10) : defaultDigitLevel}\n      colorBy={color_by ? color_by : ColorBy.sector}\n      compositionType={compositionType}\n      highlighted={highlighted}\n      clearHighlighted={clearHighlighted}\n      hiddenSectors={hiddenSectors}\n      setIndicatorContent={setIndicatorContent}\n    />\n  );\n\n  return (\n    <>\n      <ContentGrid>\n        <SideText\n          cityId={parseInt(cityId, 10)}\n          year={defaultYear}\n          compositionType={compositionType}\n        />\n        <TreeMapRoot ref={treeMapRef}>\n          <PreChartRow\n            key={'tree-map-search-' + Boolean(!highlighted && prevHighlighted)}\n            indicator={compositionType === CompositionType.Employees ? indicatorContent : undefined}\n            searchInGraphOptions={{\n              hiddenParents: isClusterTreeMap ? hiddenClusters : hiddenSectors,\n              digitLevel: isClusterTreeMap ? null : digit_level ? parseInt(digit_level, 10) : defaultDigitLevel,\n              clusterLevel: isClusterTreeMap\n                ? cluster_level ? parseInt(cluster_level, 10).toString() as ClusterLevel : defaultClusterLevel : null,\n              setHighlighted,\n              mode: isClusterTreeMap ? Mode.cluster : Mode.naics,\n            }}\n            settingsOptions={{\n              compositionType: true,\n              colorBy: true,\n              aggregationMode: true,\n              clusterLevel: isClusterTreeMap ? true : undefined,\n              digitLevel: isClusterTreeMap ? undefined : true,\n            }}\n          />\n          {treeMapViz}\n        </TreeMapRoot>\n        {legend}\n        {download}\n      </ContentGrid>\n\n      <UtilityBar\n        onDownloadImageButtonClick={() => setActiveDownload(DownloadType.Image)}\n      />\n    </>\n  );\n};\n\nexport default EconomicComposition;\n","import React from 'react';\nimport {DefaultContentWrapper} from '../../../../styling/GlobalGrid';\nimport CityComposition from './cityComposition';\nimport useCurrentCityId from '../../../../hooks/useCurrentCityId';\nimport SimpleError from '../../../../components/transitionStateComponents/SimpleError';\nimport {LoadingOverlay} from '../../../../components/transitionStateComponents/VizLoadingBlock';\n\nconst EconomicComposition = () => {\n  const cityId = useCurrentCityId();\n\n  if (cityId === null) {\n    return (\n      <DefaultContentWrapper>\n        <LoadingOverlay>\n          <SimpleError fluentMessageId={'global-ui-error-invalid-city'} />\n        </LoadingOverlay>\n      </DefaultContentWrapper>\n    );\n  }\n\n  return (\n    <DefaultContentWrapper>\n      <CityComposition\n        cityId={cityId}\n      />\n    </DefaultContentWrapper>\n  );\n};\n\nexport default EconomicComposition;\n","import { gql } from '@apollo/client';\n\nexport const ECONOMIC_COMPOSITION_COMPARISON_QUERY = gql`\n  query GetCityIndustryTreeData($primaryCity: Int!, $secondaryCity: Int!, $year: Int!) {\n    primaryCityIndustries: cityIndustryYearList(cityId: $primaryCity, year: $year) {\n      id\n      industryId: naicsId\n      numCompany\n      numEmploy\n    }\n    secondaryCityIndustries: cityIndustryYearList(cityId: $secondaryCity, year: $year) {\n      id\n      industryId: naicsId\n      numCompany\n      numEmploy\n    }\n  }\n`;\n\nexport const PEER_GROUP_ECONOMIC_COMPOSITION_COMPARISON_QUERY = gql`\n  query GetCityIndustryTreeData($primaryCity: Int!, $peerGroup: String!, $year: Int!) {\n    primaryCityIndustries: cityIndustryYearList(cityId: $primaryCity, year: $year) {\n      id\n      industryId: naicsId\n      numCompany\n      numEmploy\n    }\n    groupIndustries_1: naicsPeerEconStruct(cityId: $primaryCity, year: $year, peerGroup: $peerGroup, naicsLevel: 1) {\n      id: naicsId\n      industryId: naicsId\n      numCompany: avgEmployCount\n      numEmploy: avgCompanyCount\n    }\n    groupIndustries_2: naicsPeerEconStruct(cityId: $primaryCity, year: $year, peerGroup: $peerGroup, naicsLevel: 2) {\n      id: naicsId\n      industryId: naicsId\n      numCompany: avgEmployCount\n      numEmploy: avgCompanyCount\n    }\n    groupIndustries_3: naicsPeerEconStruct(cityId: $primaryCity, year: $year, peerGroup: $peerGroup, naicsLevel: 3) {\n      id: naicsId\n      industryId: naicsId\n      numCompany: avgEmployCount\n      numEmploy: avgCompanyCount\n    }\n    groupIndustries_4: naicsPeerEconStruct(cityId: $primaryCity, year: $year, peerGroup: $peerGroup, naicsLevel: 4) {\n      id: naicsId\n      industryId: naicsId\n      numCompany: avgEmployCount\n      numEmploy: avgCompanyCount\n    }\n    groupIndustries_5: naicsPeerEconStruct(cityId: $primaryCity, year: $year, peerGroup: $peerGroup, naicsLevel: 5) {\n      id: naicsId\n      industryId: naicsId\n      numCompany: avgEmployCount\n      numEmploy: avgCompanyCount\n    }\n    groupIndustries_6: naicsPeerEconStruct(cityId: $primaryCity, year: $year, peerGroup: $peerGroup, naicsLevel: 6) {\n      id: naicsId\n      industryId: naicsId\n      numCompany: avgEmployCount\n      numEmploy: avgCompanyCount\n    }\n  }\n`;\n\nexport const WORLD_ECONOMIC_COMPOSITION_COMPARISON_QUERY = gql`\n  query GetWorldCityIndustryTreeData($primaryCity: Int!, $year: Int!) {\n    primaryCityIndustries: cityIndustryYearList(cityId: $primaryCity, year: $year) {\n      id\n      industryId: naicsId\n      numCompany\n      numEmploy\n    }\n    groupIndustries_1: globalIndustryYear(year: $year, level: 1) {\n      id: naicsId\n      industryId: naicsId\n      numCompany: avgNumCompany\n      numEmploy: avgNumEmploy\n    }\n    groupIndustries_2: globalIndustryYear(year: $year, level: 2) {\n      id: naicsId\n      industryId: naicsId\n      numCompany: avgNumCompany\n      numEmploy: avgNumEmploy\n    }\n    groupIndustries_3: globalIndustryYear(year: $year, level: 3) {\n      id: naicsId\n      industryId: naicsId\n      numCompany: avgNumCompany\n      numEmploy: avgNumEmploy\n    }\n    groupIndustries_4: globalIndustryYear(year: $year, level: 4) {\n      id: naicsId\n      industryId: naicsId\n      numCompany: avgNumCompany\n      numEmploy: avgNumEmploy\n    }\n    groupIndustries_5: globalIndustryYear(year: $year, level: 5) {\n      id: naicsId\n      industryId: naicsId\n      numCompany: avgNumCompany\n      numEmploy: avgNumEmploy\n    }\n    groupIndustries_6: globalIndustryYear(year: $year, level: 6) {\n      id: naicsId\n      industryId: naicsId\n      numCompany: avgNumCompany\n      numEmploy: avgNumEmploy\n    }\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const CLUSTER_ECONOMIC_COMPOSITION_COMPARISON_QUERY = gql`\n  query GetCityIndustryTreeData($primaryCity: Int!, $secondaryCity: Int!, $year: Int!) {\n\n    primaryCityIndustries: cityClusterYearList(cityId: $primaryCity, year: $year) {\n      id\n      industryId: clusterId\n      numCompany\n      numEmploy\n    }\n\n    secondaryCityIndustries: cityClusterYearList(cityId: $secondaryCity, year: $year) {\n      id\n      industryId: clusterId\n      numCompany\n      numEmploy\n    }\n  }\n`;\n\nexport const CLUSTER_PEER_GROUP_ECONOMIC_COMPOSITION_COMPARISON_QUERY = gql`\n  query GetCityIndustryTreeData($primaryCity: Int!, $peerGroup: String!, $year: Int!) {\n    primaryCityIndustries: cityClusterYearList(cityId: $primaryCity, year: $year) {\n      id\n      industryId: clusterId\n      numCompany\n      numEmploy\n    }\n    groupIndustries_1: clusterPeerEconStruct(cityId: $primaryCity, year: $year, peerGroup: $peerGroup, clusterLevel: 1) {\n      id: clusterId\n      industryId: clusterId\n      numCompany: avgEmployCount\n      numEmploy: avgCompanyCount\n    }\n    groupIndustries_2: clusterPeerEconStruct(cityId: $primaryCity, year: $year, peerGroup: $peerGroup, clusterLevel: 3) {\n      id: clusterId\n      industryId: clusterId\n      numCompany: avgEmployCount\n      numEmploy: avgCompanyCount\n    }\n  }\n`;\n\nexport const CLUSTER_WORLD_ECONOMIC_COMPOSITION_COMPARISON_QUERY = gql`\n  query GetWorldCityIndustryTreeData($primaryCity: Int!, $year: Int!) {\n\n    primaryCityIndustries: cityClusterYearList(cityId: $primaryCity, year: $year) {\n      id\n      industryId: clusterId\n      numCompany\n      numEmploy\n    }\n    groupIndustries_1: globalIndustryYear(year: $year, level: 1) {\n      id: clusterId\n      industryId: clusterId\n      numCompany: avgNumCompany\n      numEmploy: avgNumEmploy\n    }\n    groupIndustries_2: globalIndustryYear(year: $year, level: 3) {\n      id: clusterId\n      industryId: clusterId\n      numCompany: avgNumCompany\n      numEmploy: avgNumEmploy\n    }\n  }\n`;\n","import React, {useState, useRef} from 'react';\nimport BasicModal from '../../../standardModal/BasicModal';\nimport styled from 'styled-components/macro';\nimport {\n  secondaryFont,\n  primaryFont,\n  SearchContainerDark,\n  backgroundDark,\n  radioButtonCss,\n  primaryColor,\n} from '../../../../styling/styleUtils';\nimport useFluent from '../../../../hooks/useFluent';\nimport PanelSearch, {Datum} from 'react-panel-search';\nimport useCurrentCityId from '../../../../hooks/useCurrentCityId';\nimport useGlobalLocationData from '../../../../hooks/useGlobalLocationData';\nimport {\n  useHistory,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport queryString from 'query-string';\nimport useQueryParams from '../../../../hooks/useQueryParams';\nimport {RegionGroup} from '../../../dataViz/comparisonBarChart/cityIndustryComparisonQuery';\nimport matchingKeywordFormatter from '../../../../styling/utils/panelSearchKeywordFormatter';\nimport {TooltipTheme} from '../../../general/Tooltip';\nimport {PeerGroup, isValidPeerGroup, CityPeerGroupCounts} from '../../../../types/graphQL/graphQLTypes';\nimport { useQuery, gql } from '@apollo/client';\nimport {CityRoutes} from '../../../../routing/routes';\nimport BenchmarkSVG from '../../../../assets/icons/benchmark_comparator.svg';\n\nconst PEER_GROUP_CITY_COUNT = gql`\n  query GetPeerGroupCityCounts($cityId: Int!) {\n    cityPeerGroupCounts(cityId: $cityId) {\n      cityId\n      globalPop\n      globalIncome\n      globalEucdist\n      regionalPop\n      regionalIncome\n      regionalEucdist\n      region\n    }\n  }\n`;\n\nexport const usePeerGroupCityCount = (cityId: string | null) => useQuery<SuccessResponse, { cityId: number }>(PEER_GROUP_CITY_COUNT, {\n  variables: {\n    cityId: cityId !== null ? parseInt(cityId, 10) : 0,\n  },\n});\n\nenum PeerGroupCountFields {\n  globalPop = 'globalPop',\n  globalIncome = 'globalIncome',\n  globalEucdist = 'globalEucdist',\n  regionalPop = 'regionalPop',\n  regionalIncome = 'regionalIncome',\n  regionalEucdist = 'regionalEucdist',\n  region = 'region',\n}\n\ninterface SuccessResponse {\n  cityPeerGroupCounts: CityPeerGroupCounts;\n}\n\nconst mobileWidth = 750; // in px\n\nconst Root = styled.div`\n  font-family: ${secondaryFont};\n  color: #fff;\n  width: 800px;\n  max-width: 100%;\n  height: 750px;\n  max-height: 90vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  box-sizing: border-box;\n\n  @media (max-width: 990px), (max-height: 800px) {\n    width: 100%;\n    height: auto;\n    max-height: initial;\n    padding: 1rem;\n  }\n`;\n\nconst benchmarkButtonClassName = 'benchmark-open-modal-button-class-name';\n\nconst H1 = styled.h1`\n  text-transform: uppercase;\n  font-weight: 400;\n  text-align: center;\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n\n  @media (max-width: 990px), (max-height: 800px) {\n    font-size: 1.5rem;\n    margin-top: 1rem;\n    margin-bottom: 1rem;\n  }\n`;\n\nconst Icon = styled.img`\n    width: 2.5rem;\n    height: 2.5rem;\n    position: relative;\n    top: 0.75rem;\n    margin-right: 1rem;\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: 1.5fr auto 1fr;\n  grid-gap: 2rem;\n\n  @media (max-width: ${mobileWidth}px) {\n    grid-template-columns: auto;\n    grid-template-rows: auto auto auto;\n  }\n\n  .react-panel-search-search-bar-input {\n    background-color: ${backgroundDark};\n  }\n\n  .react-panel-search-highlighted-item {\n    background-color: rgba(255, 255, 255, 0.25);\n  }\n\n  .react-panel-search-search-results {\n    background-color: ${backgroundDark};\n  }\n`;\n\nconst GlobalVRegionalGrid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 0.75rem;\n`;\n\nconst GroupContainer = styled.ul`\n  border-top: solid 1px #fff;\n  padding: 0;\n  margin: 0;\n`;\n\nconst ContainerTitle = styled.h3`\n  color: #fff;\n  font-weight: 400;\n  margin: 0 0 0.4rem;\n  font-family: ${primaryFont};\n\n  @media (max-width: 990px), (max-height: 800px) {\n    font-size: 1.1rem;\n  }\n`;\n\nconst Or = styled.div`\n  text-transform: uppercase;\n  font-size: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-family: ${primaryFont};\n\n  &:before,\n  &:after {\n    content: '';\n    height: auto;\n    flex-grow: 1;\n    width: 0;\n    border-right: solid 2px #fff;\n  }\n\n  &:before {\n    margin-bottom: 0.5rem;\n  }\n\n  &:after {\n    margin-top: 0.5rem;\n  }\n\n  @media (max-width: 990px), (max-height: 800px) {\n    font-size: 1.1rem;\n  }\n\n  @media (max-width: ${mobileWidth}px) {\n    flex-direction: row;\n\n    &:before,\n    &:after {\n      content: '';\n      height: 0;\n      width: 3rem;\n      border-top: solid 2px #fff;\n    }\n\n    &:before {\n      margin-bottom: 0;\n      margin-right: 0.5rem;\n    }\n\n    &:after {\n      margin-left: 0.5rem;\n      margin-top: 0;\n    }\n  }\n`;\n\nconst ContinueButtonContainer = styled.div`\n  margin-top: auto;\n  display: flex;\n  justify-content: flex-end;\n  padding: 0 1rem 1rem;\n  position: sticky;\n  bottom: 0;\n  pointer-events: none;\n\n  @media (max-width: 750px) {\n    position: relative;\n    padding-top: 1rem;\n  }\n\n  @media (max-height: 800px) {\n    margin-top: 0;\n  }\n`;\n\nconst ContinueButton = styled.button`\n  background-color: transparent;\n  border: solid 1px #fff;\n  text-transform: uppercase;\n  color: #fff;\n  font-family: ${secondaryFont};\n  font-size: 1.25rem;\n  padding: 0.6rem 1rem;\n  transition: opacity 0.2s ease-in-out;\n  background-color: ${backgroundDark};\n  pointer-events: all;\n\n  &:hover:not(:disabled) {\n    background-color: #fff;\n    color: ${backgroundDark};\n  }\n\n  &:disabled {\n    cursor: not-allowed;\n    color: rgba(255, 255, 255, 0.5);\n    border-color: rgba(255, 255, 255, 0.5);\n  }\n\n  @media (max-width: 990px), (max-height: 800px) {\n    font-size: 1rem;\n  }\n`;\n\nconst GroupItem = styled.li`\n  margin-bottom: 0.5rem;\n  display: block;\n  list-style: none;\n  font-size: 1rem;\n  font-family: ${primaryFont};\n\n  @media (max-width: 990px), (max-height: 800px) {\n    font-size: 0.8rem;\n  }\n`;\n\nconst GroupRadio = styled.div`\n  ${radioButtonCss}\n  cursor: pointer;\n  padding: 0.5rem 0.25rem;\n\n  small {\n    color: #b9c4ce;\n  }\n\n  &:hover {\n    background-color: #fff;\n\n    small, em {\n      color: inherit;\n    }\n  }\n\n  &:before {\n    margin-right: 16px;\n  }\n\n`;\nconst AboutText = styled.p`\n  color: #fff;\n  padding: 0 1.5rem;\n  margin: 0 0 1rem;\n  font-family: ${primaryFont};\n\n  @media (max-width: 990px), (max-height: 800px) {\n    font-size: 0.8rem;\n  }\n`;\n\nconst Recommended = styled.em`\n  font-size: smaller;\n  color: ${primaryColor};\n`;\n\nexport const defaultBenchmark = PeerGroup.GlobalPopulation;\n\nexport enum ComparisonType {\n  Relative = 'relative', // RCA\n  Absolute = 'absolute', // Econ composition\n}\n\ninterface Props {\n  closeModal: (value: string | undefined) => void;\n  data: Datum[];\n  comparisonType: ComparisonType;\n}\n\nconst AddComparisonModal = (props: Props) => {\n  const { closeModal, data, comparisonType} = props;\n  const getString = useFluent();\n  const cityId = useCurrentCityId();\n  const continueButtonRef = useRef<HTMLButtonElement | null>(null);\n  const {data: globalData} = useGlobalLocationData();\n  const history = useHistory();\n  const { benchmark, ...otherParams } = useQueryParams();\n  const { data: counts } = usePeerGroupCityCount(cityId);\n  let intialSelected: Datum | null | RegionGroup | PeerGroup = defaultBenchmark;\n  if (isValidPeerGroup(benchmark) || benchmark === RegionGroup.World) {\n    intialSelected = benchmark as PeerGroup;\n  }\n  const [selected, setSelected] = useState<Datum | null | RegionGroup | PeerGroup>(intialSelected);\n\n  const currentCity = globalData ? globalData.cities.find(c => c.cityId === cityId) : undefined;\n  const name = currentCity ? currentCity.name : '';\n\n  const selectCity = (city: Datum | null) => {\n    setSelected(city);\n    if (continueButtonRef && continueButtonRef.current) {\n      const node = continueButtonRef.current;\n      setTimeout(() => {\n        node.focus();\n      }, 0);\n    }\n  };\n\n  const onContinue = () => {\n    if (selected && typeof selected === 'object') {\n      const query = queryString.stringify({...otherParams, benchmark: selected.id});\n      const newUrl = query ? history.location.pathname + '?' + query :history.location.pathname;\n      history.push(newUrl);\n      closeModal(selected.id.toString());\n    } else if (typeof selected === 'string') {\n      const query = queryString.stringify({...otherParams, benchmark: selected});\n      const newUrl = query ? history.location.pathname + '?' + query :history.location.pathname;\n      history.push(newUrl);\n      closeModal(RegionGroup.World);\n    }\n  };\n\n  const prevValue = benchmark;\n  const closeModalWithoutConfirming = prevValue === undefined\n    ? () => closeModal(defaultBenchmark)\n    : () => closeModal(prevValue);\n\n  const title = comparisonType === ComparisonType.Relative\n    ? getString('global-ui-benchmark-title')\n    : getString('global-ui-compare-title', {name});\n\n  const selectCityTitle = comparisonType === ComparisonType.Relative\n    ? getString('global-ui-select-benchmark-city')\n    : getString('global-ui-select-a-city-name');\n\n  const about = comparisonType === ComparisonType.Relative\n    ? (\n      <Switch>\n        <Route path={CityRoutes.CityGrowthOpportunities} render={() => (\n          <AboutText\n            dangerouslySetInnerHTML={{__html: getString('global-ui-benchmark-about-alt-1')}}\n          />\n        )} />\n        <Route render={() => (\n          <AboutText\n            dangerouslySetInnerHTML={{__html: getString('global-ui-benchmark-about')}}\n          />\n        )} />\n      </Switch>\n    ) : null;\n\n  const getCount = (f: PeerGroupCountFields) => {\n    if (counts && counts.cityPeerGroupCounts) {\n      return counts.cityPeerGroupCounts[f]\n        ? <small>({counts.cityPeerGroupCounts[f]} cities)</small> : <small>(0 cities)</small>;\n    }\n    return null;\n  };\n\n  return (\n    <BasicModal onClose={closeModalWithoutConfirming} width={'auto'} height={'inherit'}>\n      <Root>\n        <H1\n          style={comparisonType === ComparisonType.Absolute ? {marginBottom: '4rem'} : undefined}\n          className={comparisonType === ComparisonType.Absolute ? undefined : benchmarkButtonClassName}\n        >\n          <Icon src={BenchmarkSVG} />\n          {title}:\n        </H1>\n        {about}\n        <SearchContainerDark>\n          <Grid>\n          <div>\n            <GlobalVRegionalGrid>\n              <div>\n                <ContainerTitle>{getString('global-text-global-peers')}</ContainerTitle>\n                <GroupContainer>\n                    <GroupItem>\n                      <GroupRadio\n                        onClick={() => setSelected(PeerGroup.GlobalPopulation)}\n                        $checked={selected === PeerGroup.GlobalPopulation}\n                      >\n                        <div>\n                          {getString('global-text-similar-population')}\n                          <br />\n                          {getCount(PeerGroupCountFields.globalPop)}\n                          <br />\n                          <Recommended>\n                            *{getString('global-ui-recommended')}\n                          </Recommended>\n                        </div>\n                      </GroupRadio>\n                    </GroupItem>\n                    <GroupItem>\n                      <GroupRadio\n                        onClick={() => setSelected(PeerGroup.GlobalIncome)}\n                        $checked={selected === PeerGroup.GlobalIncome}\n                      >\n                        <div>\n                          {getString('global-text-similar-income')}\n                          <br />\n                          {getCount(PeerGroupCountFields.globalIncome)}\n                        </div>\n                      </GroupRadio>\n                    </GroupItem>\n                    <GroupItem>\n                      <GroupRadio\n                        onClick={() => setSelected(PeerGroup.GlobalEuclideanDistance)}\n                        $checked={selected === PeerGroup.GlobalEuclideanDistance}\n                      >\n                        <div>\n                          {getString('global-text-similar-proximity')}\n                          <br />\n                          {getCount(PeerGroupCountFields.globalEucdist)}\n                        </div>\n                      </GroupRadio>\n                    </GroupItem>\n                    <GroupItem>\n                      <GroupRadio\n                        onClick={() => setSelected(RegionGroup.World)}\n                        $checked={selected === RegionGroup.World}\n                      >\n                        <div>\n                          {getString('global-text-all-regional-peers')} (global)\n                          <br />\n                          <small>({globalData?.cities.length ? globalData.cities.length : '---'} cities)</small>\n                        </div>\n                      </GroupRadio>\n                    </GroupItem>\n                  </GroupContainer>\n                </div>\n                <div>\n                <ContainerTitle>{getString('global-text-regional-peers')}</ContainerTitle>\n                  <GroupContainer>\n                    <GroupItem>\n                      <GroupRadio\n                        onClick={() => setSelected(PeerGroup.RegionalPopulation)}\n                        $checked={selected === PeerGroup.RegionalPopulation}\n                      >\n                        <div>\n                          {getString('global-text-similar-population')}\n                          <br />\n                          {getCount(PeerGroupCountFields.regionalPop)}\n                        </div>\n                      </GroupRadio>\n                    </GroupItem>\n                    <GroupItem>\n                      <GroupRadio\n                        onClick={() => setSelected(PeerGroup.RegionalIncome)}\n                        $checked={selected === PeerGroup.RegionalIncome}\n                      >\n                        <div>\n                          {getString('global-text-similar-income')}\n                          <br />\n                          {getCount(PeerGroupCountFields.regionalIncome)}\n                        </div>\n                      </GroupRadio>\n                    </GroupItem>\n                    <GroupItem>\n                      <GroupRadio\n                        onClick={() => setSelected(PeerGroup.RegionalEuclideanDistance)}\n                        $checked={selected === PeerGroup.RegionalEuclideanDistance}\n                      >\n                        <div>\n                          {getString('global-text-similar-proximity')}\n                          <br />\n                          {getCount(PeerGroupCountFields.regionalEucdist)}\n                        </div>\n                      </GroupRadio>\n                    </GroupItem>\n                    <GroupItem>\n                      <GroupRadio\n                        onClick={() => setSelected(PeerGroup.Region)}\n                        $checked={selected === PeerGroup.Region}\n                      >\n                        <div>\n                          {getString('global-text-all-regional-peers')} (regional)\n                          <br />\n                          {getCount(PeerGroupCountFields.region)}\n                        </div>\n                      </GroupRadio>\n                    </GroupItem>\n                  </GroupContainer>\n                </div>\n              </GlobalVRegionalGrid>\n            </div>\n            <Or>{getString('global-ui-or')}</Or>\n            <div>\n              <ContainerTitle>{selectCityTitle}</ContainerTitle>\n              <PanelSearch\n                data={data.filter(({id}) => id !== cityId)}\n                topLevelTitle={getString('global-text-countries')}\n                disallowSelectionLevels={['0']}\n                defaultPlaceholderText={getString('global-ui-type-a-city-name')}\n                showCount={true}\n                resultsIdentation={1.75}\n                neverEmpty={false}\n                maxResults={500}\n                selectedValue={typeof selected === 'object' ? selected : null}\n                onSelect={selectCity}\n                focusOnRender={window.innerHeight > 800 && window.innerWidth > 990}\n                matchingKeywordFormatter={matchingKeywordFormatter(TooltipTheme.Dark)}\n              />\n            </div>\n          </Grid>\n        </SearchContainerDark>\n        <ContinueButtonContainer>\n          <ContinueButton\n            onClick={onContinue}\n            ref={continueButtonRef}\n            disabled={!selected}\n          >\n            {getString('global-ui-continue')}\n          </ContinueButton>\n        </ContinueButtonContainer>\n      </Root>\n    </BasicModal>\n  );\n};\n\nexport default AddComparisonModal;\n","import { useQuery, gql } from '@apollo/client';\nimport {\n  CityIndustryYear,\n  CityClusterYear,\n  DigitLevel,\n  PeerGroup,\n  CompositionType,\n  defaultCompositionType,\n  NaicsRcaCalculation,\n  ClusterRcaCalculation,\n  isValidPeerGroup,\n} from '../../../../types/graphQL/graphQLTypes';\nimport useCurrentCityId from '../../../../hooks/useCurrentCityId';\nimport {defaultYear} from '../../../../Utils';\nimport useQueryParams from '../../../../hooks/useQueryParams';\nimport useCurrentBenchmark from '../../../../hooks/useCurrentBenchmark';\n\nexport enum RegionGroup {\n  World = 'world',\n  SimilarCities = 'similarcities',\n}\n\nconst CLUSTER_INTENSITY_QUERY = gql`\n  query GetClusterIntesityData(\n    $cityId: Int!,\n    $year: Int!,\n    $level: Int!,\n    $peerGroup: String,\n    $partnerCityIds: [Int],\n    $variable: String,\n  ) {\n    clusterData: cityClusterYearList(cityId: $cityId, year: $year) {\n      clusterId\n      level\n      numEmploy\n      id\n    }\n    naicsData: cityIndustryYearList(cityId: $cityId, year: $year, level: $level) {\n      naicsId\n      numCompany\n      numEmploy\n      id\n    }\n    naicsRca(\n      cityId: $cityId,\n      peerGroup: $peerGroup,\n      partnerCityIds: $partnerCityIds,\n      year: $year,\n      naicsLevel: $level,\n      variable: $variable,\n    ) {\n      naicsId\n      rca\n    }\n    c1Rca: clusterRca(\n      cityId: $cityId,\n      peerGroup: $peerGroup,\n      partnerCityIds: $partnerCityIds,\n      year: $year,\n      clusterLevel: 1,\n      variable: $variable,\n    ) {\n      clusterId\n      rca\n    }\n    c3Rca: clusterRca(\n      cityId: $cityId,\n      peerGroup: $peerGroup,\n      partnerCityIds: $partnerCityIds,\n      year: $year,\n      clusterLevel: 3,\n      variable: $variable,\n    ) {\n      clusterId\n      rca\n    }\n  }\n`;\n\ninterface ClusterData {\n  clusterId: CityClusterYear['clusterId'];\n  level: CityClusterYear['level'];\n  numEmploy: CityClusterYear['numEmploy'];\n}\n\ninterface NaicsData {\n  naicsId: CityIndustryYear['naicsId'];\n  numCompany: CityIndustryYear['numCompany'];\n  numEmploy: CityIndustryYear['numEmploy'];\n}\n\ninterface NaicsRca {\n  naicsId: NaicsRcaCalculation['naicsId'];\n  rca: NaicsRcaCalculation['rca'];\n}\n\ninterface ClusterRca {\n  clusterId: ClusterRcaCalculation['clusterId'];\n  rca: ClusterRcaCalculation['rca'];\n}\n\nexport interface SuccessResponse {\n  clusterData: ClusterData[];\n  naicsData: NaicsData[];\n  naicsRca: NaicsRca[];\n  c1Rca: ClusterRca[];\n  c3Rca: ClusterRca[];\n}\n\ninterface Variables {\n  cityId: number | null;\n  year: number;\n  level: DigitLevel;\n  peerGroup: PeerGroup | '';\n  partnerCityIds: [number] | [];\n  variable: 'employ' | 'company';\n}\n\nexport const useClusterIntensityQuery = (variables: Variables) =>\n  useQuery<SuccessResponse, Variables>(CLUSTER_INTENSITY_QUERY, { variables });\n\nconst useRCAData = (level: DigitLevel) => {\n  const cityId = useCurrentCityId();\n  const { composition_type } = useQueryParams();\n  const {benchmark} = useCurrentBenchmark();\n\n\n  const defaultCompositionVariable = defaultCompositionType === CompositionType.Companies ? 'company' : 'employ';\n  let variable: 'employ' | 'company' = defaultCompositionVariable;\n  if (composition_type === CompositionType.Companies) {\n    variable = 'company';\n  } else if (composition_type === CompositionType.Employees) {\n    variable = 'employ';\n  }\n\n  const peerGroup = isValidPeerGroup(benchmark) ? benchmark as PeerGroup : '';\n\n  const partnerCityIds: [number] | [] = benchmark !== undefined && !isNaN(parseInt(benchmark, 10))\n    ? [parseInt(benchmark, 10)] : [];\n\n  const {loading, error, data} = useClusterIntensityQuery({\n    cityId: cityId !== null ? parseInt(cityId, 10) : null,\n    year: defaultYear,\n    level,\n    peerGroup,\n    partnerCityIds,\n    variable,\n  });\n\n  return cityId !== null ? {loading, error, data} : {loading: true, error: undefined, data: undefined};\n};\n\nexport default useRCAData;\n","import styled from 'styled-components';\nimport { breakPointValues, breakPoints as globalBreakPoints } from '../../../../../styling/GlobalGrid';\nimport { backgroundMedium, baseColor, primaryColor, secondaryFont } from '../../../../../styling/styleUtils';\n\nconst breakPoints = {\n  medium: 'screen and (max-width: 1250px)',\n  small: `screen and (max-width: 1070px) and (min-width: ${breakPointValues.width.small}px)`,\n};\n\nexport const TitleBase = styled.h2`\n  background-color: ${backgroundMedium};\n  font-family: ${secondaryFont};\n  font-size: 0.9rem;\n  margin: 0 0.25rem 0.25rem;\n  padding: 0.5rem 0 0.5rem 0.35rem;\n  height: 1.75rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  white-space: nowrap;\n\n  @media (max-height: 800px) {\n    font-size: .85rem;\n    padding: 0.25rem 0 0.25rem 0.15rem;\n  }\n\n  @media ${breakPoints.medium} {\n    font-size: .85rem;\n    padding: 0.25rem 0 0.25rem 0.15rem;\n    height: auto;\n    white-space: initial;\n    text-align: center;\n  }\n\n  @media ${breakPoints.small} {\n    font-size: .75rem;\n    height: auto;\n    white-space: initial;\n    flex-direction: column;\n  }\n\n  @media ${globalBreakPoints.small} {\n    flex-direction: row;\n  }\n`;\n\nexport const WrappableText = styled.div`\n  white-space: normal;\n`;\n\nexport const YearText = styled.small`\n  color: ${primaryColor};\n  font-size: 0.7rem;\n  line-height: 0;\n  font-weight: 600;\n  display: inline-block;\n  padding: 0.5rem;\n  white-space: nowrap;\n\n  @media ${breakPoints.medium} {\n    font-size: .65rem;\n  }\n`;\n\nexport const Icon = styled.img`\n  width: 1.75rem;\n  margin-right: 0.5rem;\n\n  @media (max-height: 800px) {\n    width: 1rem;\n  }\n\n  @media ${breakPoints.small} {\n    display: none;\n  }\n`;\n\nexport const ValueBase = styled.h3`\n  color: ${baseColor};\n  font-weight: 400;\n  font-variant: small-caps;\n  font-size: 1.8rem;\n  text-align: center;\n  margin: 0;\n\n  @media ${breakPoints.medium}, (max-height: 800px) {\n    font-size: 1.2rem;\n  }\n\n  @media ${globalBreakPoints.small} {\n    margin-bottom: 1.5rem;\n  }\n`;\n\nexport const ListItem = styled.div`\n  font-size: 1.1rem;\n\n  @media ${breakPoints.medium}, (max-height: 800px) {\n    font-size: 0.85rem;\n  }\n`;","import React from 'react';\nimport { usePeerGroupCityCount } from '../../../../../../components/navigation/secondaryHeader/comparisons/AddComparisonModal';\nimport useCurrentCity from '../../../../../../hooks/useCurrentCity';\nimport { TitleBase, YearText, Icon, ValueBase, ListItem } from '../styleUtils';\nimport PopulationSVG from '../../../../../../assets/icons/population.svg';\nimport RankingSVG from '../../../../../../assets/icons/ranking.svg';\nimport GdpPerCapitaSVG from '../../../../../../assets/icons/gdppercapita.svg';\nimport DataReliabilitySVG from '../../../../../../assets/icons/datareliability.svg';\nimport { defaultYear, formatNumberLong, numberWithCommas } from '../../../../../../Utils';\nimport useFluent, { ordinalNumber } from '../../../../../../hooks/useFluent';\nimport { DataFlagType } from '../../../../../../types/graphQL/graphQLTypes';\nimport styled from 'styled-components';\nimport Tooltip from '../../../../../../components/general/Tooltip';\nimport SimpleTextLoading from '../../../../../../components/transitionStateComponents/SimpleTextLoading';\n\nconst DataLegend = styled.div`\n  margin-right: 0.2rem;\n  display: inline-flex;\n  flex-direction: row-reverse;\n  align-items: center;\n`;\n\nconst SmallDot = styled.div`\n  width: .45rem;\n  height: .45rem;\n  border-radius: 1000px;\n  margin-right: 0.2rem;\n`;\n\nconst LargeDot = styled.div`\n  width: 0.9rem;\n  height: 0.9rem;\n  border-radius: 1000px;\n  margin-right: 0.075rem;\n`;\n\nconst TopRow = () => {\n  const {loading: cityLoading, city} = useCurrentCity();\n  const { loading, error, data } = usePeerGroupCityCount(city && city.cityId ? city.cityId : null);\n  const getString = useFluent();\n\n  let population: React.ReactElement<any> | null;\n  let gdppc: React.ReactElement<any> | null;\n  let flagColor: React.ReactElement<any> | null = null;\n  let alertTitle: string = '---';\n  let description: string = '---';\n  let regionPopRank: string = '---';\n  let regionGdppcRank: string = '---';\n  if (loading || cityLoading) {\n    population = <SimpleTextLoading />;\n    gdppc = <SimpleTextLoading />;\n  } else if (error) {\n    console.error(error);\n    population = <>---</>;\n    gdppc = <>---</>;\n  } else if (data && city) {\n    const dataFlag = city.dataFlag;\n    if (dataFlag === DataFlagType.GREEN) {\n      flagColor = (\n        <DataLegend>\n          <SmallDot style={{ backgroundColor: '#B70808' }} />\n          <SmallDot style={{ backgroundColor: '#9A561A' }} />\n          <SmallDot style={{ backgroundColor: '#71670F' }} />\n          <LargeDot style={{ backgroundColor: '#137737' }} />\n        </DataLegend>\n      );\n      alertTitle = getString('data-disclaimer-green-title');\n      description = getString('data-disclaimer-green-desc');\n    } else if (dataFlag === DataFlagType.YELLOW) {\n      flagColor = (\n        <DataLegend>\n          <SmallDot style={{ backgroundColor: '#B70808' }} />\n          <SmallDot style={{ backgroundColor: '#9A561A' }} />\n          <LargeDot style={{ backgroundColor: '#71670F' }} />\n          <SmallDot style={{ backgroundColor: '#137737' }} />\n        </DataLegend>\n      );\n      alertTitle = getString('data-disclaimer-yellow-title');\n      description = getString('data-disclaimer-yellow-desc');\n    } else if (dataFlag === DataFlagType.ORANGE) {\n      flagColor = (\n        <DataLegend>\n          <SmallDot style={{ backgroundColor: '#B70808' }} />\n          <LargeDot style={{ backgroundColor: '#9A561A' }} />\n          <SmallDot style={{ backgroundColor: '#71670F' }} />\n          <SmallDot style={{ backgroundColor: '#137737' }} />\n        </DataLegend>\n      );\n      alertTitle = getString('data-disclaimer-orange-title');\n      description = getString('data-disclaimer-orange-desc');\n    } else if (dataFlag === DataFlagType.RED) {\n      flagColor = (\n        <DataLegend>\n          <LargeDot style={{ backgroundColor: '#B70808' }} />\n          <SmallDot style={{ backgroundColor: '#9A561A' }} />\n          <SmallDot style={{ backgroundColor: '#71670F' }} />\n          <SmallDot style={{ backgroundColor: '#137737' }} />\n        </DataLegend>\n      );\n      alertTitle = getString('data-disclaimer-red-title');\n      description = getString('data-disclaimer-red-desc');\n    }\n    population = <>{formatNumberLong(city.population ? city.population : 0)}</>;\n    gdppc = <>${numberWithCommas(city.gdppc ? Math.round(city.gdppc) : 0)}</>;\n    regionPopRank = ordinalNumber([city.regionPopRank ? city.regionPopRank : 0]).toUpperCase();\n    regionGdppcRank = ordinalNumber([city.regionGdppcRank ? city.regionGdppcRank : 0]).toUpperCase();\n  } else {\n    population = <>---</>;\n    gdppc = <>---</>;\n  }\n\n  return (\n    <>\n      <div>\n        <TitleBase>\n          <Icon src={PopulationSVG} />\n          {getString('global-text-population')}\n          <YearText>\n            2015\n          </YearText>\n        </TitleBase>\n        <ValueBase>\n          {population}\n        </ValueBase>\n      </div>\n      <div>\n        <TitleBase>\n          <Icon src={GdpPerCapitaSVG} />\n          {getString('global-text-gdp-per-capita')}\n          <YearText>\n            2015\n            <Tooltip\n              explanation={getString('global-text-gdp-per-capita-about')}\n            />\n          </YearText>\n        </TitleBase>\n        <ValueBase>\n          {gdppc}\n        </ValueBase>\n      </div>\n      <div>\n        <TitleBase>\n          <Icon src={RankingSVG} />\n          {getString('city-overview-ranking-title')}*\n          <YearText>\n            {defaultYear}\n          </YearText>\n        </TitleBase>\n        <ValueBase>\n          <ListItem>\n            {getString('city-overview-ranking-pop', { value: regionPopRank })}\n          </ListItem>\n          <ListItem>\n            {getString('city-overview-ranking-gdp', { value: regionGdppcRank })}\n          </ListItem>\n        </ValueBase>\n      </div>\n      <div>\n        <TitleBase>\n          <Icon src={DataReliabilitySVG} />\n          {getString('city-overview-data-quality')}\n          <YearText>\n            {defaultYear}\n            <Tooltip\n              explanation={<div dangerouslySetInnerHTML={{ __html: description }} />}\n            />\n          </YearText>\n        </TitleBase>\n        <ValueBase>\n          {flagColor}\n          {alertTitle}\n        </ValueBase>\n      </div>\n    </>\n  );\n};\n\nexport default TopRow;\n","import useQueryParams from './useQueryParams';\nimport useGlobalLocationData from './useGlobalLocationData';\nimport {PeerGroup, isValidPeerGroup} from '../types/graphQL/graphQLTypes';\nimport useFluent from '../hooks/useFluent';\nimport { defaultBenchmark } from '../components/navigation/secondaryHeader/comparisons/AddComparisonModal';\nimport { RegionGroup } from '../components/dataViz/comparisonBarChart/cityIndustryComparisonQuery';\n\nconst useCurrentBenchmark = () => {\n  const params = useQueryParams();\n  const benchmark = params.benchmark ? params.benchmark : defaultBenchmark;\n  const getString = useFluent();\n  const {data} = useGlobalLocationData();\n\n  const selectedValue = data && data.cities ? data.cities.find(({cityId}) => cityId === benchmark) : undefined;\n  const country = selectedValue && data && data.cities\n    ? data.countries.find(({countryId}) =>\n      selectedValue.countryId && countryId === selectedValue.countryId.toString()) : undefined;\n  let benchmarkName = selectedValue\n    ? selectedValue.name + (country ? ', ' + country.nameShortEn : '')\n    : '---';\n  let benchmarkNameShort = selectedValue ? selectedValue.name : '---';\n  if (isValidPeerGroup(benchmark) || benchmark === RegionGroup.World) {\n    benchmarkName = getString('global-formatted-peer-groups', {type: benchmark});\n    benchmarkNameShort = getString('global-formatted-peer-groups-short', {type: benchmark});\n  }\n\n  return {\n    benchmarkName,\n    benchmarkNameShort,\n    benchmark: benchmark as string | PeerGroup,\n  };\n};\n\nexport default useCurrentBenchmark;\n","import React, { useState } from 'react';\nimport useFluent from '../../../hooks/useFluent';\nimport styled from 'styled-components';\nimport { backgroundDark, benchmarkColor, lightBorderColor, primaryFont, secondaryFont } from '../../../styling/styleUtils';\nimport Tooltip from '../../general/Tooltip';\nimport BenchmarkSVG from '../../../assets/icons/benchmark_comparator.svg';\nimport { breakPoints } from '../../../styling/GlobalGrid';\n\nconst Root = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst ButtonsRoot = styled.div`\n  padding: 0 0.5rem;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Button = styled.button`\n  pointer-events: all;\n  font-family: ${primaryFont};\n  font-size: 0.75rem;\n  font-weight: 600;\n  text-transform: uppercase;\n  border: solid 1px ${benchmarkColor};\n  background-color: transparent;\n  display: block;\n  width: 100%;\n`;\n\nconst ToggleButton = styled(Button)`\n  border: solid 1px ${lightBorderColor};\n\n  &:hover {\n    background-color: ${lightBorderColor};\n  }\n`;\n\nconst OneTimeTooltip = styled.div`\n  position: absolute;\n  background-color: ${backgroundDark};\n  color: #fff;\n  padding: 0.5rem 0.75rem;\n  font-size: 0.8rem;\n  z-index: 100;\n  pointer-events: all;\n  max-width: 190px;\n  white-space: normal;\n  text-transform: none;\n  font-weight: 400;\n  transform: translateX(calc(100% - 2rem));\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: -0.4rem;\n    margin: auto;\n    width: 0;\n    height: 0;\n    border-top: 0.4rem solid transparent;\n    border-bottom: 0.4rem solid transparent;\n    border-right:0.4rem solid ${backgroundDark};\n  }\n\n  @media ${breakPoints.small} {\n    transform: translate(-8%, -76%);\n\n    &:before {\n      width: 0;\n      height: 0;\n      left: 0;\n      right: 0;\n      top: auto;\n      bottom: -0.4rem;\n      border-left: 0.4rem solid transparent;\n      border-right: 0.4rem solid transparent;\n      border-top: 0.4rem solid ${backgroundDark};\n      border-bottom: none;\n    }\n  }\n`;\n\nconst DismissTooltipButton = styled.button`\n  border: solid 1px #fff;\n  background-color: transparent;\n  color: #fff;\n  font-family: ${primaryFont};\n  font-size: 0.875rem;\n  margin-top: 0.75rem;\n\n  &:hover {\n    background-color: #fff;\n    color: ${backgroundDark};\n  }\n`;\n\nconst Icon = styled.img`\n  width: 1rem;\n  height: 1rem;\n  position: relative;\n  top: 0.25rem;\n  margin-right: 0.25rem;\n`;\n\nconst HighlightedTooltipText = styled.span`\n  font-weight: 600;\n  text-transform: uppercase;\n  font-size: 0.875em;\n  color: ${benchmarkColor};\n  margin: 0 0.2rem;\n  white-space: nowrap;\n`;\n\nconst EquationContainer = styled.div`\n  margin-top: 0.5rem;\n  `;\nconst Division = styled.div`\n  margin-top: 0.25rem;\n  font-size: 0.85em;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  font-family: ${secondaryFont};\n`;\nconst Subtraction = styled.div`\n  margin-top: 0.25rem;\n  font-size: 0.85em;\n  display: flex;\n  text-align: center;\n  font-family: ${secondaryFont};\n`;\nconst Top = styled.div`\n  padding-bottom: 0.1rem;\n  margin-bottom: 0.1rem;\n  border-bottom: solid 1px #333;\n  max-width: min-content;\n  flex-grow: 0;\n  white-space: nowrap;\n`;\nconst Bottom = styled.div`\n`;\n\nconst BenchmarkText = () => {\n  return (\n    <HighlightedTooltipText>\n      <Icon src={BenchmarkSVG} />\n      Change Peer Group\n    </HighlightedTooltipText>\n  );\n};\n\nconst oneTimeTooltipLocalStorageKey = 'benchmarkPresenceToggleAxisOneTimeTooltipLocalStorageKeyv2';\nenum StringBoolean {\n  'TRUE' = 'TRUE',\n  'FALSE' = 'FALSE',\n}\n\nexport enum Highlighted {\n  relative = 'relative',\n  absolute = 'absolute',\n}\n\ninterface Props {\n  togglePresence?: boolean;\n  highlight?: Highlighted;\n  onButtonClick?: (highlighted: Highlighted) => void;\n  showArrows?: boolean;\n}\n\nconst PresenceToggle = (props: Props) => {\n  const {\n    togglePresence, highlight, showArrows, onButtonClick,\n  } = props;\n  const getString = useFluent();\n\n  const initialShowOverviewTooltip = localStorage.getItem(oneTimeTooltipLocalStorageKey) === StringBoolean.TRUE ? false : true;\n  const [showOverviewTooltip, setShowOverviewTooltip] = useState<boolean>(initialShowOverviewTooltip);\n  const dismissOverviewTooltip = () => {\n    setShowOverviewTooltip(false);\n    localStorage.setItem(oneTimeTooltipLocalStorageKey, StringBoolean.TRUE);\n  };\n\n  const highlightedStyles: React.CSSProperties = {\n    backgroundColor: lightBorderColor,\n    borderColor: benchmarkColor,\n  };\n  const relativePresenceTooltip = (\n    <>\n      <div>{getString('global-ui-relative-presence-tooltip')}</div>\n      <EquationContainer>\n        <div>It is calculated as:</div>\n        <Division>\n          <Top>employment share of industry in city</Top>\n          <Bottom>employment share of industry in peer group</Bottom>\n        </Division>\n      </EquationContainer>\n    </>\n  );\n  const absolutePresenceTooltip = (\n    <>\n      <div>{getString('global-ui-absolute-presence-tooltip')}</div>\n      <EquationContainer>\n        <div>It is calculated as:</div>\n        <Subtraction>\n          (employment share of industry in city) - (employment share of industry in peer group)\n        </Subtraction>\n      </EquationContainer>\n    </>\n  );\n  const presenceButtons = togglePresence ? (\n    <>\n      <Tooltip\n        explanation={relativePresenceTooltip}\n      >\n        <ToggleButton\n          style={highlight === Highlighted.relative ? highlightedStyles : undefined}\n          onClick={onButtonClick ? () => onButtonClick(Highlighted.relative) : undefined}\n        >\n          <Tooltip\n            explanation={relativePresenceTooltip}\n          />\n          {getString('global-ui-relative-presence')}\n        </ToggleButton>\n      </Tooltip>\n      <Tooltip\n        explanation={absolutePresenceTooltip}\n      >\n        <ToggleButton\n          style={highlight === Highlighted.absolute ? highlightedStyles : undefined}\n          onClick={onButtonClick ? () => onButtonClick(Highlighted.absolute) : undefined}\n        >\n          <Tooltip\n            explanation={absolutePresenceTooltip}\n          />\n          {getString('global-ui-absolute-presence')}\n        </ToggleButton>\n      </Tooltip>\n    </>\n  ) : (\n    <Tooltip\n      explanation={relativePresenceTooltip}\n    >\n      <Button>\n        <Tooltip\n          explanation={relativePresenceTooltip}\n        />\n        { getString('global-ui-relative-presence') }\n      </Button >\n    </Tooltip >\n  );\n\n  const arrowLeft = showArrows ? '←' : null;\n  const arrowRight = showArrows ? '→' : null;\n\n  const oneTimeTooltip = showOverviewTooltip ? (\n    <OneTimeTooltip>\n      Hover on labels to learn more. Click on <BenchmarkText /> to select a different benchmark.<br />\n      <DismissTooltipButton onClick={dismissOverviewTooltip}>{getString('city-overview-one-time-tooltip-got-it')}</DismissTooltipButton>\n    </OneTimeTooltip>\n  ) : false;\n\n  return (\n    <Root>\n      {arrowLeft}\n        <ButtonsRoot>\n          {presenceButtons}\n        </ButtonsRoot>\n      {arrowRight}\n      {oneTimeTooltip}\n    </Root>\n  );\n};\n\nexport default PresenceToggle;\n","import React from 'react';\nimport { defaultYear } from '../../../../../../Utils';\nimport { DigitLevel, PeerGroup } from '../../../../../../types/graphQL/graphQLTypes';\nimport { useClusterIntensityQuery } from '../../../../../../components/dataViz/industrySpace/chart/useRCAData';\nimport orderBy from 'lodash/orderBy';\nimport useGlobalClusterData from '../../../../../../hooks/useGlobalClusterData';\nimport useGlobalIndustriesData from '../../../../../../hooks/useGlobalIndustriesData';\nimport useFluent from '../../../../../../hooks/useFluent';\nimport { Icon, ListItem, TitleBase, ValueBase, WrappableText, YearText } from '../styleUtils';\nimport Tooltip from '../../../../../../components/general/Tooltip';\nimport TopIndustriesSVG from '../../../../../../assets/icons/topindustries.svg';\nimport TopClustersSVG from '../../../../../../assets/icons/topknowledgecluster.svg';\nimport SimpleTextLoading from '../../../../../../components/transitionStateComponents/SimpleTextLoading';\nimport styled from 'styled-components';\nimport { breakPoints } from '../../../../../../styling/GlobalGrid';\n\nconst Cell = styled.div`\n  max-width: 380px;\n  @media ${breakPoints.small} {\n    max-width: 100%;\n  }\n`;\n\ninterface Props {\n  cityId: string;\n}\n\nconst TopRCA = ({ cityId }: Props) => {\n  const getString = useFluent();\n  const { loading, error, data } = useClusterIntensityQuery({\n    cityId: cityId !== null ? parseInt(cityId, 10) : null,\n    year: defaultYear,\n    level: DigitLevel.Sector,\n    peerGroup: PeerGroup.GlobalPopulation,\n    partnerCityIds: [],\n    variable: 'employ',\n  });\n  const clusters = useGlobalClusterData();\n  const industries = useGlobalIndustriesData();\n\n  let topIndustriesElement: React.ReactElement<any> | null;\n  let topClustersElement: React.ReactElement<any> | null;\n  if (loading || clusters.loading || industries.loading) {\n    topIndustriesElement = <SimpleTextLoading />;\n    topClustersElement = <SimpleTextLoading />;\n  } else if (error) {\n    console.error(error);\n    topIndustriesElement = null;\n    topClustersElement = null;\n  } else if (clusters.error) {\n    console.error(clusters.error);\n    topIndustriesElement = null;\n    topClustersElement = null;\n  } else if (industries.error) {\n    console.error(industries.error);\n    topIndustriesElement = null;\n    topClustersElement = null;\n  } else if (data && clusters.data && industries.data) {\n    const {c3Rca, naicsRca} = data;\n\n    const industriesGreaterThan1 = naicsRca.filter(d => {\n      const industry = industries.data?.industries.find(dd => dd.naicsId === d.naicsId + '');\n      return d.rca && d.rca >= 1 && industry && industry.name !== 'Other';\n    });\n    const topIndustries = orderBy(industriesGreaterThan1 ? industriesGreaterThan1 : naicsRca, ['rca'], ['desc'])\n      .slice(0, industriesGreaterThan1 ? 3 : 1)\n      .map(d => {\n        const industry = industries.data?.industries.find(dd => dd.naicsId === d.naicsId + '');\n        return (\n          <ListItem key={d.naicsId}>\n            {industry?.name?.toUpperCase()}\n          </ListItem>\n        );\n      });\n    topIndustriesElement = <>{topIndustries}</>;\n\n    const clustersGreaterThan1 = c3Rca.filter(d => d.rca && d.rca >= 1);\n    const topClusters = orderBy(clustersGreaterThan1 ? clustersGreaterThan1 : c3Rca, ['rca'], ['desc'])\n      .slice(0, clustersGreaterThan1 ? 3 : 1)\n      .map(d => {\n        const cluster = clusters.data?.clusters.find(dd => dd.clusterId === d.clusterId + '');\n        return (\n          <ListItem key={d.clusterId}>\n            {cluster?.name?.toUpperCase()}\n          </ListItem>\n        );\n      });\n    topClustersElement = <>{topClusters}</>;\n\n  } else {\n    topIndustriesElement = null;\n    topClustersElement = null;\n  }\n\n  return (\n    <>\n      <Cell>\n        <TitleBase>\n          <Icon src={TopIndustriesSVG} />\n          <WrappableText>\n            {getString('city-overview-top-specialized-industries')}**\n          </WrappableText>\n          <YearText>\n            {defaultYear}\n            <Tooltip\n              explanation={\n                <div\n                  dangerouslySetInnerHTML={{ __html: getString('city-overview-top-specialized-industries-tooltip')}}\n                />\n              }\n            />\n          </YearText>\n        </TitleBase>\n        <ValueBase>\n          {topIndustriesElement}\n        </ValueBase>\n      </Cell>\n      <Cell>\n        <TitleBase>\n          <Icon src={TopClustersSVG} />\n          <WrappableText>\n            {getString('city-overview-top-knowledge-clusters')}**\n          </WrappableText>\n          <YearText>\n            {defaultYear}\n            <Tooltip\n              explanation={getString('city-overview-top-knowledge-clusters-tooltip')}\n            />\n          </YearText>\n        </TitleBase>\n        <ValueBase>\n          {topClustersElement}\n        </ValueBase>\n      </Cell>\n    </>\n  );\n};\n\nexport default TopRCA;\n\n","import {\n  CityPartner,\n  CityPartnerEucDistScale,\n} from '../../../types/graphQL/graphQLTypes';\nimport { useQuery, gql } from '@apollo/client';\nimport useCurrentCityId from '../../../hooks/useCurrentCityId';\n\nconst GET_SIMILAR_CITIES_PROXIMITY_QUERY = gql`\n  query GetSimilarCities($cityId: Int) {\n    cities: cityPartnerList (cityId: $cityId){\n      cityId\n      partnerId\n      eucdist\n      id\n    }\n    cityPartnerEucdistScale {\n      minGlobalEucdist\n      p20GlobalEucdist\n      p40GlobalEucdist\n      p60GlobalEucdist\n      p80GlobalEucdist\n      maxGlobalEucdist\n    }\n  }\n`;\n\nexport interface SuccessResponse {\n  cities: {\n    cityId: CityPartner['cityId'];\n    partnerId: CityPartner['partnerId'];\n    eucdist: CityPartner['eucdist'];\n    id: CityPartner['id'];\n  }[];\n  cityPartnerEucdistScale: CityPartnerEucDistScale;\n}\n\nconst useProximityData = () => {\n  const cityId = useCurrentCityId();\n\n  const response = useQuery<SuccessResponse, {cityId: number | null}>(GET_SIMILAR_CITIES_PROXIMITY_QUERY, {\n    variables: {cityId: cityId ? parseInt(cityId, 10) : null},\n  });\n  return response;\n};\n\nexport default useProximityData;","import orderBy from 'lodash/orderBy';\nimport React from 'react';\nimport useProximityData from '../../../../../../components/dataViz/similarCitiesMap/useProximityData';\nimport Tooltip from '../../../../../../components/general/Tooltip';\nimport useCurrentCity from '../../../../../../hooks/useCurrentCity';\nimport useFluent from '../../../../../../hooks/useFluent';\nimport useGlobalLocationData from '../../../../../../hooks/useGlobalLocationData';\nimport { defaultYear } from '../../../../../../Utils';\nimport { Icon, ListItem, TitleBase, ValueBase, YearText } from '../styleUtils';\nimport TopCitiesSVG from '../../../../../../assets/icons/topsimilarcities.svg';\nimport SimpleTextLoading from '../../../../../../components/transitionStateComponents/SimpleTextLoading';\n\nconst TopCities = () => {\n  const getString = useFluent();\n  const {loading, error, data} = useProximityData();\n  const globalLocations = useGlobalLocationData();\n  const currentCity = useCurrentCity();\n  let topCitiesElement: React.ReactElement<any> | null;\n  if (loading || globalLocations.loading || currentCity.loading) {\n    topCitiesElement = <SimpleTextLoading />;\n  } else if (error) {\n    console.error(error);\n    topCitiesElement = null;\n  } else if (globalLocations.error) {\n    console.error(globalLocations.error);\n    topCitiesElement = null;\n  } else if (data && globalLocations.data && currentCity.city) {\n    const minPop = currentCity.city.population ? currentCity.city.population / 2 : 0;\n    const maxPop = currentCity.city.population ? currentCity.city.population * 2 : 0;\n    const topLocations = orderBy(data.cities, ['eucdist'])\n      .map(d => {\n        const city = globalLocations.data?.cities.find(dd => dd.cityId === d.partnerId);\n        return {...d, city};\n      })\n      .filter(d => d.partnerId !== currentCity.city?.cityId && d.city?.population && d.city.population > minPop && d.city.population < maxPop)\n      .slice(0, 3)\n      .map(d => {\n        const country = globalLocations.data?.countries.find(cntry => cntry.countryId === d.city?.countryId + '');\n        const countryText = country ? ', ' + country.code : '';\n        return (\n          <ListItem key={d.city?.cityId}>\n            {d.city?.name?.toUpperCase()}{countryText.toUpperCase()}\n          </ListItem>\n        );\n      });\n    topCitiesElement = <>{topLocations}</>;\n  } else {\n    topCitiesElement = null;\n  }\n  return (\n    <div>\n\n      <TitleBase>\n        <Icon src={TopCitiesSVG} />\n        <div>\n          {getString('city-overview-top-similar-cities')}\n        </div>\n        <YearText>\n          {defaultYear}\n          <Tooltip\n            explanation={getString('city-overview-top-similar-cities-tooltip')}\n          />\n        </YearText>\n      </TitleBase>\n      <ValueBase>\n        {topCitiesElement}\n      </ValueBase>\n    </div>\n  );\n};\n\nexport default TopCities;\n","import React from 'react';\nimport TopRCA from './TopRCA';\nimport useCurrentCityId from '../../../../../../hooks/useCurrentCityId';\nimport TopCities from './TopCities';\n\nconst BottomRow = () => {\n  const cityId = useCurrentCityId();\n\n  if (!cityId) {\n    return null;\n  }\n\n  return (\n    <>\n      <TopRCA cityId={cityId} />\n      <TopCities />\n    </>\n  );\n};\n\nexport default BottomRow;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { usePeerGroupCityCount } from '../../../../../components/navigation/secondaryHeader/comparisons/AddComparisonModal';\nimport useFluent from '../../../../../hooks/useFluent';\nimport useGlobalLocationData from '../../../../../hooks/useGlobalLocationData';\n\n\nconst Root = styled.small`\n  text-align: center;\n  font-size: 0.65rem;\n  width: 100%;\n  display: block;\n`;\n\ninterface Props {\n  cityId: string;\n  regionId: number | null;\n}\n\nconst DisclaimerText = ({cityId, regionId}: Props) => {\n  const getString = useFluent();\n  const { data } = usePeerGroupCityCount(cityId);\n  const globalLocations = useGlobalLocationData();\n\n  let cityPeerGroupCountsRegion: string | number = '---';\n  let regionName: string = '---';\n  if (data && globalLocations.data) {\n    const region = globalLocations.data.regions.find(d => d.regionId === regionId + '');\n    regionName = region && region.regionName ? region.regionName : '';\n    cityPeerGroupCountsRegion = data.cityPeerGroupCounts.region + 1;\n  }\n\n  return (\n    <Root>\n      <div>*{getString('city-overview-ranking-disclaimer', {\n          'city-peer-group-counts-region': cityPeerGroupCountsRegion,\n          'region-name': regionName,\n        })}\n      </div>\n      <div>**{getString('city-overview-benchmark-disclaimer')}</div>\n    </Root>\n  );\n};\n\nexport default DisclaimerText;","import React from 'react';\nimport styled from 'styled-components';\nimport { breakPoints } from '../../../../../styling/GlobalGrid';\nimport TopRow from './topRow';\nimport BottomRow from './bottomRow';\nimport useCurrentCity from '../../../../../hooks/useCurrentCity';\nimport DisclaimerText from './DisclaimerText';\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  gap: 1rem;\n\n  @media (max-width: 1200px), (max-height: 800px) {\n    gap: 0.5rem;\n  }\n`;\n\nconst Row = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n\n  @media ${breakPoints.small} {\n    flex-direction: column;\n  }\n`;\n\n\nconst Widgets = () => {\n  const { city } = useCurrentCity();\n  const disclaimer = city ? (\n    <DisclaimerText\n      cityId={city.cityId}\n      regionId={city.region}\n    />\n  ) : null;\n  return (\n    <Root>\n      <Row>\n        <TopRow />\n      </Row>\n      <Row>\n        <BottomRow />\n      </Row>\n      <Row>\n        {disclaimer}\n      </Row>\n    </Root>\n  );\n};\n\nexport default Widgets;\n","import React from 'react';\nimport useFluent from '../../../../../hooks/useFluent';\nimport styled from 'styled-components';\nimport { primaryColor, secondaryFont } from '../../../../../styling/styleUtils';\nimport { breakPoints } from '../../../../../styling/GlobalGrid';\n\nconst Root = styled.div`\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  padding: 1rem;\n  box-sizing: border-box;\n\n  @media ${breakPoints.small} {\n    position: static;\n    height: auto;\n  }\n`;\n\nconst Title = styled.h1`\n  margin: 0 0 1rem;\n  text-transform: uppercase;\n\n  @media (max-width: 920px), (max-height: 800px) {\n    font-size: 1.25rem;\n  }\n`;\n\nconst SectionHeader = styled.h2`\n  font-size: 1rem;\n  color: ${primaryColor};\n  font-family: ${secondaryFont};\n  margin-bottom: 0.2rem;\n\n  @media (max-width: 920px), (max-height: 800px) {\n    font-size: 0.85rem;\n  }\n`;\n\nconst Section = styled.div`\n  font-size: 0.85rem;\n\n  @media (max-width: 920px), (max-height: 800px) {\n    font-size: 0.75rem;\n  }\n`;\n\nconst Concepts = () => {\n  const getString = useFluent();\n  return (\n    <Root>\n      <Title>{getString('city-overview-metroverse-concepts')}</Title>\n      <SectionHeader>{getString('city-overview-relative-presence-title')}</SectionHeader>\n      <Section dangerouslySetInnerHTML={{ __html: getString('city-overview-relative-presence-desc') }} />\n      <SectionHeader>{getString('city-overview-knowledge-cluster-title')}</SectionHeader>\n      <Section dangerouslySetInnerHTML={{ __html: getString('city-overview-knowledge-cluster-desc') }} />\n      <SectionHeader>{getString('city-overview-industry-space-title')}</SectionHeader>\n      <Section dangerouslySetInnerHTML={{ __html: getString('city-overview-industry-space-desc') }} />\n      <SectionHeader>{getString('city-overview-city-similarity-title')}</SectionHeader>\n      <Section dangerouslySetInnerHTML={{ __html: getString('city-overview-city-similarity-desc') }} />\n    </Root>\n  );\n};\n\nexport default Concepts;\n","import React, {useEffect} from 'react';\nimport mapboxgl from 'mapbox-gl';\n\ninterface Props {\n  map: any;\n}\n\nconst MapSettings = ({map}: Props) => {\n  useEffect(() => {\n    if (map) {\n      map.addControl(new mapboxgl.NavigationControl());\n      map.scrollZoom.disable();\n    }\n  }, [map]);\n  return (\n    <></>\n  );\n};\n\nexport default MapSettings;\n","import React, { useState } from 'react';\nimport ClusterMap from '../../../../../components/map/ClusterLandingMap';\nimport { Layer, Feature } from 'react-mapbox-gl';\nimport {\n  togglePointer,\n  Coordinate,\n} from '../../../../../components/map/Utils';\nimport {\n  secondaryColor,\n  primaryColor,\n} from '../../../../../styling/styleUtils';\nimport { ExtendedSearchDatum, StyledPopup, TootltipTitle } from '../../../../landing/Utils';\nimport { SuccessResponse } from '../../../../landing';\nimport MapSettings from './MapSettings';\nimport { MapContext } from 'react-mapbox-gl';\n\ninterface ClusterFeatures {\n  type: 'Feature';\n  properties: {\n    id: string,\n  };\n  geometry: {\n    coordinates: Coordinate,\n  };\n}\n\ninterface MapData {\n  features: React.ReactElement<any>[];\n  geoJsonClusterData: {\n    type: string,\n    features: ClusterFeatures[],\n  };\n}\n\nexport interface BoundsConfig {\n  bounds: [Coordinate, Coordinate];\n  padding: { top: number, left: number, right: number, bottom: number };\n}\n\ninterface Props {\n  loading: boolean;\n  error: any;\n  data: SuccessResponse | undefined;\n  currentCityId: string | null;\n  fitBounds: BoundsConfig;\n}\n\n\nconst mapRenderProps = (mapEl: any) => {\n  return (\n    <MapSettings\n      map={mapEl}\n    />\n  );\n};\n\nconst CityMap = (props: Props) => {\n  const { loading, error, data, currentCityId, fitBounds } = props;\n\n  let mapData: MapData = {\n    features: [],\n    geoJsonClusterData: {\n      type: 'FeatureCollection',\n      features: [],\n    },\n  };\n\n  const [hovered, setHovered] = useState<ExtendedSearchDatum | null>(null);\n\n  if (data !== undefined) {\n    const features: React.ReactElement<any>[] = [];\n    const clusterFeatures: ClusterFeatures[] = [];\n    const { cities, countries } = data;\n    cities.forEach(city => {\n      const {\n        cityId, name, centroidLon, countryId, geometry,\n        population15, gdppc, nameList,\n      } = city;\n      const coordinates: Coordinate[][][] = geometry ? JSON.parse(geometry).coordinates : [];\n      const northernTerminus = Math.max(...coordinates[0][0].map(coord => coord[1]));\n      const center: Coordinate = [centroidLon ? centroidLon : 0, northernTerminus];\n      const parent = countries.find(c => parseInt(c.countryId, 10) === countryId);\n      const countryName = parent && parent.nameShortEn ? parent.nameShortEn : '';\n      const population = population15 ? population15 : 0;\n      const gdp = gdppc && !isNaN(gdppc) ? parseFloat(gdppc.toFixed(2)) : 0;\n      const id = cityId;\n      const searchDatum: ExtendedSearchDatum = {\n        id,\n        title: name + ', ' + countryName,\n        parent_id: countryId,\n        level: '1',\n        center,\n        coordinates: coordinates[0][0],\n        population: Math.round(population),\n        gdp,\n        keywords: nameList ? nameList : undefined,\n      };\n      const onMouseEnter = (event: any) => {\n        setHovered(searchDatum);\n        togglePointer(event.map, 'pointer');\n      };\n      const onMouseLeave = (event: any) => {\n        setHovered(null);\n        togglePointer(event.map, '');\n      };\n      features.push(\n        <Feature\n          coordinates={coordinates[0]}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n          key={'geojson-' + id}\n        />,\n      );\n      clusterFeatures.push({\n        type: 'Feature',\n        properties: { id },\n        geometry: { coordinates: center },\n      });\n    });\n    const geoJsonClusterData = {\n      type: 'FeatureCollection',\n      features: clusterFeatures,\n    };\n    mapData = { features, geoJsonClusterData };\n  }\n\n  const hoveredTooltipPopup = hovered ? (\n    <StyledPopup\n      coordinates={hovered.center}\n    >\n      <TootltipTitle>\n        {hovered.title}\n      </TootltipTitle>\n    </StyledPopup>\n  ) : null;\n\n  let mapContent: React.ReactElement<any>;\n  if (loading === true) {\n    mapContent = <></>;\n  } else if (error !== undefined) {\n    console.error(error);\n    mapContent = <></>;\n  } else if (data !== undefined) {\n    mapContent = (\n      <>\n        <Layer\n          type='fill'\n          id={'primary-map-geojson-layer'}\n          paint={{\n            'fill-color': primaryColor,\n          }}\n          before={'road-simple'}\n        >\n          {mapData.features}\n        </Layer>\n\n        <Layer\n          type='fill'\n          id={'highlighted-geojson-layer'}\n          paint={{\n            'fill-color': secondaryColor,\n          }}\n          before={'road-simple'}\n        >\n          {mapData.features.filter(({ key }) => (hovered && key === 'geojson-' + hovered.id) ||\n            ('geojson-' + currentCityId === key))}\n        </Layer>\n        {hoveredTooltipPopup}\n      </>\n    );\n  } else {\n    mapContent = <></>;\n  }\n\n  return (\n    <ClusterMap\n      clearPopup={() => false}\n      fitBounds={fitBounds.bounds}\n      padding={fitBounds.padding}\n    >\n      <>\n        {mapContent}\n        <MapContext.Consumer children={mapRenderProps} />\n      </>\n    </ClusterMap>\n  );\n\n};\n\nexport default CityMap;\n","import React, { useState } from 'react';\nimport styled from 'styled-components/macro';\nimport { useGlobalLocationGeometry } from '../../../../landing';\nimport useCurrentCityId from '../../../../../hooks/useCurrentCityId';\nimport CityMap, { BoundsConfig } from './CityMap';\nimport { Coordinate, getBounds } from '../../../../../components/map/Utils';\nimport { ExtendedSearchDatum } from '../../../../landing/Utils';\nimport { backgroundDark, backgroundMedium, baseColor, lightBorderColor, secondaryFont } from '../../../../../styling/styleUtils';\nimport { breakPoints } from '../../../../../styling/GlobalGrid';\nimport useFluent from '../../../../../hooks/useFluent';\nimport BasicModal from '../../../../../components/standardModal/BasicModal';\nimport { ModalContent } from '../../../../landing/Heading';\n\nconst footnoteHeight = '3.5rem';\nconst footnoteHeightSmall = '1.75rem';\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  padding-bottom: ${footnoteHeight};\n  box-sizing: border-box;\n  position: relative;\n  background-color: ${backgroundMedium};\n\n  @media (max-width: 920px), (max-height: 800px) {\n    padding-bottom: ${footnoteHeightSmall};\n  }\n\n  @media ${breakPoints.small} {\n    min-height: 70vh;\n  }\n\n  .mapboxgl-control-container {\n    .mapboxgl-ctrl-group:not(:empty) {\n      background: none;\n      box-shadow: none;\n    }\n    .mapboxgl-ctrl-zoom-in,\n    .mapboxgl-ctrl-zoom-out,\n    .mapboxgl-ctrl-compass {\n      width: 75px;\n      height: 18px;\n      color: #fff;\n      text-transform: uppercase;\n      font-family: ${secondaryFont};\n      letter-spacing: -0.3px;\n      display: flex;\n      align-items: center;\n      border: solid 1px ${lightBorderColor};\n      border-radius: none;\n      background-color: transparent;\n      font-size: 0.65rem;\n      font-weight: 600;\n      padding: 0.1rem 0.4rem;\n      margin-bottom: 0.45rem;\n\n      &:hover {\n        background-color: #fff;\n        color: ${backgroundDark};\n      }\n\n      span {\n        display: none;\n      }\n    }\n    .mapboxgl-ctrl-zoom-in {\n      &::after {\n        text-align: center;\n        content: '+ Zoom In';\n      }\n    }\n    .mapboxgl-ctrl-zoom-out {\n      &:after {\n        text-align: center;\n        content: '- Zoom Out';\n      }\n    }\n    .mapboxgl-ctrl-compass {\n      display: none;\n    }\n  }\n`;\n\nconst Footnote = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: ${footnoteHeight};\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 0.1rem 0.5rem;\n  box-sizing: border-box;\n\n  @media (max-width: 920px), (max-height: 800px) {\n    height: ${footnoteHeightSmall};\n    padding: 0.1rem;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n  }\n`;\n\nconst SourceAttr = styled.small`\n  font-style: italic;\n  font-size: 0.7rem;\n  opacity: 0.9;\n  margin-bottom: 0.4rem;\n\n  a {\n    color: ${baseColor};\n  }\n\n  @media (max-width: 920px), (max-height: 800px) {\n    font-size: 0.6rem;\n    margin-bottom: 0;\n    margin-right: 0.15rem;\n  }\n`;\n\nconst MoreInfoBtn = styled.button`\n  background-color: transparent;\n  text-decoration: underline;\n  padding: 0;\n  border: none;\n  opacity: 0.9;\n\n  @media (max-width: 920px), (max-height: 800px) {\n    font-size: 0.6rem;\n  }\n`;\n\nconst MapRoot = () => {\n  const { loading, error, data } = useGlobalLocationGeometry();\n  const currentCityId = useCurrentCityId();\n  const getString = useFluent();\n  const [cityModalOpen, setCityModalOpen] = useState<boolean>(false);\n\n  let fitBounds: BoundsConfig = { bounds: getBounds([]), padding: { top: 0, bottom: 0, left: 0, right: 0 } };\n\n  if (data !== undefined) {\n    const { cities, countries } = data;\n    let highlighted: ExtendedSearchDatum | undefined;\n    cities.forEach(city => {\n      const {\n        cityId, name, centroidLon, countryId, geometry,\n        population15, gdppc, nameList,\n      } = city;\n      const coordinates: Coordinate[][][] = geometry ? JSON.parse(geometry).coordinates : [];\n      const northernTerminus = Math.max(...coordinates[0][0].map(coord => coord[1]));\n      const center: Coordinate = [centroidLon ? centroidLon : 0, northernTerminus];\n      const parent = countries.find(c => parseInt(c.countryId, 10) === countryId);\n      const countryName = parent && parent.nameShortEn ? parent.nameShortEn : '';\n      const population = population15 ? population15 : 0;\n      const gdp = gdppc && !isNaN(gdppc) ? parseFloat(gdppc.toFixed(2)) : 0;\n      const id = cityId;\n      const searchDatum: ExtendedSearchDatum = {\n        id,\n        title: name + ', ' + countryName,\n        parent_id: countryId,\n        level: '1',\n        center,\n        coordinates: coordinates[0][0],\n        population: Math.round(population),\n        gdp,\n        keywords: nameList ? nameList : undefined,\n      };\n      if (cityId === currentCityId) {\n        highlighted = searchDatum;\n        fitBounds = {\n          bounds: getBounds(highlighted.coordinates),\n          padding: { top: window.innerHeight * 0.05, bottom: window.innerHeight * 0.05, left: window.innerWidth * 0.05, right: window.innerWidth * 0.05 },\n        };\n      }\n    });\n  }\n\n  const openModal = () => setCityModalOpen(true);\n  const closeModal = () => setCityModalOpen(false);\n  const modal = cityModalOpen ? (\n    <BasicModal\n      width={'400px'}\n      height={'auto'}\n      onClose={closeModal}\n    >\n      <ModalContent>\n        <p\n          dangerouslySetInnerHTML={{ __html: getString('landing-page-text-what-is-city-para-1') }}\n        />\n        <p\n          dangerouslySetInnerHTML={{ __html: getString('landing-page-text-what-is-city-para-2') }}\n        />\n      </ModalContent>\n    </BasicModal>\n  ) : null;\n\n  return (\n    <Root>\n      <CityMap\n        loading={loading}\n        error={error}\n        data={data}\n        currentCityId={currentCityId}\n        fitBounds={fitBounds}\n      />\n      <Footnote>\n        <SourceAttr dangerouslySetInnerHTML={{ __html: getString('city-overview-map-source')}} />\n        <MoreInfoBtn onClick={openModal}>{getString('city-overview-more-info')}</MoreInfoBtn>\n      </Footnote>\n      {modal}\n    </Root>\n  );\n\n};\n\nexport default MapRoot;\n","import { breakPoints, DefaultContentWrapper } from '../../../../styling/GlobalGrid';\nimport useCurrentCityId from '../../../../hooks/useCurrentCityId';\nimport SimpleError from '../../../../components/transitionStateComponents/SimpleError';\nimport { LoadingOverlay } from '../../../../components/transitionStateComponents/VizLoadingBlock';\nimport React from 'react';\nimport UtilityBar from '../../../../components/navigation/secondaryHeader/UtilityBar';\nimport styled from 'styled-components';\nimport Widgets from './widgets';\nimport Concepts from './concepts';\nimport Map from './map';\n\nconst Root = styled.div`\n  padding: 1.5rem 0.75rem 2.5rem;\n  box-sizing: border-box;\n  display: grid;\n  width: 100%;\n  min-height: 100%;\n  grid-template-rows: auto 1fr;\n  grid-template-columns: 1fr 1.25fr;\n  grid-template-areas:\n            \"widgets widgets\"\n            \"map concepts\";\n  gap: 1.5rem;\n\n  @media (max-height: 750px) {\n    gap: 0.75rem;\n  }\n\n  @media ${breakPoints.small} {\n    grid-template-rows: auto auto auto;\n    grid-template-columns: 1fr;\n    grid-template-areas:\n              \"widgets\"\n              \"map\"\n              \"concepts\";\n  }\n`;\n\nconst ContentBlock = styled.div`\n  box-shadow: 0px 1px 4px 0px rgba(0, 0, 0, 0.25);\n`;\n\nconst WidgetContainer = styled(ContentBlock)`\n  grid-area: widgets;\n  padding: 1rem;\n\n  @media (max-height: 750px) {\n    padding: 0.5rem 0.25rem;\n  }\n`;\n\nconst MapContainer = styled(ContentBlock)`\n  grid-area: map;\n`;\n\nconst ConceptsContainer = styled(ContentBlock)`\n  grid-area: concepts;\n  position: relative;\n`;\n\nconst SimilarCities = () => {\n  const cityId = useCurrentCityId();\n\n  if (cityId === null) {\n    return (\n      <DefaultContentWrapper>\n        <LoadingOverlay>\n          <SimpleError fluentMessageId={'global-ui-error-invalid-city'} />\n        </LoadingOverlay>\n      </DefaultContentWrapper>\n    );\n  }\n\n  return (\n    <DefaultContentWrapper>\n      <Root>\n        <WidgetContainer>\n          <Widgets />\n        </WidgetContainer>\n        <MapContainer>\n          <Map />\n        </MapContainer>\n        <ConceptsContainer>\n          <Concepts />\n        </ConceptsContainer>\n      </Root>\n      <UtilityBar />\n    </DefaultContentWrapper>\n  );\n};\n\nexport default SimilarCities;\n","export const tickMarksForMinMax = (min: number, max: number) => {\n  const digits = min.toString().length + max.toString().length;\n  return digits - 3;\n};\n","import React, {useState, useRef} from 'react';\nimport {scaleLog} from 'd3-scale';\nimport {\n  sectorColorMap,\n  educationColorRange,\n  wageColorRange,\n  Mult,\n  FractionMult,\n} from '../../../styling/styleUtils';\nimport ComparisonBarChart, {\n  RowHoverEvent,\n  BarDatum,\n  Direction,\n} from 'react-comparison-bar-chart';\nimport {SuccessResponse} from '../industrySpace/chart/useRCAData';\nimport {\n  useGlobalIndustryMap,\n} from '../../../hooks/useGlobalIndustriesData';\nimport {\n  ClassificationNaicsIndustry,\n  DigitLevel,\n} from '../../../types/graphQL/graphQLTypes';\nimport {\n  ColorBy,\n} from '../../../routing/routes';\nimport {getStandardTooltip, RapidTooltipRoot} from '../../../utilities/rapidTooltip';\nimport useFluent from '../../../hooks/useFluent';\nimport QuickError from '../../transitionStateComponents/QuickError';\nimport {rgba} from 'polished';\nimport {defaultYear, decimalToFraction} from '../../../Utils';\nimport {tickMarksForMinMax} from './getNiceLogValues';\nimport {scaleLinear} from 'd3-scale';\nimport {\n  useAggregateIndustryMap,\n} from '../../../hooks/useAggregateIndustriesData';\nimport LoadingBlock from '../../transitionStateComponents/VizLoadingBlock';\n\ninterface Props {\n  data: SuccessResponse['naicsRca'];\n  highlighted: string | undefined;\n  hiddenSectors: ClassificationNaicsIndustry['id'][];\n  colorBy: ColorBy;\n  digitLevel: DigitLevel;\n}\n\nconst Industries = (props: Props) => {\n  const {\n    data, highlighted, hiddenSectors,\n    colorBy, digitLevel,\n  } = props;\n\n  const industryMap = useGlobalIndustryMap();\n  const aggregateIndustryDataMap = useAggregateIndustryMap({level: digitLevel, year: defaultYear});\n  const getString = useFluent();\n\n  let colorScale: (val: number) => string;\n  if (colorBy === ColorBy.education && aggregateIndustryDataMap.data !== undefined) {\n    colorScale = scaleLinear()\n                  .domain([\n                    aggregateIndustryDataMap.data.globalMinMax.minYearsEducation,\n                    aggregateIndustryDataMap.data.globalMinMax.medianYearsEducation,\n                    aggregateIndustryDataMap.data.globalMinMax.maxYearsEducation,\n                  ])\n                  .range(educationColorRange as any) as any;\n  } else if (colorBy === ColorBy.wage && aggregateIndustryDataMap.data !== undefined) {\n    colorScale = scaleLinear()\n                  .domain([\n                    aggregateIndustryDataMap.data.globalMinMax.minHourlyWage,\n                    aggregateIndustryDataMap.data.globalMinMax.medianHourlyWage,\n                    aggregateIndustryDataMap.data.globalMinMax.maxHourlyWage,\n                  ])\n                  .range(wageColorRange as any) as any;\n  } else {\n    colorScale = () => 'lightgray';\n  }\n\n  const [highlightError, setHighlightError] = useState<boolean>(false);\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\n\n  if ((colorBy === ColorBy.education && aggregateIndustryDataMap.loading) ||\n      (colorBy === ColorBy.wage && aggregateIndustryDataMap.loading)) {\n    return <LoadingBlock />;\n  }\n\n  const filteredIndustryRCA = data.filter(d => {\n    const industry = d.naicsId !== null ? industryMap.data[d.naicsId] : undefined;\n    if (industry && !hiddenSectors.includes(industry.naicsIdTopParent.toString())) {\n      return d.rca && (d.rca as number) > 0;\n    } else {\n      return false;\n    }\n  });\n  let max = Math.ceil((Math.max(...filteredIndustryRCA.map(d => d.rca as number)) * 1.1) / 10) * 10;\n  let min = Math.min(...filteredIndustryRCA.map(d => d.rca as number));\n  if (max < 10) {\n    max = 10;\n  }\n  if (min >= 1) {\n    min = 0.1;\n  }\n  let scale = scaleLog()\n    .domain([min, max])\n    .range([ 0, 100 ])\n    .nice();\n\n  min = parseFloat(scale.invert(0).toFixed(5));\n  max = parseFloat(scale.invert(100).toFixed(5));\n\n  if (max.toString().length > min.toString().length - 1) {\n    min = 1 / max;\n  } else if (max.toString().length < min.toString().length - 1) {\n    max = 1 / min;\n  }\n\n  scale = scaleLog()\n    .domain([min, max])\n    .range([ 0, 100 ])\n    .nice();\n  const numberOfXAxisTicks = tickMarksForMinMax(\n    parseFloat(scale.invert(0).toFixed(5)),\n    parseFloat(scale.invert(100).toFixed(5)),\n  );\n\n  const highPresenceScale = scaleLog()\n    .domain([1, max])\n    .range([0, 100])\n    .nice();\n\n  const lowPresenceScale = scaleLog()\n    .domain([1, min])\n    .range([0, 100])\n    .nice();\n\n  const highPresenceData: BarDatum[] = [];\n  const lowPresenceData: BarDatum[] = [];\n  filteredIndustryRCA.forEach(d => {\n    const industry = d.naicsId !== null ? industryMap.data[d.naicsId] : undefined;\n    let color: string;\n    if ((colorBy === ColorBy.education|| colorBy === ColorBy.wage) && aggregateIndustryDataMap.data) {\n      const target = d.naicsId !== null ? aggregateIndustryDataMap.data.industries[d.naicsId] : undefined;\n      if (target) {\n        const targetValue = colorBy === ColorBy.education\n          ? target.yearsEducationRank : target.hourlyWageRank;\n        color = colorScale(targetValue);\n      } else {\n        color = 'lightgray';\n      }\n    } else {\n      const colorDatum = industry\n        ? sectorColorMap.find(s => s.id === industry.naicsIdTopParent.toString()) : undefined;\n      color = colorDatum ? colorDatum.color : 'lightgray';\n    }\n    let value: number = 0;\n    if (d.rca && d.rca < 1) {\n      value = lowPresenceScale(d.rca) as number;\n    } else if (d.rca && d.rca >= 1) {\n      value = highPresenceScale(d.rca) as number;\n    }\n    // const value = d.rca ? scale(d.rca as number) as number : 0;\n    const datum: BarDatum = {\n      id: d.naicsId !== null ? d.naicsId.toString() : '',\n      title: industry && industry.name ? industry.name : '',\n      value,\n      color,\n    };\n    if (d.rca && d.rca >= 1) {\n      highPresenceData.push(datum);\n    } else {\n      lowPresenceData.push(datum);\n    }\n  });\n  const formatValue = (value: number, direction: Direction) => {\n    const scaleToUse = direction === Direction.Over ? highPresenceScale : lowPresenceScale;\n    const scaledValue = parseFloat(scaleToUse.invert(value).toFixed(5));\n    if (scaledValue >= 1) {\n      return <>{scaledValue}<Mult>×</Mult></>;\n    } else {\n      const {top, bottom} = decimalToFraction(scaledValue);\n      return <><sup>{top}</sup>&frasl;<sub>{bottom}</sub><FractionMult>×</FractionMult></>;\n    }\n  };\n\n  const setHovered = (e: RowHoverEvent | undefined) => {\n    const node = tooltipRef.current;\n    if (node) {\n      if (e && e.datum) {\n        const {datum, mouseCoords} = e;\n        const industry = filteredIndustryRCA.find(d => d.naicsId && d.naicsId.toString() === datum.id);\n        const rows = [\n          [getString('global-ui-naics-code') + ':', datum.id],\n          [getString('global-ui-year') + ':', defaultYear.toString()],\n          [getString('global-intensity') + ':', industry && industry.rca ? industry.rca.toFixed(3) : '0.000'],\n        ];\n        if ((colorBy === ColorBy.education|| colorBy === ColorBy.wage) && aggregateIndustryDataMap.data) {\n          const target = aggregateIndustryDataMap.data.industries[datum.id];\n          const targetValue = colorBy === ColorBy.education ? target.yearsEducation : target.hourlyWage;\n          rows.push([\n            getString('global-formatted-color-by', {type: colorBy}),\n            (colorBy === ColorBy.wage ? '$' : '') + targetValue.toFixed(2),\n          ]);\n        }\n        node.innerHTML = getStandardTooltip({\n          title: datum.title,\n          color: rgba(datum.color, 0.3),\n          rows,\n          boldColumns: [1, 2],\n        });\n        node.style.top = mouseCoords.y + 'px';\n        node.style.left = mouseCoords.x + 'px';\n        node.style.display = 'block';\n      } else {\n        node.style.display = 'none';\n      }\n    }\n  };\n\n  const highlightErrorPopup = highlightError ? (\n    <QuickError\n      closeError={() => setHighlightError(false)}\n    >\n      {getString('global-ui-error-industry-not-in-data-set')}\n    </QuickError>\n  ) : null;\n\n  return (\n    <>\n      <ComparisonBarChart\n        primaryData={highPresenceData}\n        secondaryData={lowPresenceData}\n        formatValue={formatValue}\n        highlighted={highlighted}\n        onRowHover={setHovered}\n        onHighlightError={() => setHighlightError(true)}\n        nValuesToShow={10}\n        numberOfXAxisTicks={numberOfXAxisTicks}\n        expandCollapseText={{\n          toExpand: getString('cities-top-10-comparison-chart-expand'),\n          toCollapse: getString('cities-top-10-comparison-chart-collapse'),\n        }}\n      />\n      <RapidTooltipRoot ref={tooltipRef} />\n      {highlightErrorPopup}\n    </>\n  );\n};\n\nexport default Industries;\n","import React, {useRef, useState} from 'react';\nimport {scaleLog, scaleLinear} from 'd3-scale';\nimport ComparisonBarChart, {\n  RowHoverEvent,\n  BarDatum,\n  Direction,\n} from 'react-comparison-bar-chart';\nimport {SuccessResponse} from '../industrySpace/chart/useRCAData';\nimport {\n  DigitLevel,\n  ClassificationNaicsCluster,\n} from '../../../types/graphQL/graphQLTypes';\nimport {getStandardTooltip, RapidTooltipRoot} from '../../../utilities/rapidTooltip';\nimport useFluent from '../../../hooks/useFluent';\nimport {defaultYear, decimalToFraction} from '../../../Utils';\nimport {\n  clusterColorMap,\n  intensityColorRange,\n  educationColorRange,\n  wageColorRange,\n  Mult,\n  FractionMult,\n} from '../../../styling/styleUtils';\nimport {ClusterLevel, ColorBy} from '../../../routing/routes';\nimport {\n  useGlobalClusterMap,\n} from '../../../hooks/useGlobalClusterData';\nimport {tickMarksForMinMax} from './getNiceLogValues';\nimport {\n  useAggregateIndustryMap,\n} from '../../../hooks/useAggregateIndustriesData';\nimport {rgba} from 'polished';\nimport LoadingBlock from '../../transitionStateComponents/VizLoadingBlock';\nimport QuickError from '../../transitionStateComponents/QuickError';\n\ninterface Props {\n  data: SuccessResponse['c3Rca'] | SuccessResponse['c1Rca'];\n  clusterLevel: ClusterLevel;\n  colorBy: ColorBy;\n  highlighted: string | undefined;\n  hiddenClusters: ClassificationNaicsCluster['id'][];\n}\n\nconst Clusters = (props: Props) => {\n  const {data, clusterLevel, colorBy, hiddenClusters, highlighted} = props;\n  const [highlightError, setHighlightError] = useState<boolean>(false);\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\n  const getString = useFluent();\n  const clusterMap = useGlobalClusterMap();\n  const aggregateIndustryDataMap = useAggregateIndustryMap({\n    level: DigitLevel.Six, year: defaultYear, clusterLevel: parseInt(clusterLevel, 10),\n  });\n\n  if ((colorBy === ColorBy.education && aggregateIndustryDataMap.loading) ||\n      (colorBy === ColorBy.wage && aggregateIndustryDataMap.loading)) {\n    return <LoadingBlock />;\n  }\n\n  const filteredClusterRCA = data.filter(d => {\n    const cluster = d.clusterId !== null ? clusterMap.data[d.clusterId] : undefined;\n    const clusterIdTopParent = cluster && cluster.clusterIdTopParent ? cluster.clusterIdTopParent : '';\n    if (cluster && !hiddenClusters.includes(clusterIdTopParent.toString())) {\n      return d.rca && (d.rca as number) > 0;\n    } else {\n      return false;\n    }\n  });\n\n  let max = Math.ceil((Math.max(...filteredClusterRCA.map(d => d.rca as number)) * 1.1) / 10) * 10;\n  let min = Math.min(...filteredClusterRCA.map(d => d.rca as number));\n  if (max < 10) {\n    max = 10;\n  }\n  if (min >= 1) {\n    min = 0.1;\n  }\n  let scale = scaleLog()\n    .domain([min, max])\n    .range([ 0, 100 ])\n    .nice();\n\n  min = parseFloat(scale.invert(0).toFixed(5));\n  max = parseFloat(scale.invert(100).toFixed(5));\n\n  if (max.toString().length > min.toString().length - 1) {\n    min = 1 / max;\n  } else if (max.toString().length < min.toString().length - 1) {\n    max = 1 / min;\n  }\n\n  scale = scaleLog()\n    .domain([min, max])\n    .range([ 0, 100 ])\n    .nice();\n  const numberOfXAxisTicks = tickMarksForMinMax(\n    parseFloat(scale.invert(0).toFixed(5)),\n    parseFloat(scale.invert(100).toFixed(5)),\n  );\n\n  let colorScale: (val: number) => string | undefined;\n  if (colorBy === ColorBy.education && aggregateIndustryDataMap.data !== undefined) {\n    colorScale = scaleLinear()\n                  .domain([\n                    aggregateIndustryDataMap.data.clusterMinMax.minYearsEducation,\n                    aggregateIndustryDataMap.data.clusterMinMax.medianYearsEducation,\n                    aggregateIndustryDataMap.data.clusterMinMax.maxYearsEducation,\n                  ])\n                  .range(educationColorRange as any) as any;\n  } else if (colorBy === ColorBy.wage && aggregateIndustryDataMap.data !== undefined) {\n    colorScale = scaleLinear()\n                  .domain([\n                    aggregateIndustryDataMap.data.clusterMinMax.minHourlyWage,\n                    aggregateIndustryDataMap.data.clusterMinMax.medianHourlyWage,\n                    aggregateIndustryDataMap.data.clusterMinMax.maxHourlyWage,\n                  ])\n                  .range(wageColorRange as any) as any;\n  } else {\n    colorScale = scaleLog()\n      .domain([min, max])\n      .range(intensityColorRange as any)\n      .nice() as any;\n  }\n\n  const highPresenceScale = scaleLog()\n    .domain([1, max])\n    .range([0, 100])\n    .nice();\n\n  const lowPresenceScale = scaleLog()\n    .domain([1, min])\n    .range([0, 100])\n    .nice();\n\n  const highPresenceData: BarDatum[] = [];\n  const lowPresenceData: BarDatum[] = [];\n  filteredClusterRCA.forEach(d => {\n    const cluster = d.clusterId !== null ? clusterMap.data[d.clusterId] : undefined;\n    const title = cluster && cluster.name !== null ? cluster.name : '';\n    let color: string;\n    const clusterIndustryDatum = d.clusterId !== null\n      ? aggregateIndustryDataMap.data.clusters[d.clusterId] : undefined;\n    if (colorBy === ColorBy.education && aggregateIndustryDataMap.data !== undefined) {\n      if (clusterIndustryDatum) {\n        color = colorScale(clusterIndustryDatum.yearsEducationRank) as string;\n      } else {\n        color = 'gray';\n      }\n    } else if (colorBy === ColorBy.wage && aggregateIndustryDataMap.data !== undefined) {\n      if (clusterIndustryDatum) {\n        color = colorScale(clusterIndustryDatum.hourlyWageRank) as string;\n      } else {\n        color = 'gray';\n      }\n    } else {\n      const colorDatum = clusterColorMap\n        .find(s => cluster && cluster.clusterIdTopParent && s.id === cluster.clusterIdTopParent.toString());\n      color = colorDatum ? colorDatum.color : 'lightgray';\n    }\n    let value: number = 0;\n    if (d.rca && d.rca < 1) {\n      value = lowPresenceScale(d.rca) as number;\n    } else if (d.rca && d.rca >= 1) {\n      value = highPresenceScale(d.rca) as number;\n    }\n    // const value = d.rca ? scale(d.rca as number) as number : 0;\n    const datum: BarDatum = {\n      id: d.clusterId !== null ? d.clusterId.toString() : '',\n      title,\n      value,\n      color,\n    };\n    if (d.rca && d.rca >= 1) {\n      highPresenceData.push(datum);\n    } else {\n      lowPresenceData.push(datum);\n    }\n  });\n  const formatValue = (value: number, direction: Direction) => {\n    const scaleToUse = direction === Direction.Over ? highPresenceScale : lowPresenceScale;\n    const scaledValue = parseFloat(scaleToUse.invert(value).toFixed(5));\n    if (scaledValue >= 1) {\n      return <>{scaledValue}<Mult>×</Mult></>;\n    } else {\n      const {top, bottom} = decimalToFraction(scaledValue);\n      return <><sup>{top}</sup>&frasl;<sub>{bottom}</sub><FractionMult>×</FractionMult></>;\n    }\n  };\n\n  const setHovered = (e: RowHoverEvent | undefined) => {\n    const node = tooltipRef.current;\n    if (node) {\n      if (e && e.datum) {\n        const {datum, mouseCoords} = e;\n        const cluster = filteredClusterRCA.find(d => d.clusterId && d.clusterId.toString() === datum.id);\n        const rows = [\n          [getString('global-ui-year') + ':', defaultYear.toString()],\n          [getString('global-intensity') + ':', cluster && cluster.rca ? cluster.rca.toFixed(3) : '0.000'],\n        ];\n        if ((colorBy === ColorBy.education|| colorBy === ColorBy.wage) && aggregateIndustryDataMap.data) {\n          const target = aggregateIndustryDataMap.data.clusters[datum.id];\n          const targetValue = colorBy === ColorBy.education ? target.yearsEducation : target.hourlyWage;\n          rows.push([\n            getString('global-formatted-color-by', {type: colorBy}),\n            (colorBy === ColorBy.wage ? '$' : '') + targetValue.toFixed(2),\n          ]);\n        }\n        node.innerHTML = getStandardTooltip({\n          title: datum.title,\n          color: rgba(datum.color, 0.3),\n          rows,\n          boldColumns: [1, 2],\n        });\n        node.style.top = mouseCoords.y + 'px';\n        node.style.left = mouseCoords.x + 'px';\n        node.style.display = 'block';\n      } else {\n        node.style.display = 'none';\n      }\n    }\n  };\n\n  const highlightErrorPopup = highlightError ? (\n    <QuickError\n      closeError={() => setHighlightError(false)}\n    >\n      {getString('global-ui-error-industry-not-in-data-set')}\n    </QuickError>\n  ) : null;\n\n  return (\n    <>\n      <ComparisonBarChart\n        primaryData={highPresenceData}\n        secondaryData={lowPresenceData}\n        formatValue={formatValue}\n        highlighted={highlighted}\n        onRowHover={setHovered}\n        onHighlightError={() => setHighlightError(true)}\n        nValuesToShow={10}\n        numberOfXAxisTicks={numberOfXAxisTicks}\n        expandCollapseText={{\n          toExpand: getString('cities-top-10-comparison-chart-expand-clusters'),\n          toCollapse: getString('cities-top-10-comparison-chart-collapse-clusters'),\n        }}\n      />\n      <RapidTooltipRoot ref={tooltipRef} />\n      {highlightErrorPopup}\n    </>\n  );\n};\n\nexport default Clusters;\n","import { useQuery, gql } from '@apollo/client';\nimport {\n  ClusterDensityRescale,\n  ClusterLevel,\n  ClusterRcaCalculation,\n  PeerGroup,\n  CompositionType,\n  defaultCompositionType,\n  isValidPeerGroup,\n  CityClusterYear,\n} from '../types/graphQL/graphQLTypes';\nimport useCurrentCityId from './useCurrentCityId';\nimport {defaultYear} from '../Utils';\nimport useQueryParams from './useQueryParams';\nimport useCurrentBenchmark from './useCurrentBenchmark';\n\nexport enum RegionGroup {\n  World = 'world',\n  SimilarCities = 'similarcities',\n}\n\nconst CLUSTER_RCA_QUERY = gql`\n  query GetClusterNodeIntesityData(\n    $cityId: Int!,\n    $year: Int!,\n    $level: Int!,\n    $peerGroup: String,\n    $partnerCityIds: [Int],\n    $variable: String,\n  ) {\n    clusterDensity: clusterDensityRescale(\n      cityId: $cityId,\n      peerGroup: $peerGroup,\n      partnerCityIds: $partnerCityIds,\n      year: $year,\n      clusterLevel: $level\n    ) {\n      clusterId\n      densityCompany\n      densityEmploy\n    }\n    clusterRca(\n      cityId: $cityId,\n      peerGroup: $peerGroup,\n      partnerCityIds: $partnerCityIds,\n      year: $year,\n      clusterLevel: $level,\n      variable: $variable,\n    ) {\n      clusterId\n      rca\n      comparableIndustry\n    }\n    clusterData: cityClusterYearList(cityId: $cityId, year: $year) {\n      clusterId\n      level\n      numCompany\n      numEmploy\n      id\n    }\n  }\n`;\n\ninterface ClusterDensity {\n  clusterId: ClusterDensityRescale['clusterId'];\n  densityCompany: ClusterDensityRescale['densityCompany'];\n  densityEmploy: ClusterDensityRescale['densityEmploy'];\n}\n\ninterface ClusterRca {\n  clusterId: ClusterRcaCalculation['clusterId'];\n  rca: ClusterRcaCalculation['rca'];\n  comparableIndustry: ClusterRcaCalculation['comparableIndustry'];\n}\n\ninterface ClusterData {\n  clusterId: CityClusterYear['clusterId'];\n  level: CityClusterYear['level'];\n  numCompany: CityClusterYear['numCompany'];\n  numEmploy: CityClusterYear['numEmploy'];\n}\n\nexport interface SuccessResponse {\n  clusterDensity: ClusterDensity[];\n  clusterRca: ClusterRca[];\n  clusterData: ClusterData[];\n}\n\ninterface Variables {\n  cityId: number | null;\n  year: number;\n  level: ClusterLevel;\n  peerGroup: PeerGroup | '';\n  partnerCityIds: [number] | [];\n  variable: 'employ' | 'company';\n}\n\nconst useClusterIntensityQuery = (variables: Variables) =>\n  useQuery<SuccessResponse, Variables>(CLUSTER_RCA_QUERY, { variables });\n\nconst useClusterRCAData = (level: ClusterLevel) => {\n  const cityId = useCurrentCityId();\n\n  const { composition_type } = useQueryParams();\n  const { benchmark } = useCurrentBenchmark();\n\n\n  const defaultCompositionVariable = defaultCompositionType === CompositionType.Companies ? 'company' : 'employ';\n  let variable: 'employ' | 'company' = defaultCompositionVariable;\n  if (composition_type === CompositionType.Companies) {\n    variable = 'company';\n  } else if (composition_type === CompositionType.Employees) {\n    variable = 'employ';\n  }\n\n  const peerGroup = isValidPeerGroup(benchmark) ? benchmark as PeerGroup : '';\n\n  const partnerCityIds: [number] | [] = benchmark !== undefined && !isNaN(parseInt(benchmark, 10))\n    ? [parseInt(benchmark, 10)] : [];\n\n  const {loading, error, data} = useClusterIntensityQuery({\n    cityId: cityId !== null ? parseInt(cityId, 10) : null,\n    year: defaultYear,\n    level,\n    peerGroup,\n    partnerCityIds,\n    variable,\n  });\n\n  return cityId !== null ? {loading, error, data} : {loading: true, error: undefined, data: undefined};\n};\n\nexport default useClusterRCAData;\n","import React, { useState } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport useCurrentBenchmark from '../../../hooks/useCurrentBenchmark';\nimport useFluent from '../../../hooks/useFluent';\nimport { benchmarkColor } from '../../../styling/styleUtils';\nimport BenchmarkSVG from '../../../assets/icons/benchmark_comparator.svg';\nimport AddComparisonModal, { ComparisonType } from '../../navigation/secondaryHeader/comparisons/AddComparisonModal';\nimport { useGlobalLocationHierarchicalTreeData } from '../../../hooks/useGlobalLocationData';\n\nconst rotate = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n\n  10% {\n    transform: rotate(-30deg);\n  }\n\n  15% {\n    transform: rotate(-40deg);\n  }\n\n  20% {\n    transform: rotate(-45deg);\n  }\n\n  60% {\n    transform: rotate(360deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst Root = styled.button`\n  pointer-events: all;\n  text-align: center;\n  background-color: transparent;\n  font-size: 0.65rem;\n  margin: 0.25rem 0 1rem;\n  color: ${benchmarkColor};\n  max-width: 100%;\n\n  &:hover {\n    img {\n      animation: ${rotate} 2s ease-in-out infinite;\n    }\n  }\n`;\n\nconst Title = styled.strong`\n  text-transform: uppercase;\n  font-size: 0.75rem;\n  margin-right: 0.25rem;\n\n  @media (max-width: 950px) {\n    display: block;\n  }\n`;\n\nconst Icon = styled.img`\n  width: 1rem;\n  height: 1rem;\n  position: relative;\n  top: 0.25rem;\n  margin-right: 0.25rem;\n`;\n\ninterface Props {\n  comparisonType?: ComparisonType;\n}\n\nconst BenchmarkLegend = (props: Props) => {\n  const comparisonType = props.comparisonType ? props.comparisonType : ComparisonType.Relative;\n  const getString = useFluent();\n  const { benchmark, benchmarkName } = useCurrentBenchmark();\n  const [modalOpen, setModalOpen] = useState<boolean>(benchmark === undefined);\n  const { data } = useGlobalLocationHierarchicalTreeData();\n  const openBenchmarkModal = () => setModalOpen(true);\n\n  const closeModal = (newBenchmark: string | undefined) => {\n    if (newBenchmark !== undefined) {\n      setModalOpen(false);\n    }\n  };\n  const benchmarkModal = modalOpen ? (\n    <AddComparisonModal\n      closeModal={closeModal}\n      data={data}\n      comparisonType={comparisonType}\n    />\n  ) : null;\n\n  const text = comparisonType === ComparisonType.Relative\n    ? getString('global-ui-change-benchmark')\n    : getString('global-ui-change-comparator');\n\n  return (\n    <>\n      <Root onClick={openBenchmarkModal}>\n        <Title>\n          <Icon src={BenchmarkSVG} />\n          {text}\n        </Title>\n        ({benchmarkName})\n      </Root>\n      {benchmarkModal}\n    </>\n  );\n};\n\nexport default BenchmarkLegend;\n","import React, {useEffect, useState, useRef} from 'react';\nimport {\n  DigitLevel,\n  ClassificationNaicsIndustry,\n  ClassificationNaicsCluster,\n} from '../../../types/graphQL/graphQLTypes';\nimport {\n  useGlobalIndustryMap,\n} from '../../../hooks/useGlobalIndustriesData';\nimport {\n  usePrevious,\n} from 'react-use';\nimport {useWindowWidth} from '../../../contextProviders/appContext';\nimport {breakPoints} from '../../../styling/GlobalGrid';\nimport {\n  baseColor,\n} from '../../../styling/styleUtils';\nimport PreChartRow from '../../../components/general/PreChartRow';\nimport ErrorBoundary from '../ErrorBoundary';\nimport styled from 'styled-components/macro';\nimport SimpleError from '../../transitionStateComponents/SimpleError';\nimport LoadingBlock, {LoadingOverlay} from '../../transitionStateComponents/VizLoadingBlock';\nimport useRCAData, {SuccessResponse} from '../industrySpace/chart/useRCAData';\nimport Industries from './Industries';\nimport Clusters from './Clusters';\nimport {\n  CityRoutes,\n  ColorBy,\n} from '../../../routing/routes';\nimport useFluent from '../../../hooks/useFluent';\nimport {ClusterLevel} from '../../../routing/routes';\nimport {Mode} from '../../general/searchIndustryInGraphDropdown';\nimport PresenceToggle, { Highlighted } from '../legend/PresenceToggle';\nimport BenchmarkLegend from '../legend/BenchmarkLegend';\nimport { ComparisonType } from '../../navigation/secondaryHeader/comparisons/AddComparisonModal';\nimport { useHistory } from 'react-router-dom';\nimport { createRoute } from '../../../routing/Utils';\nimport useCurrentCityId from '../../../hooks/useCurrentCityId';\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  grid-column: 1;\n  grid-row: 2;\n  position: relative;\n  display: grid;\n  grid-template-rows: 1fr 3rem auto;\n  grid-template-columns: 3.5rem 1fr;\n\n  @media ${breakPoints.small} {\n    grid-row: 3;\n    grid-column: 1;\n  }\n`;\n\nexport const LeftAxisRoot = styled.div`\n  grid-row: 1;\n  grid-column: 1;\n  white-space: nowrap;\n  display: flex;\n  transform: rotate(-90deg);\n  align-items: center;\n  justify-content: center;\n  pointer-events: none;\n`;\n\nexport const BottomAxisRoot = styled.div`\n  grid-row: 2;\n  grid-column: 2;\n  white-space: nowrap;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  pointer-events: none;\n  padding-left: 15%;\n  padding-left: clamp(75px, 300px, 15%);\n\n  @media (max-width: 1225px) {\n    padding-left: 0;\n    justify-content: flex-end;\n  }\n  @media (max-width: 990px) {\n    grid-template-columns: 1 / -1;\n  }\n\n  @media (max-width: 920px) {\n    padding-left: 15%;\n    padding-left: clamp(75px, 300px, 15%);\n    justify-content: center;\n  }\n`;\n\nexport const BenchmarkRoot = styled(BottomAxisRoot)`\n  grid-row: 3;\n  justify-content: center;\n  white-space: normal;\n`;\n\nexport const AxisLabelBase = styled.div`\n  font-weight: 600;\n  font-size: 0.75rem;\n  color: ${baseColor};\n  text-transform: uppercase;\n\n  @media (max-width: 1000px) {\n    font-size: 0.6rem;\n  }\n\n  @media (max-height: 600px) {\n    font-size: 0.65rem;\n  }\n`;\n\nexport const AxisLabelLeft = styled(AxisLabelBase)`\n  margin-right: 1rem;\n  font-weight: 400;\n\n  @media (max-width: 990px) {\n    margin-right: 0.75rem;\n  }\n\n  @media (max-width: 920px) {\n    display: none;\n  }\n`;\n\nexport const AxisLabelRight = styled(AxisLabelBase)`\n  margin-left: 1rem;\n  font-weight: 400;\n\n  @media (max-width: 990px) {\n    margin-left: 0.75rem;\n  }\n\n  @media (max-width: 920px) {\n    display: none;\n  }\n`;\n\nexport const AxisLabelHigh = styled(AxisLabelBase)`\n  margin-left: 3rem;\n\n  @media (max-height: 800px) {\n    margin-left: 1rem;\n  }\n`;\n\nconst VizRoot = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  grid-column: 2;\n  grid-row: 1;\n`;\n\nconst VizContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n\n  .react-comparison-bar-chart-title {\n    h2 {\n      text-transform: none;\n    }\n  }\n`;\n\ninterface Props {\n  isClusterView: boolean;\n  highlighted: string | undefined;\n  setHighlighted: (value: string | undefined) => void;\n  hiddenSectors: ClassificationNaicsIndustry['id'][];\n  hiddenClusters: ClassificationNaicsCluster['id'][];\n  clusterLevel: ClusterLevel;\n  digitLevel: DigitLevel;\n  colorBy: ColorBy;\n}\n\nconst RCABarChart = (props: Props) => {\n  const {\n    hiddenSectors, setHighlighted,\n    highlighted,\n    isClusterView, clusterLevel,\n    digitLevel, colorBy, hiddenClusters,\n  } = props;\n  const getString = useFluent();\n  const industryMap = useGlobalIndustryMap();\n  const windowDimensions = useWindowWidth();\n  const {loading, error, data} = useRCAData(digitLevel);\n  const history = useHistory();\n  const cityId = useCurrentCityId();\n\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const [dimensions, setDimensions] = useState<{width: number, height: number} | undefined>(undefined);\n  useEffect(() => {\n    const node = rootRef.current;\n    if (node) {\n      const {width, height} = node.getBoundingClientRect();\n      setDimensions({width, height});\n    }\n  }, [rootRef, windowDimensions]);\n\n  const prevData = usePrevious(data);\n  let dataToUse: SuccessResponse | undefined;\n  if (data) {\n    dataToUse = data;\n  } else if (prevData) {\n    dataToUse = prevData;\n  } else {\n    dataToUse = undefined;\n  }\n\n  let output: React.ReactElement<any> | null;\n  if (industryMap.loading || !dimensions || (loading && prevData === undefined)) {\n    output = <LoadingBlock />;\n  } else if (error !== undefined) {\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(error);\n  }  else if (industryMap.error !== undefined) {\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(error);\n  } else if (dataToUse !== undefined) {\n    const clusterData = clusterLevel === ClusterLevel.C1 ? dataToUse.c1Rca : dataToUse.c3Rca;\n    const industryData = dataToUse.naicsRca;\n    const loadingOverlay = loading ? <LoadingBlock /> : null;\n    const viz = isClusterView ? (\n      <Clusters\n        key={'ClustersRCAChart' + dimensions.height.toString() + dimensions.width.toString()}\n        data={clusterData}\n        clusterLevel={clusterLevel}\n        colorBy={colorBy}\n        hiddenClusters={hiddenClusters}\n        highlighted={highlighted}\n      />\n    ) : (\n      <Industries\n        key={'IndustriesRCAChart' + dimensions.height.toString() + dimensions.width.toString()}\n        data={industryData}\n        highlighted={highlighted}\n        hiddenSectors={hiddenSectors}\n        colorBy={colorBy}\n        digitLevel={digitLevel}\n      />\n    );\n    output = (\n      <VizContainer style={{height: dimensions.height}}>\n          <ErrorBoundary>\n            {viz}\n          </ErrorBoundary>\n        {loadingOverlay}\n      </VizContainer>\n    );\n  } else {\n    output = null;\n  }\n\n  const onButtonClick = (value: Highlighted) => {\n    if (value === Highlighted.absolute && cityId !== null) {\n      const route = createRoute.city(CityRoutes.CityGoodAtAbsolutePresence, cityId);\n      history.push(route + history.location.search);\n    }\n  };\n\n  return (\n    <>\n      <PreChartRow\n        searchInGraphOptions={{\n          hiddenParents: isClusterView ? hiddenClusters : hiddenSectors,\n          digitLevel,\n          clusterLevel,\n          setHighlighted,\n          mode: isClusterView ? Mode.cluster : Mode.naics,\n        }}\n        settingsOptions={{\n          compositionType: true,\n          clusterLevel: isClusterView ? true : undefined,\n          digitLevel: isClusterView ? undefined : true,\n          colorBy: true,\n          aggregationMode: true,\n        }}\n      />\n      <Root>\n        <LeftAxisRoot>\n          <AxisLabelBase>← {getString('global-intensity-lower')}</AxisLabelBase>\n          <AxisLabelHigh>{getString('global-intensity-higher')} →</AxisLabelHigh>\n        </LeftAxisRoot>\n        <BottomAxisRoot>\n          <AxisLabelLeft dangerouslySetInnerHTML={{__html: getString('relative-presence-axis-labels-bottom-left')}} />\n          <AxisLabelBase>\n            <PresenceToggle\n              togglePresence={true}\n              highlight={Highlighted.relative}\n              showArrows={true}\n              onButtonClick={onButtonClick}\n            />\n          </AxisLabelBase>\n          <AxisLabelRight dangerouslySetInnerHTML={{__html: getString('relative-presence-axis-labels-bottom-right')}} />\n        </BottomAxisRoot>\n        <BenchmarkRoot>\n          <BenchmarkLegend\n            comparisonType={ComparisonType.Relative}\n          />\n        </BenchmarkRoot>\n        <VizRoot ref={rootRef}>\n          {output}\n        </VizRoot>\n      </Root>\n    </>\n  );\n};\n\nexport default RCABarChart;","import React, {useRef, useEffect, useCallback} from 'react';\nimport {getStandardTooltip, RapidTooltipRoot} from '../../../utilities/rapidTooltip';\nimport DataViz, {\n  VizType,\n  ClusterBarChartDatum,\n} from 'react-fast-charts';\nimport {\n  CompositionType,\n} from '../../../types/graphQL/graphQLTypes';\nimport useFluent from '../../../hooks/useFluent';\nimport {max} from 'd3';\nimport {usePrevious} from 'react-use';\nimport {rgba} from 'polished';\n\ninterface Props {\n  data: ClusterBarChartDatum[];\n  compositionType: CompositionType;\n  height: number;\n  loading: boolean;\n  primaryName: string;\n  secondaryName: string;\n}\n\n// A/B strings used to allow for sorting in order\nexport enum Group {\n  Primary = 'A',\n  Secondary = 'B',\n}\n\nconst Chart = (props: Props) => {\n  const {\n    data, compositionType, height, loading,\n    primaryName, secondaryName,\n  } = props;\n  const getString = useFluent();\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\n\n  const setHovered = (datum: ClusterBarChartDatum, coords: {x: number, y: number}) => {\n    const node = tooltipRef.current;\n    if (node) {\n      const filteredData = data.filter(d => d.x === datum.x);\n      const primaryDatum = filteredData.find(d => d.groupName === Group.Primary);\n      const secondaryDatum = filteredData.find(d => d.groupName === Group.Secondary);\n      const primaryValue = primaryDatum ? primaryDatum.y : 0;\n      const secondaryValue = secondaryDatum ? secondaryDatum.y : 0;\n      const primaryValueText = primaryValue === 0 || primaryValue >= 0.01\n        ? primaryValue.toFixed(2) + '%' : '<0.01%';\n      const secondaryValueText = secondaryValue === 0 || secondaryValue >= 0.01\n        ? secondaryValue.toFixed(2) + '%' : '<0.01%';\n      const primaryDiff = primaryValue - secondaryValue;\n      const secondaryDiff = secondaryValue - primaryValue;\n      let primaryDiffValue: string;\n      if (primaryDiff < 0) {\n        primaryDiffValue = '';\n      } else if (primaryDiff < 0.01) {\n        primaryDiffValue = '+<0.01%';\n      } else {\n        primaryDiffValue = '+' + primaryDiff.toFixed(2) + '%';\n      }\n      let secondaryDiffValue: string;\n      if (secondaryDiff < 0) {\n        secondaryDiffValue = '';\n      } else if (secondaryDiff < 0.01) {\n        secondaryDiffValue = '+<0.01%';\n      } else {\n        secondaryDiffValue = '+' + secondaryDiff.toFixed(2) + '%';\n      }\n      node.innerHTML = getStandardTooltip({\n        title: datum.x,\n        color: rgba(datum.fill ? datum.fill : 'gray', 0.3),\n        rows: [\n          ['', primaryName, secondaryName ],\n          [\n            getString('tooltip-text-share-of', {value: compositionType}),\n            primaryValueText,\n            secondaryValueText,\n          ],\n          ['Difference', primaryDiffValue, secondaryDiffValue],\n        ],\n        boldColumns: [1, 2],\n        underlineRows: [0],\n        additionalHTML: datum.onClick\n          ? `<div style=\"padding: 0.35rem; font-style: italic; font-size: 0.7rem; text-align: center;\">\n              ${getString('global-click-to-expand-industry')}\n            </div>`\n          : undefined,\n      });\n      node.style.top = coords.y + 'px';\n      node.style.left = coords.x + 'px';\n      node.style.display = 'block';\n    }\n  };\n\n  const removeHovered = useCallback(() => {\n    const node = tooltipRef.current;\n    if (node) {\n      node.style.display = 'none';\n    }\n  }, [tooltipRef]);\n\n  useEffect(() => {\n    removeHovered();\n  }, [data, removeHovered]);\n\n  const allYValues: number[] = [];\n\n  const dataWithHover = data.map(d => {\n    allYValues.push(d.y);\n    return {\n      ...d,\n      onMouseMove: setHovered,\n      onMouseLeave: removeHovered,\n    };\n  });\n\n  const maxY = max(allYValues);\n  const prevMaxY = usePrevious(maxY);\n\n  return (\n    <>\n      <DataViz\n        id={'example-cluster-bar-chart'}\n        vizType={VizType.ClusterBarChart}\n        data={dataWithHover}\n        axisLabels={{left: getString('axis-text-percent-total-value', {\n          value: compositionType,\n        })}}\n        height={height}\n        formatAxis={{y: v => parseFloat(v.toFixed(2)) + '%'}}\n        animateBars={loading ? undefined : 300}\n        axisMinMax={{minY: 0, maxY}}\n        animateAxis={{\n          animationDuration: 500,\n          startMaxY: prevMaxY ? prevMaxY : 0.1,\n          startMinY: 0,\n        }}\n        chartTitle={`${primaryName} - ${secondaryName} Industry Comparison`}\n      />\n      <RapidTooltipRoot ref={tooltipRef} />\n    </>\n  );\n};\n\nexport default React.memo(Chart);\n","import React from 'react';\nimport StandardSideTextBlock from '../../../../components/general/StandardSideTextBlock';\nimport {\n  ContentParagraph,\n  ContentTitle,\n} from '../../../../styling/styleUtils';\nimport useFluent, { possessive } from '../../../../hooks/useFluent';\nimport useCurrentCity from '../../../../hooks/useCurrentCity';\nimport StandardSideTextLoading from '../../../../components/transitionStateComponents/StandardSideTextLoading';\nimport useCurrentBenchmark from '../../../../hooks/useCurrentBenchmark';\nimport Helmet from 'react-helmet';\nimport { isValidPeerGroup } from '../../../../types/graphQL/graphQLTypes';\nimport { RegionGroup } from '../../../../hooks/useClusterRCAData';\n\ninterface Props {\n  isClusterView: boolean;\n  prefix: 'relative-presence' | 'absolute-presence' | 'absolute-nested-bar-chart';\n}\n\nconst SideText = (props: Props) => {\n  const {\n    isClusterView, prefix,\n  } = props;\n  const getString = useFluent();\n  const {loading, city} = useCurrentCity();\n  const { benchmark, benchmarkNameShort } = useCurrentBenchmark();\n  const benchmarkType = isValidPeerGroup(benchmark) || benchmark === RegionGroup.World ? benchmark : benchmarkNameShort;\n  if (loading) {\n    return <StandardSideTextLoading />;\n  } else if (city) {\n    const cityName = city.name ? city.name : '';\n    const cityNamePossessive = possessive([cityName]);\n    const its = getString('good-at-its', {'benchmark-type': benchmarkType});\n    const the = getString('good-at-the', {'benchmark-type': benchmarkType});\n    const peerGroupName = getString('good-at-benchmark', {'benchmark-type': benchmarkType});\n    const peerGroupPossessive = possessive([peerGroupName]);\n    const industrialKnowledgeCluster =  isClusterView ? 'knowledge cluster' : 'industrial';\n    const industrysClusters = isClusterView ? 'clusters' : 'industries';\n    const industryCluster = isClusterView ? 'cluster' : 'industry';\n    const title = getString('good-at-title', {\n      'name': cityNamePossessive,\n    });\n    const para1 = getString(prefix + '-para-1', {\n      'city': cityName,\n      'city-posessive': cityName,\n      'peer-group': peerGroupName,\n      'peer-group-possessive': peerGroupPossessive,\n      'its': its,\n      'the': the,\n      'industrial-knowledge-cluster': industrialKnowledgeCluster,\n      'industries-clusters': industrysClusters,\n      'industry-cluster': industryCluster,\n    });\n    const para2 = getString(prefix + '-para-2', {\n      'city': cityName,\n      'city-posessive': cityName,\n      'peer-group': peerGroupName,\n      'peer-group-possessive': peerGroupPossessive,\n      'its': its,\n      'the': the,\n      'industrial-knowledge-cluster': industrialKnowledgeCluster,\n      'industries-clusters': industrysClusters,\n      'industry-cluster': industryCluster,\n    });\n    const para3 = getString(prefix + '-para-3', {\n      'city': cityName,\n      'city-posessive': cityName,\n      'peer-group': peerGroupName,\n      'peer-group-possessive': peerGroupPossessive,\n      'its': its,\n      'the': the,\n      'industrial-knowledge-cluster': industrialKnowledgeCluster,\n      'industries-clusters': industrysClusters,\n      'industry-cluster': industryCluster,\n    });\n    const para4 = prefix !== 'absolute-nested-bar-chart' ? getString(prefix + '-para-4', {\n      'city': cityName,\n      'city-posessive': cityName,\n      'peer-group': peerGroupName,\n      'peer-group-possessive': peerGroupPossessive,\n      'its': its,\n      'the': the,\n      'industrial-knowledge-cluster': industrialKnowledgeCluster,\n      'industries-clusters': industrysClusters,\n      'industry-cluster': industryCluster,\n    }) : '';\n\n    return (\n      <StandardSideTextBlock>\n        <Helmet>\n          <title>{title + ' | ' + getString('meta-data-title-default-suffix')}</title>\n          <meta property='og:title' content={title + ' | ' + getString('meta-data-title-default-suffix')} />\n        </Helmet>\n        <ContentTitle>{title}</ContentTitle>\n        <ContentParagraph>{para1}</ContentParagraph>\n        <ContentParagraph>{para2}</ContentParagraph>\n        <ContentParagraph>{para3}</ContentParagraph>\n        <ContentParagraph>{para4}</ContentParagraph>\n      </StandardSideTextBlock>\n    );\n  } else {\n    return null;\n  }\n\n};\n\nexport default SideText;\n","import React, { useEffect } from 'react';\nimport ReactGA from 'react-ga';\nimport { Route } from 'react-router-dom';\n\nconst TrackedRoute = (props: any) => {\n  useEffect(() => {\n    const page = props.location.pathname;\n    ReactGA.set({page});\n    ReactGA.pageview(page);\n  }, [props.location.pathname]);\n\n  return (\n    <Route {...props}/>\n  );\n};\n\nexport default TrackedRoute;\n","import React, {useRef, useState} from 'react';\nimport ComparisonBarChart, {\n  BarDatum,\n  RowHoverEvent,\n  Layout,\n} from 'react-comparison-bar-chart';\nimport {rgba} from 'polished';\nimport useGlobalLocationData from '../../../hooks/useGlobalLocationData';\nimport useFluent from '../../../hooks/useFluent';\nimport {getStandardTooltip, RapidTooltipRoot} from '../../../utilities/rapidTooltip';\nimport {\n  CityIndustryYear,\n  CompositionType,\n  isValidPeerGroup,\n  PeerGroup,\n} from '../../../types/graphQL/graphQLTypes';\nimport QuickError from '../../transitionStateComponents/QuickError';\nimport {RegionGroup} from './cityIndustryComparisonQuery';\n\nexport interface FilteredDatum {\n  id: CityIndustryYear['naicsId'];\n  title: string;\n  value: number;\n  color: string;\n  topParent: CityIndustryYear['naicsId'];\n}\n\nconst formatAxisValue = (value: number) => {\n  return parseFloat((value).toFixed(1)) + '%';\n};\n\ninterface Props {\n  filteredPrimaryData: FilteredDatum[];\n  filteredSecondaryData: FilteredDatum[];\n  primaryTotal: number;\n  secondaryTotal: number;\n  primaryCityId: number;\n  secondaryCityId: number | RegionGroup | PeerGroup;\n  highlighted: string | undefined;\n  compositionType: CompositionType;\n  isClusterView: boolean;\n}\n\nconst Chart = (props: Props) => {\n  const {\n    filteredPrimaryData, filteredSecondaryData,\n    primaryTotal, secondaryTotal,\n    primaryCityId, secondaryCityId,\n    highlighted, compositionType,\n    isClusterView,\n  } = props;\n\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\n\n  const {data: globalData} = useGlobalLocationData();\n  const getString = useFluent();\n\n  const [highlightError, setHighlightError] = useState<boolean>(false);\n\n  const primaryData: BarDatum[] = [];\n  const secondaryData: BarDatum[] = [];\n    filteredPrimaryData.forEach(d => {\n      const secondaryDatum = filteredSecondaryData.find(d2 => d2.id === d.id);\n      const primaryShare = d.value / primaryTotal;\n      const secondaryShare = secondaryDatum ? secondaryDatum.value / secondaryTotal : 0;\n      const difference = primaryShare - secondaryShare;\n      if (difference > 0) {\n        primaryData.push({...d, value: difference * 100});\n      }\n    });\n    filteredSecondaryData.forEach(d => {\n      const primaryDatum = filteredPrimaryData.find(d2 => d2.id === d.id);\n      const secondaryShare = d.value / secondaryTotal;\n      const primaryShare = primaryDatum ? primaryDatum.value / primaryTotal : 0;\n      const difference = secondaryShare - primaryShare;\n      if (difference > 0) {\n        secondaryData.push({...d, value: difference * 100});\n      }\n    });\n\n  const primaryCityDatum = globalData\n    ? globalData.cities.find(c => parseInt(c.cityId, 10) === primaryCityId) : undefined;\n  const primaryCityName = primaryCityDatum && primaryCityDatum.name? primaryCityDatum.name : '';\n\n  let secondaryCityName: string;\n  if (secondaryCityId === RegionGroup.World) {\n    secondaryCityName = getString('global-text-world');\n  } else if (isValidPeerGroup(secondaryCityId)) {\n    secondaryCityName = getString('global-formatted-peer-groups', {type: secondaryCityId});\n  } else {\n    const secondaryCityDatum = globalData\n      ? globalData.cities.find(c => parseInt(c.cityId, 10) === secondaryCityId) : undefined;\n    secondaryCityName = secondaryCityDatum && secondaryCityDatum.name ? secondaryCityDatum.name : '';\n  }\n\n  const setHovered = (e: RowHoverEvent | undefined) => {\n    const node = tooltipRef.current;\n    if (node) {\n      if (e && e.datum) {\n        const {datum, mouseCoords} = e;\n        const primaryDatum = filteredPrimaryData.find(d => d.id === datum.id);\n        const secondaryDatum = filteredSecondaryData.find(d => d.id === datum.id);\n        const primaryValue = primaryDatum ? primaryDatum.value / primaryTotal * 100: 0;\n        const secondaryValue = secondaryDatum ? secondaryDatum.value / secondaryTotal * 100 : 0;\n        const primaryValueText = primaryValue === 0 || primaryValue >= 0.01\n          ? primaryValue.toFixed(2) + '%' : '<0.01%';\n        const secondaryValueText = secondaryValue === 0 || secondaryValue >= 0.01\n          ? secondaryValue.toFixed(2) + '%' : '<0.01%';\n        const primaryDiff = primaryValue - secondaryValue;\n        const secondaryDiff = secondaryValue - primaryValue;\n        let primaryDiffValue: string;\n        if (primaryDiff < 0) {\n          primaryDiffValue = '';\n        } else if (primaryDiff < 0.01) {\n          primaryDiffValue = '+<0.01%';\n        } else {\n          primaryDiffValue = '+' + primaryDiff.toFixed(2) + '%';\n        }\n        let secondaryDiffValue: string;\n        if (secondaryDiff < 0) {\n          secondaryDiffValue = '';\n        } else if (secondaryDiff < 0.01) {\n          secondaryDiffValue = '+<0.01%';\n        } else {\n          secondaryDiffValue = '+' + secondaryDiff.toFixed(2) + '%';\n        }\n\n\n        node.innerHTML = getStandardTooltip({\n          title: datum.title,\n          color: rgba(datum.color, 0.3),\n          rows: [\n            ['', secondaryCityName, primaryCityName],\n            [\n              getString('tooltip-text-share-of', {value: compositionType}),\n              secondaryValueText,\n              primaryValueText,\n            ],\n            ['Difference', secondaryDiffValue, primaryDiffValue],\n          ],\n          boldColumns: [1, 2],\n          underlineRows: [0],\n        });\n        node.style.top = mouseCoords.y + 'px';\n        node.style.left = mouseCoords.x + 'px';\n        node.style.display = 'block';\n      } else {\n        node.style.display = 'none';\n      }\n    }\n  };\n\n  const highlightErrorPopup = highlightError ? (\n    <QuickError\n      closeError={() => setHighlightError(false)}\n    >\n      {getString('global-ui-error-industry-not-in-data-set')}\n    </QuickError>\n  ) : null;\n\n  const expandCollapseText = {\n    toExpand: isClusterView\n      ? getString('cities-top-10-comparison-chart-expand-clusters')\n      : getString('cities-top-10-comparison-chart-expand'),\n    toCollapse: isClusterView\n      ? getString('cities-top-10-comparison-chart-collapse-clusters')\n      : getString('cities-top-10-comparison-chart-collapse'),\n  };\n  return (\n    <>\n      <ComparisonBarChart\n        primaryData={primaryData}\n        secondaryData={secondaryData}\n        nValuesToShow={10}\n        formatValue={formatAxisValue}\n        expandCollapseText={expandCollapseText}\n        onRowHover={setHovered}\n        highlighted={highlighted}\n        onHighlightError={() => setHighlightError(true)}\n        layout={Layout.Left}\n      />\n      <RapidTooltipRoot ref={tooltipRef} />\n      {highlightErrorPopup}\n    </>\n  );\n};\n\nexport default React.memo(Chart);\n","import React, {useEffect, useState, useRef} from 'react';\nimport {\n  DigitLevel,\n  ClassificationNaicsIndustry,\n  CompositionType,\n  PeerGroup,\n  ClassificationNaicsCluster,\n} from '../../../types/graphQL/graphQLTypes';\nimport {\n  useGlobalIndustryMap,\n} from '../../../hooks/useGlobalIndustriesData';\nimport {\n  usePrevious,\n} from 'react-use';\nimport {useWindowWidth} from '../../../contextProviders/appContext';\nimport {breakPoints} from '../../../styling/GlobalGrid';\nimport PreChartRow, {VizNavItem} from '../../../components/general/PreChartRow';\nimport ErrorBoundary from '../ErrorBoundary';\nimport styled from 'styled-components/macro';\nimport {\n  clusterColorMap,\n  educationColorRange,\n  sectorColorMap,\n  wageColorRange,\n} from '../../../styling/styleUtils';\nimport SimpleError from '../../transitionStateComponents/SimpleError';\nimport LoadingBlock, {LoadingOverlay} from '../../transitionStateComponents/VizLoadingBlock';\nimport Chart, {FilteredDatum} from './Chart';\nimport {useComparisonQuery, SuccessResponse, RegionGroup} from './cityIndustryComparisonQuery';\nimport {Mode} from '../../general/searchIndustryInGraphDropdown';\nimport {\n  BottomAxisRoot,\n  BenchmarkRoot,\n  AxisLabelLeft,\n  AxisLabelRight,\n  AxisLabelBase,\n  LeftAxisRoot,\n  AxisLabelHigh,\n} from '../verticalBarChart/RCABarChart';\nimport PresenceToggle, { Highlighted } from '../legend/PresenceToggle';\nimport { ComparisonType } from '../../navigation/secondaryHeader/comparisons/AddComparisonModal';\nimport BenchmarkLegend from '../legend/BenchmarkLegend';\nimport { AggregationMode, CityRoutes, ClusterLevel, ColorBy } from '../../../routing/routes';\nimport { createRoute } from '../../../routing/Utils';\nimport { useHistory } from 'react-router-dom';\nimport useFluent, { possessive } from '../../../hooks/useFluent';\nimport { useGlobalClusterMap } from '../../../hooks/useGlobalClusterData';\nimport { scaleLinear } from 'd3-scale';\nimport { useAggregateIndustryMap } from '../../../hooks/useAggregateIndustriesData';\nimport { defaultYear } from '../../../Utils';\nimport useCurrentCity from '../../../hooks/useCurrentCity';\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  grid-column: 1;\n  grid-row: 2;\n  position: relative;\n  display: grid;\n  grid-template-rows: 1fr 3rem auto;\n  grid-template-columns: 3.5rem 1fr;\n\n  @media ${breakPoints.small} {\n    grid-row: 3;\n    grid-column: 1;\n  }\n\n  @media ${breakPoints.small} {\n    grid-row: 3;\n    grid-column: 1;\n  }\n`;\n\nconst VizRoot = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  grid-column: 2;\n  grid-row: 1;\n`;\n\nconst VizContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n\n  .react-comparison-bar-chart-title {\n    h2 {\n      text-transform: none;\n      font-weight: 600;\n    }\n  }\n`;\n\ninterface Props {\n  primaryCity: number;\n  comparison: number | RegionGroup | PeerGroup;\n  year: number;\n  highlighted: string | undefined;\n  setHighlighted: (value: string | undefined) => void;\n  digitLevel: DigitLevel;\n  compositionType: CompositionType;\n  hiddenSectors: ClassificationNaicsIndustry['id'][];\n  vizNavigation: VizNavItem[];\n  clusterLevel: ClusterLevel;\n  isClusterView: boolean;\n  hiddenClusters: ClassificationNaicsCluster['id'][];\n  colorBy: ColorBy;\n}\n\nconst TopIndustryComparisonBarChart = (props: Props) => {\n  const {\n    primaryCity, comparison, year, digitLevel, compositionType, hiddenSectors,\n    highlighted, setHighlighted, vizNavigation, clusterLevel, isClusterView,\n    hiddenClusters, colorBy,\n  } = props;\n\n  const currentCity = useCurrentCity();\n  const industryMap = useGlobalIndustryMap();\n  const clusterMap = useGlobalClusterMap();\n  const aggregateIndustryDataMap = useAggregateIndustryMap({ level: digitLevel, year: defaultYear, clusterLevel: parseInt(clusterLevel, 10) });\n  const aggregateData = isClusterView ? aggregateIndustryDataMap.data.clusters : aggregateIndustryDataMap.data.industries;\n  const globalAggregateData = isClusterView ? aggregateIndustryDataMap.data.clusterMinMax : aggregateIndustryDataMap.data.globalMinMax;\n  const industryOrClusterMap = isClusterView ? clusterMap : industryMap;\n  const parentField = isClusterView ? 'clusterIdTopParent' : 'naicsIdTopParent';\n  const colorMap = isClusterView ? clusterColorMap : sectorColorMap;\n  const level = isClusterView ? clusterLevel : digitLevel;\n  const hiddenIndustriesOrClusters = isClusterView ? hiddenClusters : hiddenSectors;\n  const windowDimensions = useWindowWidth();\n  const getString = useFluent();\n  const history = useHistory();\n  const {loading, error, data} = useComparisonQuery({\n    primaryCity,\n    comparison,\n    year,\n    aggregation: isClusterView ? AggregationMode.cluster : AggregationMode.industries,\n  });\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const [dimensions, setDimensions] = useState<{width: number, height: number} | undefined>(undefined);\n  useEffect(() => {\n    const node = rootRef.current;\n    if (node) {\n      const {width, height} = node.getBoundingClientRect();\n      setDimensions({width, height});\n    }\n  }, [rootRef, windowDimensions]);\n\n  let colorScale: (val: number) => string;\n  if (colorBy === ColorBy.education && aggregateIndustryDataMap.data !== undefined) {\n    colorScale = scaleLinear()\n      .domain([\n        globalAggregateData.minYearsEducation,\n        globalAggregateData.medianYearsEducation,\n        globalAggregateData.maxYearsEducation,\n      ])\n      .range(educationColorRange as any) as any;\n  } else if (colorBy === ColorBy.wage && aggregateIndustryDataMap.data !== undefined) {\n    colorScale = scaleLinear()\n      .domain([\n        globalAggregateData.minHourlyWage,\n        globalAggregateData.medianHourlyWage,\n        globalAggregateData.maxHourlyWage,\n      ])\n      .range(wageColorRange as any) as any;\n  } else {\n    colorScale = () => 'lightgray';\n  }\n\n  const prevData = usePrevious(data);\n  let dataToUse: SuccessResponse | undefined;\n  if (data) {\n    dataToUse = data;\n  } else if (prevData) {\n    dataToUse = prevData;\n  } else {\n    dataToUse = undefined;\n  }\n\n  let output: React.ReactElement<any> | null;\n  if (industryOrClusterMap.loading || !dimensions || (loading && prevData === undefined)) {\n    output = <LoadingBlock />;\n  } else if (error !== undefined) {\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(error);\n  }  else if (industryOrClusterMap.error !== undefined) {\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(error);\n  } else if (dataToUse !== undefined) {\n    const {primaryCityIndustries, secondaryCityIndustries} = dataToUse;\n    let primaryTotal = 0;\n    let secondaryTotal = 0;\n    const filteredPrimaryData: FilteredDatum[] = [];\n    primaryCityIndustries.forEach(({ industryId, numCompany, numEmploy}) => {\n      const industry = industryOrClusterMap.data[industryId];\n      if (industry && (industry.level + '') === (level + '')) {\n        const {name} = industry;\n        let color: string;\n        if ((colorBy === ColorBy.education || colorBy === ColorBy.wage) && aggregateIndustryDataMap.data) {\n          const target = industryId !== null ? aggregateData[industryId + ''] : undefined;\n          if (target) {\n            const targetValue = colorBy === ColorBy.education\n              ? target.yearsEducationRank : target.hourlyWageRank;\n            color = colorScale(targetValue);\n          } else {\n            color = 'lightgray';\n          }\n        } else {\n          const colorDatum = industry\n            ? colorMap.find(s => s.id === (industry as any)[parentField].toString()) : undefined;\n          color = colorDatum ? colorDatum.color : 'lightgray';\n        }\n        const topParent = (industry as any)[parentField];\n        const companies = numCompany ? numCompany : 0;\n        const employees = numEmploy ? numEmploy : 0;\n        primaryTotal = compositionType === CompositionType.Companies ? primaryTotal + companies : primaryTotal + employees;\n        if (!hiddenIndustriesOrClusters.includes(topParent.toString())) {\n          filteredPrimaryData.push({\n            id: industryId,\n            value: compositionType === CompositionType.Companies ? companies : employees,\n            title: name ? name : '',\n            topParent: topParent.toString(),\n            color,\n          });\n        }\n      }\n    });\n    const filteredSecondaryData: FilteredDatum[] = [];\n    secondaryCityIndustries.forEach(({ industryId, numCompany, numEmploy}) => {\n      const industry = industryOrClusterMap.data[industryId];\n      if (industry && (industry.level + '') === (level + '')) {\n        const { name } = industry;\n        let color: string;\n        if ((colorBy === ColorBy.education || colorBy === ColorBy.wage) && aggregateIndustryDataMap.data) {\n          const target = industryId !== null ? aggregateData[industryId + ''] : undefined;\n          if (target) {\n            const targetValue = colorBy === ColorBy.education\n              ? target.yearsEducationRank : target.hourlyWageRank;\n            color = colorScale(targetValue);\n          } else {\n            color = 'lightgray';\n          }\n        } else {\n          const colorDatum = industry\n            ? colorMap.find(s => s.id === (industry as any)[parentField].toString()) : undefined;\n          color = colorDatum ? colorDatum.color : 'lightgray';\n        }\n        const topParent = (industry as any)[parentField];\n        const companies = numCompany ? numCompany : 0;\n        const employees = numEmploy ? numEmploy : 0;\n        secondaryTotal = compositionType === CompositionType.Companies ? secondaryTotal + companies : secondaryTotal + employees;\n        if (!hiddenIndustriesOrClusters.includes(topParent.toString())) {\n          filteredSecondaryData.push({\n            id: industryId,\n            value: compositionType === CompositionType.Companies ? companies : employees,\n            title: name ? name : '',\n            topParent: topParent.toString(),\n            color,\n          });\n        }\n      }\n    });\n    if (!filteredPrimaryData.length && !filteredSecondaryData.length) {\n      output = (\n        <LoadingOverlay>\n          <SimpleError fluentMessageId={'global-ui-error-no-sectors-selected'} />\n        </LoadingOverlay>\n      );\n    } else {\n      const loadingOverlay = loading ? <LoadingBlock /> : null;\n      output = (\n        <VizContainer>\n            <ErrorBoundary>\n              <Chart\n                key={dimensions.height.toString() + dimensions.width.toString()}\n                filteredPrimaryData={filteredPrimaryData}\n                filteredSecondaryData={filteredSecondaryData}\n                primaryTotal={primaryTotal}\n                secondaryTotal={secondaryTotal}\n                primaryCityId={primaryCity}\n                secondaryCityId={comparison}\n                highlighted={highlighted}\n                compositionType={compositionType}\n                isClusterView={isClusterView}\n              />\n            </ErrorBoundary>\n          {loadingOverlay}\n        </VizContainer>\n      );\n    }\n  } else {\n    output = null;\n  }\n\n  const onButtonClick = (value: Highlighted) => {\n    if (value === Highlighted.relative) {\n      const route = createRoute.city(CityRoutes.CityGoodAt, primaryCity + '');\n      history.push(route + history.location.search);\n    }\n  };\n\n  const cityName = currentCity && currentCity.city && currentCity.city.name ? currentCity.city.name : '---';\n\n  const textLeft = getString('cities-top-10-comparison-chart-title', {\n    name: 'Peers\\'',\n    other: possessive([cityName]),\n  });\n  const textRight = getString('cities-top-10-comparison-chart-title', {\n    name: possessive([cityName]),\n    other: 'Peers\\'',\n  });\n\n  return (\n    <>\n      <PreChartRow\n        searchInGraphOptions={{\n          hiddenParents: isClusterView ? hiddenClusters : hiddenSectors,\n          digitLevel,\n          clusterLevel,\n          setHighlighted,\n          mode: isClusterView ? Mode.cluster : Mode.naics,\n        }}\n        settingsOptions={{\n          compositionType: true,\n          clusterLevel: isClusterView ? true : undefined,\n          digitLevel: isClusterView ? undefined : true,\n          colorBy: true,\n          aggregationMode: true,\n        }}\n        vizNavigation={vizNavigation}\n      />\n      <Root ref={rootRef}>\n        <LeftAxisRoot>\n          <AxisLabelBase>← {getString('global-absolute-presence-lower')}</AxisLabelBase>\n          <AxisLabelHigh>{getString('global-absolute-presence-higher')} →</AxisLabelHigh>\n        </LeftAxisRoot>\n        <BottomAxisRoot>\n          <AxisLabelLeft\n            dangerouslySetInnerHTML={{__html: textLeft }}\n            style={{whiteSpace: 'normal'}}\n          />\n          <AxisLabelBase>\n            <PresenceToggle\n              togglePresence={true}\n              highlight={Highlighted.absolute}\n              showArrows={true}\n              onButtonClick={onButtonClick}\n            />\n          </AxisLabelBase>\n          <AxisLabelRight\n            dangerouslySetInnerHTML={{__html: textRight }}\n            style={{whiteSpace: 'normal'}}\n          />\n        </BottomAxisRoot>\n        <BenchmarkRoot>\n          <BenchmarkLegend\n            comparisonType={ComparisonType.Absolute}\n          />\n        </BenchmarkRoot>\n        <VizRoot>\n          {output}\n        </VizRoot>\n      </Root>\n    </>\n  );\n};\n\nexport default TopIndustryComparisonBarChart;\n","import {extent} from 'd3-array';\nimport {select} from 'd3-selection';\n\ninterface Ratio {\n  w: number;\n  h: number;\n}\n\nexport const getAspectRatio = (aspect: Ratio, actual: Ratio, buffer: number) => {\n  const longerAspectSide = aspect.w > aspect.h ? 'width' : 'height';\n  const smallerActualValue = (actual.w > actual.h ? actual.h : actual.w) - (buffer * 2);\n  let ratio = longerAspectSide === 'height' ? aspect.h / aspect.w : aspect.w / aspect.h;\n  let width = longerAspectSide === 'height' ? smallerActualValue : smallerActualValue * ratio;\n  let height = longerAspectSide === 'width' ? smallerActualValue : smallerActualValue * ratio;\n  if (width > actual.w || height > actual.h) {\n    ratio = longerAspectSide === 'width' ? aspect.h / aspect.w : aspect.w / aspect.h;\n    width = longerAspectSide === 'width' ? smallerActualValue : smallerActualValue * ratio;\n    height = longerAspectSide === 'height' ? smallerActualValue : smallerActualValue * ratio;\n  }\n  const margin = {\n    left: ((actual.w - width) / 2) + (buffer / 2), right: ((actual.w - width) / 2) + (buffer / 2),\n    top: ((actual.h - height) / 2) + (buffer / 2), bottom: ((actual.h - height) / 2) + (buffer / 2),\n  };\n  return {\n    width, height, margin,\n    outerWidth: actual.w,\n    outerHeight: actual.h,\n  };\n};\n\nexport enum Ring {\n  Inner = 'inner',\n  Outer = 'outer',\n}\nconst nodeOffsetMap: {count: number, offset: number, ring: Ring}[] = [\n  {\n    count: 9,\n    offset: -3,\n    ring: Ring.Inner,\n  },\n  {\n    count: 4,\n    offset: -2,\n    ring: Ring.Inner,\n  },\n  {\n    count: 3,\n    offset: -1.5,\n    ring: Ring.Inner,\n  },\n  {\n    count: 2,\n    offset: -1,\n    ring: Ring.Inner,\n  },\n  {\n    count: 9,\n    offset: -2,\n    ring: Ring.Outer,\n  },\n  {\n    count: 4,\n    offset: -1,\n    ring: Ring.Outer,\n  },\n  {\n    count: 3,\n    offset: -0.5,\n    ring: Ring.Outer,\n  },\n  {\n    count: 2,\n    offset: 0,\n    ring: Ring.Outer,\n  },\n];\n\nexport function drawPoint(\n  r: number, currentPoint: number, totalPoints: number, centerX: number, centerY: number,\n  ring?: Ring,\n) {\n  const offsetObj = ring && nodeOffsetMap.find(d => d.ring === ring && d.count <= totalPoints);\n  const offset = offsetObj ? offsetObj.offset : 0;\n  const theta = ((Math.PI*2) / totalPoints);\n  const angle = (theta * (currentPoint + offset));\n\n  const x = (r * Math.cos(angle) + centerX);\n  const y = (r * Math.sin(angle) + centerY);\n\n  return {x, y};\n}\n\nexport const getBounds = (\n  xValues: number[], yValues: number[],\n  innerWidth: number, innerHeight: number,\n  outerWidth: number, outerHeight: number, maxZoom: number,\n) => {\n  const xBounds = extent(xValues) as [number, number];\n  const yBounds = extent(yValues) as [number, number];\n  const bounds = [\n    [xBounds[0], yBounds[0]],\n    [xBounds[1], yBounds[1]],\n  ];\n  const dx = bounds[1][0] - bounds[0][0];\n  const dy = bounds[1][1] - bounds[0][1];\n  const x = (bounds[0][0] + bounds[1][0]) / 2;\n  const y = (bounds[0][1] + bounds[1][1]) / 2;\n  const scale = Math.max(1, Math.min(maxZoom, 0.9 / Math.max(dx / innerWidth, dy / innerHeight)));\n  const translate = [outerWidth / 2 - scale * x, outerHeight / 2 - scale * y];\n\n  return {translate, scale};\n};\n\nexport const ellipsisText = (text: string, maxChar: number) => {\n  if (text.trim().length < maxChar + 3) {\n    return text;\n  } else {\n    return text.slice(0, maxChar) + '...';\n  }\n};\n\nexport function wrap(text: any, width: number, height: number) {\n  text.each(function() {\n    // @ts-ignore\n    const t = select(this);\n    // @ts-ignore\n    const words = t.text().split(/\\s+/).reverse();\n    let word = words.pop();\n    let line: any[] = [];\n    let lineNumber = 0; //<-- 0!\n    const lineHeight = 1.2; // ems\n    const x = t.attr('x'); //<-- include the x!\n    const y = t.attr('y');\n    const dy = t.attr('dy') ? t.attr('dy') : 0; //<-- null check\n    let tspan = t.text(null).append('tspan').attr('x', x).attr('y', y).attr('dy', dy + 'em');\n    while (word !== undefined) {\n      line.push(word);\n      tspan.text(line.join(' '));\n      const node = tspan.node();\n      if (node && node.getComputedTextLength() > (width * 0.8)) {\n        line.pop();\n        tspan.text(line.join(' '));\n        line = [word];\n        // @ts-ignore\n        tspan = t.append('tspan').attr('x', x).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);\n      }\n      word = words.pop();\n    }\n    if (t.node().getBBox().width > width || t.node().getBBox().height > height * 0.8) {\n      t.attr('opacity', '0');\n    }\n  });\n}\n","import React, {useEffect, useState, useRef} from 'react';\nimport {\n  DigitLevel,\n  ClassificationNaicsIndustry,\n  CompositionType,\n  isValidPeerGroup,\n  PeerGroup,\n  ClassificationNaicsCluster,\n} from '../../../types/graphQL/graphQLTypes';\nimport {\n  useGlobalIndustryMap,\n} from '../../../hooks/useGlobalIndustriesData';\nimport {\n  usePrevious,\n} from 'react-use';\nimport {useWindowWidth} from '../../../contextProviders/appContext';\nimport {breakPoints} from '../../../styling/GlobalGrid';\nimport PreChartRow, {VizNavItem} from '../../../components/general/PreChartRow';\nimport ErrorBoundary from '../ErrorBoundary';\nimport styled from 'styled-components/macro';\nimport {\n  sectorColorMap,\n  secondaryFont,\n  baseColor,\n  clusterColorMap,\n} from '../../../styling/styleUtils';\nimport SimpleError from '../../transitionStateComponents/SimpleError';\nimport LoadingBlock, {LoadingOverlay} from '../../transitionStateComponents/VizLoadingBlock';\nimport {\n  ClusterBarChartDatum,\n} from 'react-fast-charts';\nimport {\n  useComparisonQuery,\n  SuccessResponse,\n  RegionGroup,\n} from '../comparisonBarChart/cityIndustryComparisonQuery';\nimport orderBy from 'lodash/orderBy';\nimport {rgba} from 'polished';\nimport useGlobalLocationData from '../../../hooks/useGlobalLocationData';\nimport useFluent from '../../../hooks/useFluent';\nimport Chart, {Group} from './Chart';\nimport {Mode} from '../../general/searchIndustryInGraphDropdown';\nimport PresenceToggle, { Highlighted } from '../legend/PresenceToggle';\nimport { ComparisonType } from '../../navigation/secondaryHeader/comparisons/AddComparisonModal';\nimport BenchmarkLegend from '../legend/BenchmarkLegend';\nimport { AggregationMode, CityRoutes, ClusterLevel } from '../../../routing/routes';\nimport { createRoute } from '../../../routing/Utils';\nimport { useHistory } from 'react-router-dom';\nimport { useGlobalClusterMap } from '../../../hooks/useGlobalClusterData';\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  grid-column: 1;\n  grid-row: 2;\n  position: relative;\n  display: grid;\n  grid-template-rows: 4rem 2rem 1fr 3rem auto;\n\n  @media ${breakPoints.small} {\n    grid-row: 3;\n    grid-column: 1;\n  }\n`;\n\nconst BottomAxisRoot = styled.div`\n  grid-row: 4;\n  grid-column: 1;\n  white-space: nowrap;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  pointer-events: none;\n\n  @media (max-width: 990px) {\n    grid-template-columns: 1 / -1;\n  }\n\n  @media (max-width: 920px) {\n    justify-content: center;\n  }\n`;\n\nconst BenchmarkRoot = styled(BottomAxisRoot)`\n  grid-row: 5;\n  justify-content: center;\n  white-space: normal;\n`;\n\nconst AxisLabelBase = styled.div`\n  font-weight: 600;\n  font-size: 0.75rem;\n  color: ${baseColor};\n  text-transform: uppercase;\n\n  @media (max-width: 1000px) {\n    font-size: 0.6rem;\n  }\n\n  @media (max-height: 600px) {\n    font-size: 0.65rem;\n  }\n`;\n\nconst SizingContainer = styled.div`\n  width: 100%;\n  grid-row: 3;\n`;\n\nconst VizContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n\n  .cluster-bar-chart-y-axis-label {\n    text-transform: uppercase;\n    font-size: 0.75rem;\n  }\n`;\n\nconst BreadCrumbList = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  align-items: center;\n\n  @media ${breakPoints.small} {\n    flex-wrap: wrap;\n  }\n`;\n\nconst breadCrumbFontSize = 'clamp(0.55rem, 0.9vw, 0.85rem)';\n\nconst BreadCrumb = styled.li`\n  font-size: 0.6rem;\n  font-size: ${breadCrumbFontSize};\n  max-width: 20%;\n  padding-right: 2rem;\n  box-sizing: border-box;\n  font-family: ${secondaryFont};\n  position: relative;\n`;\n\nconst BreadCrumbLink = styled.button`\n  border: none;\n  background-color: transparent;\n  padding: 0;\n  font-size: 0.6rem;\n  font-size: ${breadCrumbFontSize};\n  font-family: ${secondaryFont};\n  color: rgb(78, 140, 141);\n  cursor: pointer;\n  text-align: left;\n  display: flex;\n  align-items: center;\n\n  span {\n    text-decoration: underline;\n  }\n\n  &:after {\n    content: '→';\n    margin: 0 0.5rem;\n    font-size: 1rem;\n    text-decoration: none;\n    display: inline-block;\n    position: absolute;\n    right: 0;\n  }\n`;\n\nconst PrimarySecondaryLegend = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst LegendBlock = styled.div`\n  width: 2em;\n  height: 1rem;\n  margin: 0 0.1rem;\n`;\n\nconst LegendText = styled.div`\n  font-size: 0.75rem;\n  text-transform: uppercase;\n  margin: 0 0.5rem;\n`;\n\ninterface Props {\n  primaryCity: number;\n  comparison: number | RegionGroup | PeerGroup;\n  year: number;\n  highlighted: number | null;\n  setHighlighted: (value: string | undefined) => void;\n  compositionType: CompositionType;\n  hiddenSectors: ClassificationNaicsIndustry['id'][];\n  vizNavigation: VizNavItem[];\n  isClusterView: boolean;\n  hiddenClusters: ClassificationNaicsCluster['id'][];\n}\n\nconst IndustryZoomableBarChart = (props: Props) => {\n  const {\n    primaryCity, comparison, year, compositionType, highlighted,\n    hiddenSectors, setHighlighted, vizNavigation,\n    isClusterView, hiddenClusters,\n  } = props;\n\n  const {loading, error, data} = useComparisonQuery({\n    primaryCity, comparison, year,\n    aggregation: isClusterView ? AggregationMode.cluster : AggregationMode.industries,\n  });\n  const history = useHistory();\n  const industryMap = useGlobalIndustryMap();\n  const clusterMap = useGlobalClusterMap({skipLevel2: true});\n  const industryOrClusterMap = isClusterView ? clusterMap : industryMap;\n  const parentField = isClusterView ? 'clusterIdTopParent' : 'naicsIdTopParent';\n  const idField = isClusterView ? 'clusterId' : 'naicsId';\n  const colorMap = isClusterView ? clusterColorMap : sectorColorMap;\n  const hiddenIndustriesOrClusters = isClusterView ? hiddenClusters : hiddenSectors;\n  const windowDimensions = useWindowWidth();\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const [dimensions, setDimensions] = useState<{width: number, height: number} | undefined>(undefined);\n  const getString = useFluent();\n  const {data: globalData} = useGlobalLocationData();\n\n  useEffect(() => {\n    setHighlighted(undefined);\n  }, [isClusterView, setHighlighted]);\n\n  const primaryCityDatum = globalData\n    ? globalData.cities.find(c => parseInt(c.cityId, 10) === primaryCity) : undefined;\n  const primaryCityName = primaryCityDatum && primaryCityDatum.name? primaryCityDatum.name : '';\n\n  let secondaryCityName: string;\n  if (comparison === RegionGroup.World) {\n    secondaryCityName = getString('global-text-world');\n  } else if (isValidPeerGroup(comparison)) {\n    secondaryCityName = getString('global-formatted-peer-groups', {type: comparison});\n  } else {\n    const secondaryCityDatum = globalData\n      ? globalData.cities.find(c => parseInt(c.cityId, 10) === comparison) : undefined;\n    secondaryCityName = secondaryCityDatum && secondaryCityDatum.name ? secondaryCityDatum.name : '';\n  }\n\n  useEffect(() => {\n    const node = rootRef.current;\n    if (node) {\n      const {width, height} = node.getBoundingClientRect();\n      setDimensions({width, height});\n    }\n  }, [rootRef, windowDimensions]);\n\n  const highlightIndustry = highlighted ? industryOrClusterMap.data[highlighted] : undefined;\n\n  const prevData = usePrevious(data);\n  let dataToUse: SuccessResponse | undefined;\n  if (data) {\n    dataToUse = data;\n  } else if (prevData) {\n    dataToUse = prevData;\n  } else {\n    dataToUse = undefined;\n  }\n\n  let output: React.ReactElement<any> | null;\n  if (industryOrClusterMap.loading || !dimensions || (loading && prevData === undefined)) {\n    output = <LoadingBlock />;\n  } else if (error !== undefined) {\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(error);\n  } else if (industryOrClusterMap.error !== undefined) {\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(error);\n  } else if (dataToUse !== undefined) {\n    const {\n      primaryCityIndustries, secondaryCityIndustries,\n    } = dataToUse;\n    const highlightedParent =\n      (highlightIndustry && highlightIndustry.level === DigitLevel.Six) ||\n      (isClusterView && highlightIndustry && highlightIndustry.level + '' === ClusterLevel.C3)\n        ? highlightIndustry.parentId : highlighted;\n    const primaryTotal = primaryCityIndustries.reduce((total, {industryId, numCompany, numEmploy}) => {\n      const industry = industryOrClusterMap.data[industryId];\n      if (industry && industry.parentId === null) {\n        const companies = numCompany ? numCompany : 0;\n        const employees = numEmploy ? numEmploy : 0;\n        const increment = compositionType === CompositionType.Companies ? companies : employees;\n        return total + increment;\n      } else {\n        return total;\n      }\n    }, 0);\n    const secondaryTotal = secondaryCityIndustries.reduce((total, {industryId, numCompany, numEmploy}) => {\n      const industry = industryMap.data[industryId];\n      if (industry && industry.parentId === null) {\n        const companies = numCompany ? numCompany : 0;\n        const employees = numEmploy ? numEmploy : 0;\n        const increment = compositionType === CompositionType.Companies ? companies : employees;\n        return total + increment;\n      } else {\n        return total;\n      }\n    }, 0);\n    const barChartData: ClusterBarChartDatum[] = [];\n    [...primaryCityIndustries, ...secondaryCityIndustries].forEach(({industryId, numCompany, numEmploy}, i) => {\n      const industry = industryOrClusterMap.data[industryId];\n      if (\n          industry && industry.name && industry.parentId === highlightedParent &&\n          !hiddenIndustriesOrClusters.includes((industry as any)[parentField].toString())\n        ) {\n        const groupName = i < primaryCityIndustries.length ? Group.Primary : Group.Secondary;\n        const companies = numCompany ? numCompany : 0;\n        const employees = numEmploy ? numEmploy : 0;\n        const colorDatum = colorMap.find(s => s.id === (industry as any)[parentField].toString());\n        let fill: string | undefined;\n        if (colorDatum) {\n          fill = i < primaryCityIndustries.length ? colorDatum.color : rgba(colorDatum.color, 0.4);\n        } else {\n          fill = undefined;\n        }\n        const value = compositionType === CompositionType.Companies ? companies : employees;\n        const total = i < primaryCityIndustries.length ? primaryTotal : secondaryTotal;\n        barChartData.push({\n          groupName,\n          x: industry.name.replace(/ and /g, ' & '),\n          y: value / total * 100,\n          fill,\n          onClick: (!isClusterView && industry.level !== DigitLevel.Six) || (isClusterView && industry.level + '' !== ClusterLevel.C3 + '')\n            ? () => setHighlighted(industryId) : undefined,\n        });\n      }\n    });\n    const sortedData = orderBy(barChartData, ['groupName', 'y'], ['asc', 'desc']);\n    const loadingOverlay = loading ? <LoadingBlock /> : null;\n\n    output = (\n      <VizContainer style={{height: dimensions.height}}>\n        <ErrorBoundary>\n          <Chart\n            data={sortedData}\n            compositionType={compositionType}\n            height={dimensions.height}\n            loading={loading}\n            primaryName={primaryCityName}\n            secondaryName={secondaryCityName}\n          />\n        </ErrorBoundary>\n        {loadingOverlay}\n      </VizContainer>\n    );\n  } else {\n    output = null;\n  }\n\n  const breadCrumbList = [];\n  let current = highlightIndustry;\n  while (current !== undefined) {\n    breadCrumbList.push(current);\n    const currentParentId = current.parentId;\n    current = currentParentId ? industryOrClusterMap.data[currentParentId] : undefined;\n  }\n  const breadCrumbs = breadCrumbList.reverse().map((industry, i) => {\n    const industryName = industry.name ? industry.name.replace(' and ', ' & ') : '';\n    if (i === breadCrumbList.length - 1) {\n      return (\n        <BreadCrumb key={industry.id}>\n          {industryName}\n        </BreadCrumb>\n      );\n    }\n    return (\n      <BreadCrumb key={industry.id}>\n        <BreadCrumbLink onClick={() => setHighlighted((industry as any)[idField])}>\n          <span>{industryName}</span>\n        </BreadCrumbLink>\n      </BreadCrumb>\n    );\n  });\n  const topLevelText = isClusterView ? getString('global-ui-cluster-aggregation-level', {\n    cluster: 'cluster_1',\n  }) : getString('global-ui-sector-level');\n  const topLevelBreadCrumb = breadCrumbList.length ? (\n    <BreadCrumb>\n      <BreadCrumbLink onClick={() => setHighlighted(undefined)}>\n        <span>{topLevelText}</span>\n      </BreadCrumbLink>\n    </BreadCrumb>\n  ) : (\n    <BreadCrumb>\n        {topLevelText}\n    </BreadCrumb>\n  );\n\n  const onButtonClick = (value: Highlighted) => {\n    if (value === Highlighted.relative) {\n      const route = createRoute.city(CityRoutes.CityGoodAt, primaryCity + '');\n      history.push(route + history.location.search);\n    }\n  };\n\n  return (\n    <>\n      <PreChartRow\n        searchInGraphOptions={{\n          hiddenParents: isClusterView ? hiddenClusters : hiddenSectors,\n          digitLevel: null,\n          clusterLevel: null,\n          setHighlighted,\n          mode: isClusterView ? Mode.cluster : Mode.naics,\n        }}\n        settingsOptions={{\n          compositionType: true,\n          aggregationMode: true,\n          digitLevel: isClusterView ? undefined : false,\n          clusterLevel: isClusterView ? false : undefined,\n        }}\n        vizNavigation={vizNavigation}\n      />\n      <Root>\n        <BreadCrumbList>\n          {topLevelBreadCrumb}\n          {breadCrumbs}\n        </BreadCrumbList>\n        <PrimarySecondaryLegend>\n          <LegendItem>\n            <LegendText>\n              {primaryCityName}\n            </LegendText>\n            <LegendBlock style={{backgroundColor: '#666'}} />\n          </LegendItem>\n          <LegendItem>\n            <LegendBlock style={{backgroundColor: rgba('#666', 0.4)}} />\n            <LegendText>\n              {secondaryCityName}\n            </LegendText>\n          </LegendItem>\n        </PrimarySecondaryLegend>\n\n        <BottomAxisRoot>\n          <AxisLabelBase>\n            <PresenceToggle\n              togglePresence={true}\n              highlight={Highlighted.absolute}\n              showArrows={false}\n              onButtonClick={onButtonClick}\n            />\n          </AxisLabelBase>\n        </BottomAxisRoot>\n        <BenchmarkRoot>\n          <BenchmarkLegend\n            comparisonType={ComparisonType.Absolute}\n          />\n        </BenchmarkRoot>\n        <SizingContainer ref={rootRef}>\n          {output}\n        </SizingContainer>\n      </Root>\n    </>\n  );\n};\n\nexport default IndustryZoomableBarChart;","import React, { useState } from 'react';\nimport TopIndustryComparisonBarChart from\n  '../../../../../components/dataViz/comparisonBarChart/TopIndustryComparisonBarChart';\nimport IndustryZoomableBarChart from\n  '../../../../../components/dataViz/zoomableComparisonBarChart/IndustryZoomableBarChart';\nimport { defaultYear } from '../../../../../Utils';\nimport {\n  defaultCompositionType,\n  CompositionType,\n  defaultDigitLevel,\n  isValidPeerGroup,\n  PeerGroup,\n  ClassificationNaicsCluster,\n  ClusterLevel,\n} from '../../../../../types/graphQL/graphQLTypes';\nimport useQueryParams from '../../../../../hooks/useQueryParams';\nimport { RegionGroup } from '../../../../../components/dataViz/comparisonBarChart/cityIndustryComparisonQuery';\nimport { createRoute } from '../../../../../routing/Utils';\nimport TrackedRoute from '../../../../../routing/TrackedRoute';\nimport { CityRoutes, cityIdParam, ColorBy } from '../../../../../routing/routes';\nimport {\n  useHistory,\n  Switch,\n  matchPath,\n} from 'react-router-dom';\nimport SideText from '../SideText';\n\ninterface Props {\n  primaryCity: string;\n  secondaryCity: string;\n  hiddenSectors: string[];\n  clusterLevel: ClusterLevel;\n  isClusterView: boolean;\n  hiddenClusters: ClassificationNaicsCluster['id'][];\n  colorBy: ColorBy;\n}\n\nconst CompositionComparison = (props: Props) => {\n  const {\n    primaryCity, secondaryCity, hiddenSectors,\n    clusterLevel, isClusterView, hiddenClusters,\n    colorBy,\n  } = props;\n\n  const { digit_level, composition_type } = useQueryParams();\n  const [highlighted, setHighlighted] = useState<string | undefined>(undefined);\n  const history = useHistory();\n  const isIndustryComparison = matchPath<{ [cityIdParam]: string }>(\n    history.location.pathname, CityRoutes.CityGoodAtAbsolutePresenceComparison,\n  );\n  const vizNavigation = [\n    {\n      label: 'Bar Graph',\n      active: !!(!isIndustryComparison || !isIndustryComparison.isExact),\n      onClick: () => {\n        setHighlighted(undefined);\n        history.push(\n          createRoute.city(CityRoutes.CityGoodAtAbsolutePresence, primaryCity)\n          + history.location.search,\n        );\n      },\n    },\n    {\n      label: 'Nested Bar Graph',\n      active: !!(isIndustryComparison && isIndustryComparison.isExact),\n      onClick: () => {\n        setHighlighted(undefined);\n        history.push(\n          createRoute.city(CityRoutes.CityGoodAtAbsolutePresenceComparison, primaryCity)\n          + history.location.search,\n        );\n      },\n    },\n  ];\n\n  let comparison: number | RegionGroup | PeerGroup;\n  if (secondaryCity === RegionGroup.World) {\n    comparison = RegionGroup.World;\n  } else if (isValidPeerGroup(secondaryCity)) {\n    comparison = secondaryCity as PeerGroup;\n  } else {\n    comparison = parseInt(secondaryCity, 10);\n  }\n\n  return (\n    <>\n      <Switch>\n        <TrackedRoute path={CityRoutes.CityGoodAtAbsolutePresenceComparison}\n          render={() => (\n            <>\n              <SideText\n                isClusterView={Boolean(isClusterView)}\n                prefix={'absolute-nested-bar-chart'}\n              />\n              <IndustryZoomableBarChart\n                primaryCity={parseInt(primaryCity, 10)}\n                comparison={comparison}\n                year={defaultYear}\n                setHighlighted={setHighlighted}\n                highlighted={highlighted ? parseInt(highlighted, 10) : null}\n                compositionType={composition_type ? composition_type as CompositionType : defaultCompositionType}\n                hiddenSectors={hiddenSectors}\n                vizNavigation={vizNavigation}\n                isClusterView={isClusterView}\n                hiddenClusters={hiddenClusters}\n              />\n            </>\n          )}\n        />\n        <TrackedRoute path={CityRoutes.CityGoodAtAbsolutePresence}\n          render={() => (\n            <>\n              <SideText\n                isClusterView={Boolean(isClusterView)}\n                prefix={'absolute-presence'}\n              />\n              <TopIndustryComparisonBarChart\n                primaryCity={parseInt(primaryCity, 10)}\n                comparison={comparison}\n                year={defaultYear}\n                setHighlighted={setHighlighted}\n                highlighted={highlighted}\n                digitLevel={digit_level ? parseInt(digit_level, 10) : defaultDigitLevel}\n                compositionType={composition_type ? composition_type as CompositionType : defaultCompositionType}\n                hiddenSectors={hiddenSectors}\n                vizNavigation={vizNavigation}\n                clusterLevel={clusterLevel}\n                isClusterView={isClusterView}\n                hiddenClusters={hiddenClusters}\n                colorBy={colorBy}\n              />\n            </>\n          )}\n        />\n      </Switch>\n    </>\n  );\n};\n\nexport default CompositionComparison;\n","import {DefaultContentWrapper} from '../../../../styling/GlobalGrid';\nimport useCurrentCityId from '../../../../hooks/useCurrentCityId';\nimport SimpleError from '../../../../components/transitionStateComponents/SimpleError';\nimport {LoadingOverlay} from '../../../../components/transitionStateComponents/VizLoadingBlock';\nimport React, {useState} from 'react';\nimport {\n  ClassificationNaicsIndustry,\n  ClassificationNaicsCluster,\n} from '../../../../types/graphQL/graphQLTypes';\nimport {\n  ContentGrid,\n} from '../../../../styling/styleUtils';\nimport useQueryParams from '../../../../hooks/useQueryParams';\nimport useFluent from '../../../../hooks/useFluent';\nimport CategoryLabels from '../../../../components/dataViz/legend/CategoryLabels';\nimport EducationLegend from '../../../../components/dataViz/legend/EducationLegend';\nimport WageLegend from '../../../../components/dataViz/legend/WageLegend';\nimport useSectorMap from '../../../../hooks/useSectorMap';\nimport useClusterMap from '../../../../hooks/useClusterMap';\nimport UtilityBar from '../../../../components/navigation/secondaryHeader/UtilityBar';\nimport {\n  ColorBy,\n  defaultClusterLevel,\n  defaultColorBy,\n  AggregationMode,\n  defaultAggregationMode,\n  CityRoutes,\n  Routes,\n} from '../../../../routing/routes';\nimport RCABarChart from '../../../../components/dataViz/verticalBarChart/RCABarChart';\nimport {defaultDigitLevel} from '../../../../types/graphQL/graphQLTypes';\nimport SideText from './SideText';\nimport { Switch } from 'react-router-dom';\nimport TrackedRoute from '../../../../routing/TrackedRoute';\nimport AbsolutePresence from './absolutePresence';\nimport useCurrentBenchmark from '../../../../hooks/useCurrentBenchmark';\nimport { useRouteMatch } from 'react-router-dom';\n\nconst CityGoodAt = () => {\n  const cityId = useCurrentCityId();\n\n  const {cluster_level, digit_level, color_by, aggregation} = useQueryParams();\n  const {benchmark} = useCurrentBenchmark();\n  const sectorMap = useSectorMap();\n  const clusterMap = useClusterMap();\n  const matchZoomableBarChart = useRouteMatch(Routes.CityGoodAtAbsolutePresenceComparison);\n  const [hiddenSectors, setHiddenSectors] = useState<ClassificationNaicsIndustry['id'][]>([]);\n  const [hiddenClusters, setHiddenClusters] = useState<ClassificationNaicsCluster['id'][]>([]);\n  const toggleSector = (sectorId: ClassificationNaicsIndustry['id']) =>\n    hiddenSectors.includes(sectorId)\n      ? setHiddenSectors(hiddenSectors.filter(sId => sId !== sectorId))\n      : setHiddenSectors([...hiddenSectors, sectorId]);\n  const isolateSector = (sectorId: ClassificationNaicsIndustry['id']) =>\n    hiddenSectors.length === sectorMap.length - 1 && !hiddenSectors.find(sId => sId === sectorId)\n      ? setHiddenSectors([])\n      : setHiddenSectors([...sectorMap.map(s => s.id).filter(sId => sId !== sectorId)]);\n  const resetSectors = () => setHiddenSectors([]);\n\n  const toggleCluster = (clusterId: ClassificationNaicsCluster['id']) =>\n    hiddenClusters.includes(clusterId)\n      ? setHiddenClusters(hiddenClusters.filter(sId => sId !== clusterId))\n      : setHiddenClusters([...hiddenClusters, clusterId]);\n  const isolateCluster = (clusterId: ClassificationNaicsCluster['id']) =>\n    hiddenClusters.length === clusterMap.length - 1 && !hiddenClusters.find(sId => sId === clusterId)\n      ? setHiddenClusters([])\n      : setHiddenClusters([...clusterMap.map(s => s.id).filter(sId => sId !== clusterId)]);\n  const resetClusters = () => setHiddenClusters([]);\n\n  const [highlighted, setHighlighted] = useState<string | undefined>(undefined);\n  const getString = useFluent();\n\n  const isClusterView =\n    (!aggregation && defaultAggregationMode === AggregationMode.cluster) || (aggregation === AggregationMode.cluster);\n\n  if (cityId === null) {\n    return (\n      <DefaultContentWrapper>\n        <LoadingOverlay>\n          <SimpleError fluentMessageId={'global-ui-error-invalid-city'} />\n        </LoadingOverlay>\n      </DefaultContentWrapper>\n    );\n  }\n\n  let legend: React.ReactElement<any> | null;\n  if (color_by === ColorBy.education && !matchZoomableBarChart) {\n    legend = (\n      <EducationLegend />\n    );\n  } else if (color_by === ColorBy.wage && !matchZoomableBarChart) {\n    legend = (\n      <WageLegend />\n    );\n  } else {\n    if (isClusterView) {\n      legend = (\n        <CategoryLabels\n          categories={clusterMap}\n          allowToggle={true}\n          toggleCategory={toggleCluster}\n          isolateCategory={isolateCluster}\n          hiddenCategories={hiddenClusters}\n          resetCategories={resetClusters}\n          resetText={getString('global-ui-reset-clusters')}\n          fullWidth={false}\n        />\n      );\n    } else {\n      legend = (\n        <CategoryLabels\n          categories={sectorMap}\n          allowToggle={true}\n          toggleCategory={toggleSector}\n          isolateCategory={isolateSector}\n          hiddenCategories={hiddenSectors}\n          resetCategories={resetSectors}\n          resetText={getString('global-ui-reset-sectors')}\n          fullWidth={true}\n        />\n      );\n    }\n  }\n\n  const clusterLevel = cluster_level ? cluster_level : defaultClusterLevel;\n  const digitLevel = digit_level ? parseInt(digit_level, 10) : defaultDigitLevel;\n  const colorBy = color_by ? color_by : defaultColorBy;\n\n  return (\n    <DefaultContentWrapper>\n      <ContentGrid>\n        <Switch>\n          <TrackedRoute path={CityRoutes.CityGoodAtAbsolutePresence}\n            render={() => (\n              <>\n                <AbsolutePresence\n                  primaryCity={cityId}\n                  secondaryCity={benchmark}\n                  hiddenSectors={hiddenSectors}\n                  clusterLevel={clusterLevel}\n                  isClusterView={isClusterView}\n                  hiddenClusters={hiddenClusters}\n                  colorBy={colorBy}\n                />\n              </>\n            )} />\n          <TrackedRoute path={CityRoutes.CityGoodAt}\n            render={() => (\n              <>\n                <SideText\n                  isClusterView={Boolean(isClusterView)}\n                  prefix={'relative-presence'}\n                />\n                <RCABarChart\n                  isClusterView={Boolean(isClusterView)}\n                  highlighted={highlighted}\n                  setHighlighted={setHighlighted}\n                  hiddenSectors={hiddenSectors}\n                  hiddenClusters={hiddenClusters}\n                  clusterLevel={clusterLevel}\n                  digitLevel={digitLevel}\n                  colorBy={colorBy}\n                />\n              </>\n            )} />\n        </Switch>\n        {legend}\n      </ContentGrid>\n      <UtilityBar />\n    </DefaultContentWrapper>\n  );\n};\n\nexport default CityGoodAt;\n","import * as d3 from 'd3';\nimport {\n  getAspectRatio,\n  drawPoint,\n  getBounds,\n  wrap,\n  ellipsisText,\n} from './Utils';\nimport {defaultYear, formatNumber} from '../../../../Utils';\nimport {rgba} from 'polished';\nimport {LayoutData, lowIntensityNodeColor} from './useLayoutData';\nimport {getStandardTooltip} from '../../../../utilities/rapidTooltip';\nimport svgPathReverse from 'svg-path-reverse';\nimport {SuccessResponse} from './useRCAData';\nimport {intensityColorRange} from '../../../../styling/styleUtils';\nimport {\n  NodeSizing,\n  ColorBy,\n} from '../../../../routing/routes';\n\nconst minExpectedScreenSize = 1020;\n\nconst minZoom = 0.75;\nconst maxZoom = 50;\nexport const innerRingRadius = 32;\nexport const outerRingRadius = 60;\n\nexport const svgRingModeClassName = 'svg-ring-mode-class';\n\nexport enum ZoomLevel {\n  Cluster1 = 'cluster1',\n  Cluster2 = 'cluster2',\n  Node = 'node',\n}\n\nfunction circlePath(cx: number, cy: number, r: number){\n    return svgPathReverse.reverse(\n      'M '+cx+' '+cy+' m -'+r+', 0 a '+r+','+r+' 0 1,0 '+(r*2)+',0 a '+r+','+r+' 0 1,0 -'+(r*2)+',0',\n    );\n}\n\nconst zoomScales = {\n  continent: {\n    fill: d3.scaleLinear()\n      .domain([1, 3])\n      .range([1, 0]),\n    stroke: d3.scaleLinear()\n      .domain([1, maxZoom])\n      .range([1, 1]),\n    label: d3.scaleLinear()\n      .domain([1, 1.85, 2.15])\n      .range([1, 1, 0]),\n  },\n  countries: {\n    fill: d3.scaleLinear()\n      .domain([1.5, 2, 3, 4, 7, 8])\n      .range([0, 0.5, 0.75, 0.3, 0.1, 0]),\n    stroke: d3.scaleLinear()\n      .domain([1.2, 2, 5, 12, maxZoom])\n      .range([0, 0.5, 1, 0.75, 0.2]),\n    label: d3.scaleLinear()\n      .domain([1.45, 1.75, 3.65, 4])\n      .range([0, 1, 1, 0]),\n  },\n  nodes: {\n    label: d3.scaleLinear()\n      .domain([8, 9])\n      .range([0, 1]),\n  },\n};\n\nexport enum NodeAction {\n  ZoomIn = 'zoomin',\n  ZoomOut = 'zoomout',\n  Reset = 'reset',\n  SoftReset = 'softreset',\n  SelectNode = 'selectnode',\n  ExternalSelect = 'externalselectnode',\n}\n\ninterface Input {\n  rootEl: HTMLDivElement;\n  data: LayoutData;\n  rootWidth: number;\n  rootHeight: number;\n  breadCrumbCluster1Button: HTMLButtonElement;\n  breadCrumbCluster2Button: HTMLButtonElement;\n  breadCrumbNodeButton: HTMLButtonElement;\n  tooltipEl: HTMLDivElement;\n  onNodeSelect: (naicsId: string | undefined, action: NodeAction) => void;\n  onNodeHover: (naicsId: string | undefined) => void;\n  onZoomLevelChange: (zoomLevel: ZoomLevel) => void;\n}\n\ninterface State {\n  zoom: number;\n  zoomLevel: ZoomLevel;\n  active: any | null;\n  hoveredShape: any | null;\n  hoveredNode: any | null;\n  externalHoveredId: string | undefined;\n  colorBy: ColorBy | undefined;\n}\n\nconst defaultNodeRadius = 4.5;\n\nconst createChart = (input: Input) => {\n  const {\n    rootEl, data, rootWidth, rootHeight, tooltipEl, onNodeSelect, onZoomLevelChange,\n    onNodeHover, breadCrumbCluster1Button, breadCrumbCluster2Button, breadCrumbNodeButton,\n  } = input;\n\n  const {\n    width, height, outerWidth, outerHeight, margin,\n  } = getAspectRatio({w: 4, h: 3}, {w: rootWidth, h: rootHeight}, 20);\n\n  const smallerSize = width < height ? width : height;\n  const radiusAdjuster = smallerSize / minExpectedScreenSize;\n  const textAndSpacingSize = 3 * radiusAdjuster;\n  const radius = defaultNodeRadius * radiusAdjuster;\n\n  const state: State = {\n    zoom: 1,\n    zoomLevel: ZoomLevel.Cluster1,\n    active: null,\n    hoveredShape: null,\n    hoveredNode: null,\n    externalHoveredId: undefined,\n    colorBy: undefined,\n  };\n\n  const svg = d3.select(rootEl).append('svg')\n    .attr('width',  outerWidth)\n    .attr('height', outerHeight)\n    .attr('alt', 'Industry Space Visualization');\n\n  const xScale = d3.scaleLinear()                // interpolator for X axis -- inner plot region\n    .domain(d3.extent(data.nodes, ({x}) => x) as [number, number])\n    .range([0, width]);\n\n  const yScale = d3.scaleLinear()                // interpolator for Y axis -- inner plot region\n    .domain(d3.extent(data.nodes, ({y}) => y) as [number, number])\n    .range([height, 0]);\n\n  const g = svg.append('g');\n\n  const zoom = d3.zoom()\n    .scaleExtent([minZoom, maxZoom])\n    .on('zoom', zoomed);\n\n  svg.call(zoom);\n\n  function zoomed() {\n    state.zoom = d3.event.transform.k;\n    g.attr('transform', d3.event.transform);\n    render();\n  }\n\n  function clearActive(clear: boolean, action: NodeAction) {\n    state.active = null;\n    clearActiveLabels();\n    if (clear) {\n      onNodeSelect(undefined, action);\n    }\n    svg.attr('class', '');\n  }\n\n  function zoomIn() {\n    if (state.active !== null) {\n      state.active.element.classed('active', false);\n      onNodeSelect(undefined, NodeAction.ZoomIn);\n    }\n    clearActive(false, NodeAction.ZoomIn);\n    zoom.scaleBy(svg.transition().duration(250), 1.4);\n    svg.call(zoom);\n    render();\n  }\n\n  function zoomOut() {\n    if (state.active !== null) {\n      state.active.element.classed('active', false);\n      onNodeSelect(undefined, NodeAction.ZoomOut);\n    }\n    clearActive(false, NodeAction.ZoomOut);\n    zoom.scaleBy(svg.transition().duration(250), 0.6);\n    svg.call(zoom);\n    render();\n  }\n\n  function reset() {\n    if (state.active !== null) {\n      state.active.element.classed('active', false);\n    }\n    clearActive(true, NodeAction.Reset);\n    svg.transition()\n      .duration(300)\n      .call(zoom.transform, d3.zoomIdentity);\n    svg.call(zoom);\n    onNodeSelect(undefined, NodeAction.Reset);\n    render();\n  }\n\n  function resetToClusterMid() {\n    if (state.active !== null) {\n      state.active.element.classed('active', false);\n    }\n    clearActive(true, NodeAction.Reset);\n    if (state.zoomLevel !== ZoomLevel.Cluster2) {\n      zoom.scaleTo(svg.transition().duration(250), 2.25);\n    }\n    svg.call(zoom);\n    onNodeSelect(undefined, NodeAction.Reset);\n    render();\n  }\n\n  function resetToNode() {\n    if (state.active !== null) {\n      state.active.element.classed('active', false);\n    }\n    clearActive(true, NodeAction.Reset);\n    if (state.zoomLevel !== ZoomLevel.Node) {\n      zoom.scaleTo(svg.transition().duration(250), 3.65);\n    }\n    svg.call(zoom);\n    onNodeSelect(undefined, NodeAction.Reset);\n    render();\n  }\n\n  function softReset(d: any) {\n    if (state.active !== null) {\n      state.active.element.classed('active', false);\n    }\n    clearActive(true, NodeAction.SoftReset);\n\n    const {translate, scale} = getBounds(\n      [xScale(d.x) as number + margin.left],\n      [yScale(d.y) as number + margin.top],\n      width, height, outerWidth, outerHeight, 7,\n    );\n\n    svg.call( zoom.transform, d3.zoomIdentity.translate(translate[0],translate[1]).scale(scale));\n    svg.call(zoom);\n    d.wasActive = true;\n    render();\n  }\n\n  breadCrumbCluster1Button.removeEventListener('click', reset);\n  breadCrumbCluster1Button.addEventListener('click', reset);\n\n  breadCrumbCluster2Button.removeEventListener('click', resetToClusterMid);\n  breadCrumbCluster2Button.addEventListener('click', resetToClusterMid);\n\n  breadCrumbNodeButton.removeEventListener('click', resetToNode);\n  breadCrumbNodeButton.addEventListener('click', resetToNode);\n\n  function setHoveredShape(datum: any) {\n    state.hoveredShape = datum;\n    render();\n  }\n\n  function setHoveredNode(datum: any) {\n    state.hoveredNode = datum;\n    if (!state.active) {\n      render();\n    }\n    if (datum && datum.id) {\n      onNodeHover(datum.id);\n    } else {\n      onNodeHover(undefined);\n    }\n  }\n\n  function clearActiveLabels() {\n    g.selectAll('.industry-ring-label').remove();\n  }\n\n  const outerRing = g.append('circle')\n    .attr('class', 'outer-ring');\n\n  const innerRing = g.append('circle')\n    .attr('class', 'inner-ring');\n\n  //Create an SVG path (based on bl.ocks.org/mbostock/2565344)\n  const outerRingLabelPath = g.append('path')\n    .attr('id', 'outerRingLabelPath') //Unique id of the path\n    .style('fill', 'none')\n    .style('stroke', 'none');\n\n  //Create an SVG text element and append a textPath element\n  g.append('text')\n   .append('textPath') //append a textPath to the text element\n    .attr('class', 'ring-label')\n    .attr('xlink:href', '#outerRingLabelPath') //place the ID of the path here\n    .style('text-anchor','middle')\n    .attr('startOffset', '25%')\n    .text('Medium Proximity');\n\n  //Create an SVG path (based on bl.ocks.org/mbostock/2565344)\n  const innerRingLabelPath = g.append('path')\n    .attr('id', 'innerRingLabelPath') //Unique id of the path\n    .style('fill', 'none')\n    .style('stroke', 'none');\n\n  //Create an SVG text element and append a textPath element\n  g.append('text')\n   .append('textPath') //append a textPath to the text element\n    .attr('class', 'ring-label')\n    .attr('xlink:href', '#innerRingLabelPath') //place the ID of the path here\n    .style('text-anchor','middle')\n    .attr('startOffset', '25%')\n    .text('High Proximity');\n\n  const countries = g.selectAll('.industry-countries')\n    .data(data.clusters.countries)\n    .enter().append('polygon')\n      .attr('class', 'industry-countries')\n      .attr('points', d =>\n        d.polygon.map(([xCoord, yCoord]) =>\n          [xScale(xCoord) as number + margin.left, yScale(yCoord) as number + margin.top].join(',')).join(' '),\n      )\n      .attr('fill', d => rgba(d.color, 0))\n      .attr('stroke', rgba('#efefef', 0))\n      .style('opacity', 1)\n      .on('click', d => {\n        if (state.zoom > 1.5) {\n          zoomToShape(d, 5);\n        } else {\n          const continent = data.clusters.continents.find(c => c.clusterId === d.continent);\n          zoomToShape(continent, 5);\n        }\n      })\n      .on('mouseenter', d => setHoveredShape(d))\n      .on('mousemove', d => {\n        const continent = data.clusters.continents.find(c => c.clusterId === d.continent);\n        const rows = [\n          ['Year:', defaultYear.toString()],\n          ['High Aggregation<br />Knowledge Cluster:', continent ? continent.name : ''],\n        ];\n        if (d.numEmploy !== undefined) {\n          rows.push(['Number of Employees:', formatNumber(Math.round(d.numEmploy))]);\n        }\n        if (d.shareEmploy !== undefined) {\n          rows.push(['Share of Employees:', d.shareEmploy + '%']);\n        }\n        tooltipEl.innerHTML = getStandardTooltip({\n          title: 'Knowledge Cluster: ' + (d.name ? d.name : ''),\n          color: 'gray',\n          rows,\n          boldColumns: [1],\n          simple: true,\n          additionalHTML:\n            `<div style=\"padding: 0.35rem; font-style: italic; font-size: 0.7rem; text-align: center;\">\n              Click to zoom into knowledge cluster\n            </div>`,\n        });\n        tooltipEl.style.display = 'block';\n        tooltipEl.style.top = d3.event.pageY + 'px';\n        tooltipEl.style.left = d3.event.pageX + 'px';\n      })\n      .on('mouseleave', () => {\n        tooltipEl.style.display = 'none';\n        setHoveredShape(null);\n      });\n\n  const continents = g.selectAll('.industry-continents')\n    .data(data.clusters.continents)\n    .enter().append('polygon')\n      .attr('class', 'industry-continents')\n      .attr('points', d =>\n        d.polygon.map(([xCoord, yCoord]: [number, number]) =>\n          [xScale(xCoord) as number + margin.left, yScale(yCoord) as number + margin.top].join(',')).join(' '),\n      )\n      .attr('fill', d => rgba(d.color, 0))\n      .attr('stroke', rgba('#efefef', 1))\n      .style('opacity', 1)\n      .style('pointer-events', 'none');\n      // .on('click', d => zoomToShape(d, 3))\n      // .on('mouseenter', d => setHoveredShape(d))\n      // .on('mousemove', d => {\n      //   const rows = [\n      //     ['Year:', defaultYear.toString()],\n      //   ];\n      //   if (d.numEmploy !== undefined) {\n      //     rows.push(['Number of Employees:', formatNumber(Math.round(d.numEmploy))]);\n      //   }\n      //   if (d.shareEmploy !== undefined) {\n      //     rows.push(['Share of Employees:', d.shareEmploy + '%']);\n      //   }\n      //   tooltipEl.innerHTML = getStandardTooltip({\n      //     title: 'Knowledge Cluster: ' + (d.name ? d.name : ''),\n      //     color: 'gray',\n      //     rows,\n      //     boldColumns: [1],\n      //     simple: true,\n      //     additionalHTML:\n      //       `<div style=\"padding: 0.35rem; font-style: italic; font-size: 0.7rem; text-align: center;\">\n      //         Click to zoom into knowledge cluster\n      //       </div>`,\n      //   });\n      //   tooltipEl.style.display = 'block';\n      //   tooltipEl.style.top = d3.event.pageY + 'px';\n      //   tooltipEl.style.left = d3.event.pageX + 'px';\n      // })\n      // .on('mouseleave', () => {\n      //   tooltipEl.style.display = 'none';\n      //   setHoveredShape(null);\n      // });\n\n  const hoveredShape = g.append('polygon')\n    .attr('class', 'industry-cluster-hovered')\n    .style('display', 'none');\n\n  const nodeOpacity = state.zoom < 5 ? 0.5 : 0.75;\n  const nodes = g.selectAll('.industry-node')\n    .data(data.nodes)\n    .enter().append('circle')\n      .attr('class', 'industry-node')\n      .attr('cx', d => xScale(d.x) as number + margin.left )\n      .attr('cy', d => yScale(d.y) as number + margin.top )\n      .attr('r', d => d.radius ? d.radius : radius)\n      .attr('fill', '#fff')\n      .style('opacity', nodeOpacity)\n      .style('--true-fill-color', d => d.color)\n      .on('click', d => zoomToPoint(d, false))\n      .on('mousemove', d => {\n        const continent = data.clusters.continents.find(c => c.clusterId === d.continent);\n        const country = data.clusters.countries.find(c => c.clusterId === d.country);\n        const rows = [\n          ['NAICS Code:', d.code ? d.code : ''],\n          ['Year:', defaultYear.toString()],\n          ['High Aggregation<br />Knowledge Cluster:', continent ? continent.name : ''],\n          ['Low Aggregation<br />Knowledge Cluster:', country ? country.name : ''],\n        ];\n        if (d.rca !== undefined) {\n          rows.push(['Relative Presence:', d.rca.toFixed(3)]);\n        }\n        if (state.colorBy === ColorBy.wage) {\n          rows.push(['Hourly wage (based on U.S. average):', '$' + d.hourlyWage.toFixed(2)]);\n        }\n        if (state.colorBy === ColorBy.education) {\n          rows.push(['Years of education (based on U.S. average):', d.yearsEducation.toFixed(2)]);\n        }\n        const clickText = state.active && state.active.datum && state.active.datum.id === d.id\n          ? 'Click to zoom out'\n          : 'Click to see related industries';\n        tooltipEl.innerHTML = getStandardTooltip({\n          title: d.name ? d.name : '',\n          color: rgba(d.industryColor, 0.3),\n          rows,\n          boldColumns: [1],\n          additionalHTML:\n            `<div style=\"padding: 0.35rem; font-style: italic; font-size: 0.7rem; text-align: center;\">\n              ${clickText}\n            </div>`,\n        });\n        tooltipEl.style.display = 'block';\n        tooltipEl.style.top = d3.event.pageY + 'px';\n        tooltipEl.style.left = d3.event.pageX + 'px';\n      })\n      .on('mouseenter', d => setHoveredNode(d))\n      .on('mouseleave', () => {\n        tooltipEl.style.display = 'none';\n        setHoveredNode(null);\n      });\n\n\n  const hoveredNode = g.append('circle')\n    .attr('class', 'industry-node-hovered')\n    .style('display', 'none');\n\n  const continentLabels = g.selectAll('.industry-continents-label')\n    .data(data.clusters.continents)\n    .enter().append('text')\n      .attr('class', 'industry-continents-label')\n      .attr('x', d => xScale(d.center[0]) as number + margin.left)\n      .attr('y', d => yScale(d.center[1]) as number + margin.top)\n      .style('font-size', textAndSpacingSize * 9.5 + 'px')\n      .text(d => d.name);\n\n  const continentClusterLineLabels = g.selectAll('.industry-continents-cluster-label')\n    .data(data.clusters.continents)\n    .enter().append('text')\n      .attr('class', 'industry-continents-cluster-label')\n      .attr('x', d => xScale(d.center[0]) as number + margin.left)\n      .attr('y', d => yScale(d.center[1]) as number + margin.top + (textAndSpacingSize * 9.5))\n      .style('font-size', textAndSpacingSize * 9.5 + 'px')\n      .text('Cluster');\n\n  const continentValueLabels = g.selectAll('.industry-continents-value-label')\n    .data(data.clusters.continents)\n    .enter().append('text')\n      .attr('class', 'industry-continents-value-label')\n      .attr('x', d => xScale(d.center[0]) as number + margin.left)\n      .attr('y', d => yScale(d.center[1]) as number + margin.top + (textAndSpacingSize * 20))\n      .style('font-size', textAndSpacingSize * 7.5 + 'px')\n      .text('0% of employees');\n\n  const countryLabels = g.append('g')\n    .attr('class', 'industry-countries-label-group')\n    .style('display', 'none');\n\n  countryLabels.selectAll('.industry-countries-label')\n    .data(data.clusters.countries)\n    .enter().append('text')\n      .attr('class', 'industry-countries-label')\n      .attr('x', d => xScale(d.center[0]) as number + margin.left)\n      .attr('y', d => yScale(d.center[1]) as number + margin.top)\n      .style('font-size', textAndSpacingSize * 4 + 'px')\n      .text(d => d.name);\n\n  const nodeLabels = g.append('g')\n    .attr('class', 'industry-nodes-label-group');\n\n  nodeLabels.selectAll('.industry-nodes-label');\n    // .data(data.nodes)\n    // .enter().append('text')\n      // .attr('class', 'industry-nodes-label')\n      // .attr('x', d => xScale(d.x) as number + margin.left)\n      // .attr('y', d => yScale(d.y) as number + margin.top + (radius * 1.45))\n      // .style('font-size', textAndSpacingSize * 1 + 'px')\n      // .style('font-size', textAndSpacingSize * 0.55 + 'px')\n      // .text(d => ellipsisText(d.name as string, 20));\n\n  nodeLabels\n    .style('display', 'none');\n\n  function zoomToPoint(d: any, external?: boolean) {\n    const action = external ? NodeAction.ExternalSelect : NodeAction.SelectNode;\n    // @ts-ignore\n    if (state.active !== null && (state.active.element.node() === this ||\n        (state.active.datum && state.active.datum.id === d.id)) ) {\n      onNodeSelect(undefined, action);\n      return softReset(d);\n    }\n    svg.on('.zoom', null);\n    clearActiveLabels();\n    if (state.active !== null) {\n      state.active.element.classed('active', false);\n    }\n    state.active = {};\n    // @ts-ignore\n    state.active.element = d3.select(this).classed('active', true);\n    state.active.datum = d;\n\n    const centerX = d.adjustedCoords ? d.adjustedCoords.x : xScale(d.x) as number + margin.left;\n    const centerY = d.adjustedCoords ? d.adjustedCoords.y : yScale(d.y) as number + margin.top;\n    const allXValues = [centerX];\n    const allYValues = [centerY];\n    for (let i = 0; i < 15; i++) {\n      const radiusCoords = drawPoint(outerRingRadius, i, 15, centerX, centerY);\n      allXValues.push(radiusCoords.x);\n      allYValues.push(radiusCoords.y);\n    }\n\n    const {translate, scale} = getBounds(\n      allXValues,\n      allYValues,\n      width,\n      height * 0.95,\n      outerWidth,\n      outerHeight,\n      7,\n    );\n\n    svg.transition()\n      .duration(300)\n      .call( zoom.transform, d3.zoomIdentity.translate(translate[0],translate[1]).scale(scale));\n\n    svg.attr('class', svgRingModeClassName);\n\n    onNodeSelect(state.active.datum.id, action);\n  }\n\n  const setHighlightedPoint = (id: string | undefined, action: NodeAction) => {\n    if (id === undefined) {\n      if (action === NodeAction.Reset) {\n        reset();\n      } else if (action === NodeAction.SoftReset) {\n        clearActive(false, NodeAction.SoftReset);\n        svg.call(zoom);\n        render();\n      }\n    } else {\n      const target = data.nodes.findIndex(d => d.id === id);\n      if (target !== -1 && (state.active === null || state.active.datum.id !== id)\n      ) {\n        zoomToPoint(data.nodes[target], true);\n      }\n    }\n  };\n\n  const setExternalHoveredId = (id: string | undefined) => {\n    state.externalHoveredId = id;\n    nodes\n      .attr('stroke', d => d.id === state.externalHoveredId ? '#333' : null)\n      .attr('stroke-width', d => d.id === state.externalHoveredId ? 0.5 : null);\n  };\n\n  function zoomToShape(d: any, maxZoomAllowed: number) {\n\n    const allXValues: number[] = [];\n    const allYValues: number[] = [];\n    d.polygon.forEach(([xValue, yValue]: [number, number]) => {\n      allXValues.push(xScale(xValue) as number + margin.left);\n      allYValues.push(yScale(yValue) as number + margin.top);\n    });\n\n    const {translate, scale} = getBounds(allXValues, allYValues, outerWidth, outerHeight, outerWidth, outerHeight, maxZoomAllowed);\n\n    svg.transition()\n      .duration(300)\n      .call( zoom.transform, d3.zoomIdentity.translate(translate[0],translate[1]).scale(scale));\n  }\n\n  function render(skipRingTransition?: boolean) {\n    if (state.active) {\n      const edgeData = state.active.datum.edges.map(({trg}: {trg: string}) => data.nodes.find(({id}) => id === trg));\n      const centerX = state.active.datum.adjustedCoords ?\n        state.active.datum.adjustedCoords.x : xScale(state.active.datum.x) as number + margin.left;\n      const centerY = state.active.datum.adjustedCoords ?\n        state.active.datum.adjustedCoords.y : yScale(state.active.datum.y) as number + margin.top;\n\n      outerRing\n        .attr('cx', centerX)\n        .attr('cy', centerY)\n        .style('opacity', 0)\n        .transition()\n        .duration(skipRingTransition ? 0 : 300)\n        .style('opacity', 1);\n      innerRing\n        .attr('cx', centerX)\n        .attr('cy', centerY)\n        .style('opacity', 0)\n        .transition()\n        .duration(skipRingTransition ? 0 : 300)\n        .style('opacity', 1);\n\n      outerRingLabelPath\n        .attr('d', circlePath(centerX, centerY, outerRingRadius + 4));\n\n      innerRingLabelPath\n        .attr('d', circlePath(centerX, centerY, innerRingRadius + 4));\n\n      const smallerRadius = (r: number) => {\n        const newRadius = r * 0.85;\n        if (newRadius < radius * 0.5) {\n          return radius * 0.5;\n        } else {\n          return newRadius;\n        }\n      };\n      nodes\n        .each(d => {\n          const i = edgeData.findIndex((e: {id: string}) => e.id === d.id);\n          if (i !== -1) {\n            const innerCircleLength = edgeData.length < 7 ? edgeData.length : 7;\n            const adjustedCoords = drawPoint(\n              i < 7 ? innerRingRadius : outerRingRadius,\n              i < 7 ? i : i - 7,\n              i < 7 ? innerCircleLength : edgeData.length - 7,\n              centerX,\n              centerY,\n            );\n            (d as any).adjustedCoords = adjustedCoords;\n          } else if (d.id !== state.active.datum.id) {\n            (d as any).adjustedCoords = undefined;\n          }\n        })\n        .style('pointer-events', 'auto')\n        .style('opacity', 1)\n        .attr('r', d => d.id === state.active.datum.id ||\n          edgeData.find((e: {id: string}) => e.id === d.id) ? smallerRadius(d.radius ? d.radius * 0.5 : radius * 0.5) : radius)\n        .style('display', d => d.id === state.active.datum.id ||\n          edgeData.find((e: {id: string}) => e.id === d.id) ? 'block' : 'none')\n        .attr('fill', d => d.color)\n        .attr('class', d => d.id === state.active.datum.id ? 'industry-edge-node active' : 'industry-edge-node')\n        .transition()\n        .ease(d3.easeCircleInOut)\n        .duration(500)\n        .attr('cx', d => (d as any).adjustedCoords ? (d as any).adjustedCoords.x : xScale((d as any).x) as number + margin.left)\n        .attr('cy', d => (d as any).adjustedCoords ? (d as any).adjustedCoords.y : yScale((d as any).y) as number + margin.top);\n\n      g.selectAll('.industry-ring-label')\n        .data(data.nodes.filter(d => d.id === state.active.datum.id ||\n          edgeData.find((e: {id: string}) => e.id === d.id)))\n        .each(d => {\n          const i = edgeData.findIndex((e: {id: string}) => e.id === d.id);\n          if (i !== -1) {\n            const innerCircleLength = edgeData.length < 7 ? edgeData.length : 7;\n            const adjustedCoords = drawPoint(\n              i < 7 ? innerRingRadius : outerRingRadius,\n              i < 7 ? i : i - 7,\n              i < 7 ? innerCircleLength : edgeData.length - 7,\n              centerX,\n              centerY,\n            );\n            (d as any).adjustedCoords = adjustedCoords;\n          }\n        })\n        .enter().append('text')\n          .attr('class', 'industry-ring-label')\n          .attr('x', (d: any) => d.adjustedCoords ? d.adjustedCoords.x : xScale(d.x) as number + margin.left)\n          .attr('y', (d: any) => d.adjustedCoords ?\n            d.adjustedCoords.y + Math.max(radius * 2.5, 6.5)\n            : yScale(d.y) as number + margin.top + Math.max(radius * 2.5, 6.5),\n          )\n          .style('pointer-events', 'none')\n          .style('font-size', Math.min(3.6, Math.max(radius * 0.8, 3.2)) + 'px')\n          .text(d => ellipsisText(d.name as string, 24))\n          .call(wrap, Math.max(radius * 14, 28), radius * 2)\n          .style('opacity', 0)\n          .transition()\n          .delay(500)\n          .duration(300)\n          .style('opacity', 1);\n\n      continents\n        // .style('pointer-events', 'none')\n        .style('opacity', 0);\n\n      countries\n        .style('pointer-events', 'none')\n        .style('opacity', 0);\n\n      hoveredShape\n        .style('display', 'none');\n\n      hoveredNode\n        .style('display', 'none');\n\n      continentLabels\n        .style('display', 'none');\n      continentClusterLineLabels\n        .style('display', 'none');\n      continentValueLabels\n        .style('display', 'none');\n\n      countryLabels\n        .style('display', 'none');\n\n      nodeLabels\n        .style('display', 'none');\n\n      state.active.element\n        .style('display', 'block');\n\n      if (state.zoomLevel !== ZoomLevel.Node) {\n        state.zoomLevel = ZoomLevel.Node;\n        onZoomLevelChange(ZoomLevel.Node);\n      }\n    } else {\n      nodes\n        .each((d: any) => d.adjustedCoords = undefined)\n        .attr('class', 'industry-edge-node')\n        .style('display', 'block')\n        .style('opacity', () => {\n          if (state.zoom < 2.5) {\n            return 0.5;\n          } else {\n            return 0.75;\n          }\n        })\n        .attr('fill', d => state.zoom < 3.5 ? '#fff' : d.color)\n        .attr('r', d => d.radius ? d.radius : radius)\n        .transition()\n        .ease(d3.easeCircleInOut)\n        .duration((d: any) => {\n          if (d.wasActive) {\n            d.wasActive = undefined;\n            return 0;\n          } else {\n            return 500;\n          }\n        })\n        .attr('cx', d => xScale(d.x) as number + margin.left )\n        .attr('cy', d => yScale(d.y) as number + margin.top );\n\n      countries\n        .style('pointer-events', 'auto')\n        .attr('fill', d => state.zoom < 3.5 ? d.color : rgba(d.color, 0))\n        .attr('stroke', rgba('#efefef', zoomScales.countries.stroke(state.zoom) as number))\n        .style('opacity', 1);\n\n      continentLabels\n        .style('opacity', zoomScales.continent.label(state.zoom) as number)\n        .style('display', 'block');\n      continentClusterLineLabels\n        .style('opacity', zoomScales.continent.label(state.zoom) as number)\n        .style('display', 'block');\n      continentValueLabels\n        .style('opacity', zoomScales.continent.label(state.zoom) as number)\n        .style('display', 'block');\n\n      countryLabels\n        .style('opacity', zoomScales.countries.label(state.zoom) as number)\n        .style('display', 'block');\n\n      if (state.zoom > 3.5) {\n        nodeLabels\n          .style('opacity', 1)\n          .style('display', 'block');\n      } else {\n        nodeLabels\n          .style('display', 'none');\n      }\n\n      if (state.zoom > 3.5) {\n        if (state.zoomLevel !== ZoomLevel.Node) {\n          state.zoomLevel = ZoomLevel.Node;\n          onZoomLevelChange(ZoomLevel.Node);\n        }\n      } else if (state.zoom > 1.5) {\n        if (state.zoomLevel !== ZoomLevel.Cluster2) {\n          state.zoomLevel = ZoomLevel.Cluster2;\n          onZoomLevelChange(ZoomLevel.Cluster2);\n        }\n      } else {\n        if (state.zoomLevel !== ZoomLevel.Cluster1) {\n          state.zoomLevel = ZoomLevel.Cluster1;\n          onZoomLevelChange(ZoomLevel.Cluster1);\n        }\n      }\n\n      outerRing\n        .style('opacity', 0);\n      innerRing\n        .style('opacity', 0);\n      outerRingLabelPath\n        .attr('d', '');\n      innerRingLabelPath\n        .attr('d', '');\n\n      if (state.hoveredShape) {\n        hoveredShape\n          .attr('points', state.hoveredShape.polygon.map(([xCoord, yCoord]: [number, number]) =>\n            [xScale(xCoord) as number + margin.left, yScale(yCoord) as number + margin.top].join(',')).join(' ') )\n          .attr('fill', 'none')\n          .style('display', 'block');\n      } else {\n        hoveredShape\n          .style('display', 'none');\n      }\n      if (state.hoveredNode) {\n        hoveredNode\n          .attr('cx', xScale(state.hoveredNode.x) as number + margin.left )\n          .attr('cy', yScale(state.hoveredNode.y) as number + margin.top )\n          .attr('fill', state.hoveredNode.color)\n          .attr('r', state.hoveredNode.radius ? state.hoveredNode.radius : radius)\n          .attr('stroke', state.zoom < 3.5 ? '#efefef' : '#333')\n          .attr('stroke-width', radius < 2 ? 0.6 : 1)\n          .style('display', 'block');\n      } else {\n        hoveredNode\n          .style('display', 'none');\n      }\n    }\n  }\n\n  function update(newData: SuccessResponse, rcaThreshold: number) {\n    const {c1Rca, c3Rca, clusterData, naicsRca} = newData;\n    const continentsData = clusterData.filter(d => d.level === 1);\n    const totalEmployees = continentsData.reduce((total, c) => c.numEmploy ? c.numEmploy + total : total, 0);\n\n    const intensityColorScaleContinents = d3.scaleSymlog()\n      .domain(d3.extent(c1Rca.map(c => c.rca ? c.rca : 0)) as [number, number])\n      .range(intensityColorRange as any);\n\n    const intensityColorScaleCountries = d3.scaleSymlog()\n      .domain(d3.extent(c3Rca.map(c => c.rca ? c.rca : 0)) as [number, number])\n      .range(intensityColorRange as any);\n\n    continents.each(d => {\n      const newDatum = c1Rca.find(({clusterId}) =>\n        clusterId !== null && d.clusterId.toString() === clusterId.toString());\n      if (newDatum && newDatum.rca !== null) {\n        d.color = intensityColorScaleContinents(newDatum.rca) as unknown as string;\n      } else {\n        d.color = intensityColorRange[0];\n      }\n      const countDatum = clusterData.find(({clusterId}) =>\n        clusterId !== null && d.clusterId.toString() === clusterId.toString());\n      if (countDatum && countDatum.numEmploy !== null) {\n        d.numEmploy = countDatum.numEmploy;\n        d.shareEmploy = parseFloat((countDatum.numEmploy / totalEmployees * 100).toFixed(1));\n      }\n    });\n\n    continentValueLabels\n      .text(d => {\n        const newDatum = clusterData.find(({clusterId}) =>\n          clusterId !== null && d.clusterId.toString() === clusterId.toString());\n        if (newDatum && newDatum.numEmploy !== null) {\n          return parseFloat((newDatum.numEmploy / totalEmployees * 100).toFixed(1)) + '% of employees';\n        } else {\n          return '0% of employees';\n        }\n\n      });\n\n    countries.each(d => {\n      const newDatum = c3Rca.find(({clusterId}) =>\n          clusterId !== null && d.clusterId.toString() === clusterId.toString());\n      if (newDatum && newDatum.rca !== null) {\n        d.color = intensityColorScaleCountries(newDatum.rca) as unknown as string;\n      } else {\n        d.color = intensityColorRange[0];\n      }\n      const countDatum = clusterData.find(({clusterId}) =>\n        clusterId !== null && d.clusterId.toString() === clusterId.toString());\n      if (countDatum && countDatum.numEmploy !== null) {\n        d.numEmploy = countDatum.numEmploy;\n        d.shareEmploy = parseFloat((countDatum.numEmploy / totalEmployees * 100).toFixed(1));\n      }\n    });\n\n    nodes.each(d => {\n      const newDatum = naicsRca.find(({naicsId}) => naicsId !== null && d.id.toString() === naicsId.toString());\n      if (newDatum && newDatum.rca !== null) {\n        d.color = newDatum.rca >= rcaThreshold ? d.industryColor : lowIntensityNodeColor;\n        d.rca = newDatum.rca;\n      } else {\n        d.color = lowIntensityNodeColor;\n        d.rca = 0;\n      }\n    })\n    .style('--true-fill-color', d => d.color);\n\n\n    render(true);\n  }\n\n  function updateNodeSize(nodeSizing: NodeSizing, newData?: SuccessResponse) {\n    const field = nodeSizing === NodeSizing.cityEmployees ? 'numEmploy' : 'numCompany';\n    let radiusScale: undefined | ((val: number) => number);\n    if (newData && newData.naicsData) {\n      if (nodeSizing === NodeSizing.rca) {\n        const allValues = newData.naicsRca.map(c => c.rca ? c.rca : 0) as number[];\n        radiusScale = d3.scaleSymlog()\n          .domain([0, d3.max(allValues)] as [number, number])\n          .range([ 1.5, 8]) as ((val: number) => number);\n      } else {\n        const allValues = newData.naicsData.map(c => c[field] ? c[field] : 0) as number[];\n        radiusScale = d3.scaleLinear()\n          .domain([0, d3.max(allValues)] as [number, number])\n          .range([ 1.75, 12]) as ((val: number) => number);\n      }\n    }\n    nodes.each(d => {\n      if (nodeSizing === NodeSizing.globalCompanies) {\n        d.radius = data.global.companySizeByScale(d.globalSumNumCompany) * radiusAdjuster;\n      } else if (nodeSizing === NodeSizing.globalEmployees) {\n        d.radius = data.global.employSizeByScale(d.globalSumNumEmploy) * radiusAdjuster;\n      } else if (radiusScale && newData && newData.naicsRca && nodeSizing === NodeSizing.rca) {\n        const targetNode = newData.naicsRca.find(dd => dd.naicsId !== null && dd.naicsId.toString() === d.id);\n        d.radius = targetNode && targetNode.rca\n          ? radiusScale(targetNode.rca as number) : radiusScale(0);\n      } else if (radiusScale && newData && newData.naicsData) {\n        const targetNode = newData.naicsData.find(dd => dd.naicsId === d.id);\n        d.radius = targetNode && targetNode[field]\n          ? radiusScale(targetNode[field] as number) : radiusScale(0);\n      } else {\n        d.radius = radius;\n      }\n    });\n    render(true);\n  }\n\n  function updateNodeColor(colorBy: ColorBy) {\n    nodes.each(d => {\n      if (colorBy === ColorBy.education) {\n        d.color = d.educationColor;\n      } else if (colorBy === ColorBy.wage) {\n        d.color = d.wageColor;\n      } else {\n        d.color = d.industryColor;\n      }\n    })\n    .style('--true-fill-color', d => d.color);\n    state.colorBy = colorBy;\n    render(true);\n  }\n\n  return {\n    render, reset, zoomIn, zoomOut, setHighlightedPoint, setExternalHoveredId, update,\n    updateNodeSize, updateNodeColor,\n  };\n\n};\n\nexport default createChart;\n","import {useEffect, useState} from 'react';\nimport {\n  useGlobalIndustryMap,\n} from '../../../../hooks/useGlobalIndustriesData';\nimport {\n  useGlobalClusterMap,\n} from '../../../../hooks/useGlobalClusterData';\nimport LAYOUT_DATA from './data/layout_data.json';\nimport {\n  ClassificationNaicsIndustry,\n} from '../../../../types/graphQL/graphQLTypes';\nimport {\n  sectorColorMap,\n  wageColorRange,\n  educationColorRange,\n} from '../../../../styling/styleUtils';\nimport {\n  useAggregateIndustryMap,\n} from '../../../../hooks/useAggregateIndustriesData';\nimport {\n  DigitLevel,\n} from '../../../../types/graphQL/graphQLTypes';\nimport {defaultYear} from '../../../../Utils';\nimport {scaleLinear} from 'd3-scale';\n\ninterface ContinentCluster {\n  center: number[];\n  color: string;\n  clusterCode: number;\n  clusterId: string;\n  name: string;\n  polygon: number[][];\n  numEmploy?: number;\n  shareEmploy?: number;\n}\n\ninterface CountryCluster extends ContinentCluster {\n  continent: string;\n}\n\ninterface Clusters {\n  continents: ContinentCluster[];\n  countries: CountryCluster[];\n}\n\ninterface Edge {\n  trg: ClassificationNaicsIndustry['id'];\n  proximity: number;\n}\n\ninterface Node {\n  id: ClassificationNaicsIndustry['id'];\n  name: ClassificationNaicsIndustry['name'];\n  code: ClassificationNaicsIndustry['code'];\n  industryColor: string;\n  color: string;\n  sectorName: string;\n  continent: string;\n  country: string;\n  edges: Edge[];\n  x: number;\n  y: number;\n  rca?: number;\n  radius?: number;\n  globalSumNumCompany: number;\n  globalSumNumEmploy: number;\n  yearsEducation: number;\n  hourlyWage: number;\n  educationColor: string;\n  wageColor: string;\n}\n\nexport interface LayoutData {\n  clusters: Clusters;\n  nodes: Node[];\n  global: {\n    companySizeByScale: (value: number) => number,\n    employSizeByScale: (value: number) => number,\n  };\n}\n\ninterface Output {\n  loading: boolean;\n  error: any;\n  data: LayoutData | undefined;\n}\n\nexport const lowIntensityNodeColor = '#dddddd';\n\nconst useLayoutData = ():Output => {\n  const [output, setOutput] = useState<Output>({\n    loading: true,\n    error: undefined,\n    data: undefined,\n  });\n\n  const {loading, error, data: industryData} = useGlobalIndustryMap();\n  const {loading: clusterLoading, error: clusterError, data: clusterData} = useGlobalClusterMap();\n\n  const {\n    loading: loadingIndustryMapData,\n    data: industryMapData,\n  } = useAggregateIndustryMap({level: DigitLevel.Six, year: defaultYear});\n\n  useEffect(() => {\n    if (!output.data) {\n      if (error) {\n        setOutput({loading: false, error, data: undefined});\n      } else if (clusterError) {\n        setOutput({loading: false, error: clusterError, data: undefined});\n      } else if (industryData && !loading && industryMapData && !loadingIndustryMapData &&\n        !clusterLoading && clusterData)\n      {\n        const {globalMinMax, industries} = industryMapData;\n        const minCompanySizeBy = globalMinMax && globalMinMax.minSumNumCompany ? globalMinMax.minSumNumCompany : 0.001;\n        const maxCompanySizeBy = globalMinMax && globalMinMax.maxSumNumCompany ? globalMinMax.maxSumNumCompany : 1;\n        const companySizeByScale = scaleLinear()\n          .domain([minCompanySizeBy, maxCompanySizeBy])\n          .range([ 3, 15]) as ((val: number) => number);\n\n        const minEmploySizeBy = globalMinMax && globalMinMax.minSumNumEmploy ? globalMinMax.minSumNumEmploy : 0.001;\n        const maxEmploySizeBy = globalMinMax && globalMinMax.maxSumNumEmploy ? globalMinMax.maxSumNumEmploy : 1;\n        const employSizeByScale = scaleLinear()\n          .domain([minEmploySizeBy, maxEmploySizeBy])\n          .range([ 3, 15]) as ((val: number) => number);\n\n        const educationColorScale = scaleLinear()\n          .domain([\n            globalMinMax.minYearsEducation,\n            globalMinMax.medianYearsEducation,\n            globalMinMax.maxYearsEducation,\n          ])\n          .range(educationColorRange as any) as any;\n        const wageColorScale = scaleLinear()\n          .domain([\n            globalMinMax.minHourlyWage,\n            globalMinMax.medianHourlyWage,\n            globalMinMax.maxHourlyWage,\n          ])\n          .range(wageColorRange as any) as any;\n\n        const data: Output['data'] = {\n          clusters: {\n            continents: LAYOUT_DATA.clusters.continents.map(c => {\n              const cluster = clusterData[c.clusterId.toString()];\n              const name = cluster && cluster.name ? cluster.name : '---';\n              return {...c, name };\n            }),\n            countries: LAYOUT_DATA.clusters.countries.map(c => {\n              const cluster = clusterData[c.clusterId.toString()];\n              const name = cluster && cluster.name ? cluster.name : '---';\n              return {...c, name };\n            }),\n          },\n          nodes: LAYOUT_DATA.nodes.map(n => {\n            const industry = industryData[n.id.toString()];\n            const parent = industryData[industry.naicsIdTopParent.toString()];\n            const parentIndustry = sectorColorMap.find(s => s.id === industry.naicsIdTopParent.toString());\n            const globalIndustry = industries[industry.naicsId];\n            const yearsEducation = globalIndustry ? globalIndustry.yearsEducationRank : 0;\n            const hourlyWage = globalIndustry ? globalIndustry.hourlyWageRank : 0;\n            const yearsEducationRank = globalIndustry ? globalIndustry.yearsEducationRank : 0;\n            const hourlyWageRank = globalIndustry ? globalIndustry.hourlyWageRank : 0;\n            return {\n              ...n,\n              id: industry.naicsId,\n              name: industry.name,\n              code: industry.code,\n              industryColor: parentIndustry ? parentIndustry.color : lowIntensityNodeColor,\n              color: parentIndustry ? parentIndustry.color : lowIntensityNodeColor,\n              sectorName: parent && parent.name ? parent.name : '',\n              edges: n.edges.map(e => ({trg: e.trg.toString(), proximity: e.proximity})),\n              globalSumNumCompany: globalIndustry ? globalIndustry.sumNumCompany : 0,\n              globalSumNumEmploy: globalIndustry ? globalIndustry.sumNumEmploy : 0,\n              yearsEducation,\n              hourlyWage,\n              educationColor: educationColorScale(yearsEducationRank),\n              wageColor: wageColorScale(hourlyWageRank),\n            };\n          }),\n          global: {\n            companySizeByScale, employSizeByScale,\n          },\n        };\n        setOutput({loading: false, error: undefined, data});\n      }\n    }\n  }, [\n    output, loading, error, industryData, industryMapData, loadingIndustryMapData,\n    clusterLoading, clusterError,clusterData,\n  ]);\n\n  return output;\n};\n\nexport default useLayoutData;\n\n","import { useQuery, gql } from '@apollo/client';\nimport {\n  NaicsDensityRescale,\n  DigitLevel,\n  NaicsRcaCalculation,\n  PeerGroup,\n  CompositionType,\n  defaultCompositionType,\n  isValidPeerGroup,\n  CityIndustryYear,\n} from '../types/graphQL/graphQLTypes';\nimport useCurrentCityId from './useCurrentCityId';\nimport {defaultYear} from '../Utils';\nimport useQueryParams from './useQueryParams';\nimport useCurrentBenchmark from './useCurrentBenchmark';\n\nexport enum RegionGroup {\n  World = 'world',\n  SimilarCities = 'similarcities',\n}\n\nconst NODE_RCA_QUERY = gql`\n  query GetClusterIntesityData(\n    $cityId: Int!,\n    $year: Int!,\n    $level: Int!,\n    $peerGroup: String,\n    $partnerCityIds: [Int],\n    $variable: String,\n  ) {\n    naicsDensity: naicsDensityRescale(\n      cityId: $cityId,\n      peerGroup: $peerGroup,\n      partnerCityIds: $partnerCityIds,\n      year: $year,\n      naicsLevel: $level\n    ) {\n      naicsId\n      densityCompany\n      densityEmploy\n    }\n    naicsRca(\n      cityId: $cityId,\n      peerGroup: $peerGroup,\n      partnerCityIds: $partnerCityIds,\n      year: $year,\n      naicsLevel: $level,\n      variable: $variable,\n    ) {\n      naicsId\n      rca\n      comparableIndustry\n    }\n    naicsData: cityIndustryYearList(cityId: $cityId, year: $year, level: $level) {\n      naicsId\n      numCompany\n      numEmploy\n      id\n    }\n  }\n`;\n\ninterface NaicsDensity {\n  naicsId: NaicsDensityRescale['naicsId'];\n  densityCompany: NaicsDensityRescale['densityCompany'];\n  densityEmploy: NaicsDensityRescale['densityEmploy'];\n}\n\ninterface NaicsData {\n  naicsId: CityIndustryYear['naicsId'];\n  numCompany: CityIndustryYear['numCompany'];\n  numEmploy: CityIndustryYear['numEmploy'];\n}\n\ninterface NaicsRca {\n  naicsId: NaicsRcaCalculation['naicsId'];\n  comparableIndustry: NaicsRcaCalculation['comparableIndustry'];\n  rca: NaicsRcaCalculation['rca'];\n}\n\nexport interface SuccessResponse {\n  naicsDensity: NaicsDensity[];\n  naicsRca: NaicsRca[];\n  naicsData: NaicsData[];\n}\n\ninterface Variables {\n  cityId: number | null;\n  year: number;\n  level: DigitLevel;\n  peerGroup: PeerGroup | '';\n  partnerCityIds: [number] | [];\n  variable: 'employ' | 'company';\n}\n\nconst useClusterIntensityQuery = (variables: Variables) =>\n  useQuery<SuccessResponse, Variables>(NODE_RCA_QUERY, { variables });\n\nconst useRCAData = (level: DigitLevel) => {\n  const cityId = useCurrentCityId();\n\n  const { composition_type } = useQueryParams();\n  const { benchmark } = useCurrentBenchmark();\n\n\n  const defaultCompositionVariable = defaultCompositionType === CompositionType.Companies ? 'company' : 'employ';\n  let variable: 'employ' | 'company' = defaultCompositionVariable;\n  if (composition_type === CompositionType.Companies) {\n    variable = 'company';\n  } else if (composition_type === CompositionType.Employees) {\n    variable = 'employ';\n  }\n\n  const peerGroup = isValidPeerGroup(benchmark) ? benchmark as PeerGroup : '';\n\n  const partnerCityIds: [number] | [] = benchmark !== undefined && !isNaN(parseInt(benchmark, 10))\n    ? [parseInt(benchmark, 10)] : [];\n\n  const {loading, error, data} = useClusterIntensityQuery({\n    cityId: cityId !== null ? parseInt(cityId, 10) : null,\n    year: defaultYear,\n    level,\n    peerGroup,\n    partnerCityIds,\n    variable,\n  });\n\n  return cityId !== null ? {loading, error, data} : {loading: true, error: undefined, data: undefined};\n};\n\nexport default useRCAData;\n","import React, {useEffect, useState, useRef, useCallback} from 'react';\nimport createChart, {\n  ZoomLevel,\n  outerRingRadius,\n  innerRingRadius,\n  svgRingModeClassName,\n  NodeAction,\n} from './createChart';\nimport useLayoutData from './useLayoutData';\nimport useRCAData, {SuccessResponse} from './useRCAData';\nimport styled from 'styled-components/macro';\nimport {\n  primaryFont,\n  ButtonBase,\n  lightBorderColor,\n  primaryColorLight,\n  primaryColor,\n  secondaryFont,\n} from '../../../../styling/styleUtils';\nimport LoadingBlock from '../../../transitionStateComponents/VizLoadingBlock';\nimport {RapidTooltipRoot} from '../../../../utilities/rapidTooltip';\nimport {NodeSizing, ColorBy, ClusterMode} from '../../../../routing/routes';\nimport {DigitLevel} from '../../../../types/graphQL/graphQLTypes';\nimport {\n  useAggregateIndustryMap,\n} from '../../../../hooks/useAggregateIndustriesData';\nimport {defaultYear} from '../../../../Utils';\n\nconst clusterOverlayClassNames = {\n  [ClusterMode.outline]: 'industry-space-clusters-outlines-class',\n  [ClusterMode.overlay]: undefined,\n  [ClusterMode.none]: 'hide-industry-space-clusters-overlay-class',\n};\n\nconst Root = styled.div`\n  will-change: all;\n\n  svg {\n    &:not(.${svgRingModeClassName}) {\n      cursor: grab;\n    }\n\n    /* Node hover and active styling */\n    .industry-node,\n    .industry-continents,\n    .industry-countries {\n      transition: fill 0.2s ease;\n    }\n\n    .industry-node,\n    .industry-edge-node {\n      &:hover,\n      &.active {\n        cursor: pointer;\n        stroke: #333;\n        stroke-width: 0.5;\n      }\n    }\n\n    .industry-continents,\n    .industry-countries {\n      &:hover {\n        cursor: pointer;\n      }\n    }\n\n    /* Ring styling for when in ring mode */\n    circle.outer-ring {\n      fill: none;\n      stroke: #bfbfbf;\n      stroke-width: 0.5;\n      r: ${outerRingRadius}px;\n      opacity: 0;\n    }\n\n    circle.inner-ring {\n      r: ${innerRingRadius}px;\n      fill: none;\n      stroke: #bfbfbf;\n      stroke-width: 0.5;\n      opacity: 0;\n    }\n\n    textPath.ring-label {\n      font-size: 5.75px;\n      font-weight: 600;\n      text-transform: uppercase;\n      fill: ${primaryColorLight};\n      pointer-events: none;\n    }\n\n    /* Remove pointer events from multiple layers */\n    .industry-countries,\n    circle.outer-ring,\n    circle.inner-ring,\n    .industry-cluster-hovered,\n    .industry-node,\n    .industry-node-hovered,\n    .industry-nodes-label-group,\n    .industry-continents-label,\n    .industry-continents-cluster-label,\n    .industry-continents-value-label,\n    .industry-countries-label-group {\n      pointer-events: none;\n      will-change: transform, fill, opacity;\n      transition: fill 1s ease;\n    }\n\n    /* Label styling */\n    .industry-continents-label,\n    .industry-continents-cluster-label,\n    .industry-continents-value-label,\n    .industry-countries-label,\n    .industry-nodes-label,\n    .industry-ring-label {\n      fill: #444;\n      paint-order: stroke;\n      text-anchor: middle;\n      font-family: ${primaryFont};\n      will-change: transform, fill, opacity;\n    }\n\n    .industry-continents-label,\n    .industry-continents-cluster-label,\n    .industry-continents-value-label {\n      stroke: #efefef;\n      stroke-width: 2.5px;\n      font-weight: 600;\n      text-transform: uppercase;\n    }\n\n    .industry-countries-label {\n      stroke: #efefef;\n      stroke-width: 1px;\n      font-weight: 600;\n    }\n\n    .industry-nodes-label {\n      stroke: #fff;\n      stroke-width: 0.1px;\n    }\n\n    .industry-ring-label {\n      stroke: #fff;\n      stroke-width: 0.6px;\n    }\n  }\n\n  .industry-continents {\n    stroke-width: 3.5px;\n    &:hover {\n      stroke-width: 7px;\n    }\n  }\n\n  .industry-countries {\n\n    &:hover {\n      stroke-width: 3px;\n    }\n  }\n\n  &.${clusterOverlayClassNames[ClusterMode.none]} {\n    svg {\n      .industry-continents,\n      .industry-countries,\n      .industry-continents-label,\n      .industry-continents-cluster-label,\n      .industry-continents-value-label,\n      .industry-countries-label {\n        display: none !important;\n      }\n    }\n    svg:not(.${svgRingModeClassName}) {\n      circle.industry-edge-node {\n        display: block !important;\n        opacity: 0.8 !important;\n        pointer-events: all !important;\n        fill: var(--true-fill-color) !important;\n      }\n    }\n  }\n\n  &.${clusterOverlayClassNames[ClusterMode.outline]} {\n    svg {\n      .industry-continents,\n      .industry-countries {\n        fill: rgba(255, 255, 255, 0);\n        stroke: #efefef !important;\n      }\n    }\n    svg:not(.${svgRingModeClassName}) {\n      circle.industry-edge-node {\n        display: block !important;\n        opacity: 0.8 !important;\n        fill: var(--true-fill-color) !important;\n      }\n    }\n  }\n`;\n\nconst ZoomButtonsContainer = styled.div`\n  position: absolute;\n  right: 0;\n  top: 0;\n  pointer-events: none;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n`;\n\nconst ZoomButton = styled(ButtonBase)`\n  pointer-events: all;\n  border: solid 1px ${lightBorderColor};\n  background-color: #fff;\n  font-size: 0.65rem;\n  font-weight: 600;\n  padding: 0.1rem 0.4rem;\n  margin-bottom: 0.45rem;\n`;\n\nconst BreadCrumbContainer = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  pointer-events: none;\n\n  @media (max-width: 950px) {\n    justify-content: flex-end;\n  }\n\n`;\n\nconst BreadCrumb = styled.button`\n  transform: translate(0, calc(-100% - 0.25rem));\n  pointer-events: all;\n  max-width: min-content;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  font-family: ${secondaryFont};\n  text-transform: uppercase;\n  font-size: 0.6rem;\n  font-size: clamp(0.6rem, 0.7vw, 0.875rem);\n  background-color: transparent;\n\n  @media (max-width: 830px) {\n    font-size: 0.5rem;\n  }\n\n  @media (max-width: 390px) {\n    display: none;\n  }\n`;\n\nconst Arrow = styled.span`\n  font-size: 1.25rem;\n  padding-left: 0.6rem;\n\n  @media (max-width: 950px) {\n    font-size: 0.9rem;\n  }\n`;\n\ntype Chart = {\n  initialized: false;\n} | {\n  initialized: true;\n  render: () => void;\n  reset: () => void;\n  zoomIn: () => void;\n  zoomOut: () => void;\n  setHighlightedPoint: (naicsId: string | undefined, action: NodeAction) => void;\n  setExternalHoveredId: (naicsId: string | undefined) => void;\n  update: (data: SuccessResponse, rcaThreshold: number) => void;\n  updateNodeSize: (nodeSizing: NodeSizing, data?: SuccessResponse) => void;\n  updateNodeColor: (colorBy: ColorBy) => void;\n};\n\ninterface Props {\n  width: number;\n  height: number;\n  highlighted: string | undefined;\n  hovered: string | undefined;\n  onNodeSelect: (naicsId: string | undefined, action: NodeAction) => void;\n  onNodeHover: (naicsId: string | undefined) => void;\n  onZoomLevelChange: (zoomLevel: ZoomLevel) => void;\n  zoomLevel: ZoomLevel;\n  clusterOverlayMode: ClusterMode;\n  nodeSizing: NodeSizing | undefined;\n  colorBy: ColorBy;\n  rcaThreshold: number;\n}\n\nconst Chart = (props: Props) => {\n  const {\n    width, height, onNodeSelect, highlighted, onZoomLevelChange, clusterOverlayMode,\n    onNodeHover, hovered, nodeSizing, colorBy, zoomLevel, rcaThreshold,\n  } = props;\n\n  const chartRef = useRef<HTMLDivElement | null>(null);\n  const breadCrumbCluster1Ref = useRef<HTMLButtonElement | null>(null);\n  const breadCrumbCluster2Ref = useRef<HTMLButtonElement | null>(null);\n  const breadCrumbNodeRef = useRef<HTMLButtonElement | null>(null);\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\n  const [chart, setChart] = useState<Chart>({initialized: false});\n\n  const layout = useLayoutData();\n  const {loading, data} = useRCAData(DigitLevel.Six);\n\n  const aggregateIndustryDataMap = useAggregateIndustryMap({level: DigitLevel.Six, year: defaultYear});\n\n  useEffect(() => {\n    const chartNode = chartRef.current;\n    const tooltipNode = tooltipRef.current;\n    const breadCrumbCluster1Button = breadCrumbCluster1Ref.current;\n    const breadCrumbCluster2Button = breadCrumbCluster2Ref.current;\n    const breadCrumbNodeButton = breadCrumbNodeRef.current;\n    if (chartNode) {\n      if (chartNode && layout.data && tooltipNode &&\n          breadCrumbCluster1Button && breadCrumbCluster2Button && breadCrumbNodeButton && (\n          (chart.initialized === false && width && height)\n      )) {\n        chartNode.innerHTML = '';\n        setChart({...createChart({\n          rootEl: chartNode,\n          data: layout.data,\n          rootWidth: width,\n          rootHeight: height,\n          tooltipEl: tooltipNode,\n          onNodeSelect, onZoomLevelChange,\n          onNodeHover,\n          breadCrumbCluster1Button,\n          breadCrumbCluster2Button,\n          breadCrumbNodeButton,\n        }), initialized: true });\n      }\n    }\n  }, [chartRef, chart, width, height, layout, onNodeSelect, onZoomLevelChange, onNodeHover]);\n\n  useEffect(() => {\n    if (chart.initialized) {\n      const action = highlighted === undefined ? NodeAction.SoftReset : NodeAction.SelectNode;\n      chart.setHighlightedPoint(highlighted, action);\n    }\n  }, [chart, highlighted]);\n\n  useEffect(() => {\n    if (chart.initialized) {\n      chart.setExternalHoveredId(hovered);\n    }\n  }, [chart, hovered]);\n\n  useEffect(() => {\n    if (chart.initialized && data !== undefined) {\n      chart.update(data, rcaThreshold);\n    }\n  }, [chart, data, colorBy, rcaThreshold]);\n\n  useEffect(() => {\n    if (chart.initialized) {\n      const newData = !nodeSizing || nodeSizing === NodeSizing.cityCompanies ||\n        nodeSizing === NodeSizing.cityEmployees || nodeSizing === NodeSizing.rca\n        ? data\n        : undefined;\n      chart.updateNodeSize(nodeSizing ? nodeSizing : NodeSizing.rca, newData);\n    }\n  }, [chart, data, nodeSizing]);\n\n  useEffect(() => {\n    if (chart.initialized && colorBy !== ColorBy.sector) {\n      chart.updateNodeColor(colorBy);\n    }\n  }, [chart, colorBy, aggregateIndustryDataMap]);\n\n  const resetZoom = useCallback(() => {\n    if (chart.initialized) {\n      chart.reset();\n    }\n  }, [chart]);\n\n  const zoomIn = useCallback(() => {\n    if (chart.initialized) {\n      chart.zoomIn();\n    }\n  }, [chart]);\n\n  const zoomOut = useCallback(() => {\n    if (chart.initialized) {\n      chart.zoomOut();\n    }\n  }, [chart]);\n\n  const loadingOverlay = loading || (!chart.initialized && width && height)\n    ? <LoadingBlock /> : null;\n\n  return (\n    <>\n      <Root\n        ref={chartRef}\n        style={{width, height}}\n        className={clusterOverlayClassNames[clusterOverlayMode]}\n      />\n      <BreadCrumbContainer>\n        <BreadCrumb\n          ref={breadCrumbCluster1Ref}\n        >\n          <span\n            style={zoomLevel === ZoomLevel.Cluster1 ?\n              {color: primaryColor, fontWeight: 600}\n              : undefined}\n          >\n            High&nbsp;Aggregation\n            Knowledge&nbsp;Clusters\n          </span>\n          <Arrow>{'→'}</Arrow>\n        </BreadCrumb>\n        <BreadCrumb\n          ref={breadCrumbCluster2Ref}\n        >\n          <span\n            style={zoomLevel === ZoomLevel.Cluster2 ?\n              {color: primaryColor, fontWeight: 600}\n              : undefined}\n          >\n            Low&nbsp;Aggregation\n            Knowledge&nbsp;Clusters\n          </span>\n          <Arrow>{'→'}</Arrow>\n        </BreadCrumb>\n        <BreadCrumb\n          ref={breadCrumbNodeRef}\n        >\n          <span\n            style={zoomLevel === ZoomLevel.Node ?\n              {color: primaryColor, fontWeight: 600}\n              : undefined}\n          >\n            Single&nbsp;Industries\n          </span>\n        </BreadCrumb>\n      </BreadCrumbContainer>\n      <RapidTooltipRoot ref={tooltipRef} />\n      <ZoomButtonsContainer>\n        <ZoomButton onClick={zoomIn}>\n          + Zoom In\n        </ZoomButton>\n        <ZoomButton onClick={zoomOut}>\n          - Zoom Out\n        </ZoomButton>\n        <ZoomButton onClick={resetZoom}>\n          Reset Zoom\n        </ZoomButton>\n      </ZoomButtonsContainer>\n      {loadingOverlay}\n    </>\n  );\n};\n\nexport default Chart;\n","import React, {useRef, useEffect, useState} from 'react';\nimport {\n  DigitLevel,\n  CompositionType,\n} from '../../../types/graphQL/graphQLTypes';\nimport {useWindowWidth} from '../../../contextProviders/appContext';\nimport styled from 'styled-components/macro';\nimport {breakPoints} from '../../../styling/GlobalGrid';\nimport PreChartRow from '../../../components/general/PreChartRow';\nimport Chart from './chart';\nimport {ZoomLevel, NodeAction} from './chart/createChart';\nimport {NodeSizing, ColorBy, ClusterMode} from '../../../routing/routes';\nimport useFluent from '../../../hooks/useFluent';\nimport {Mode} from '../../general/searchIndustryInGraphDropdown';\nimport PresenceToggle from '../legend/PresenceToggle';\nimport BenchmarkLegend from '../legend/BenchmarkLegend';\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  grid-column: 1;\n  grid-row: 2;\n  position: relative;\n\n  @media ${breakPoints.small} {\n    grid-row: 3;\n    grid-column: 1;\n  }\n`;\n\nconst IndustrySpaceContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n`;\n\nconst BenchmarkLegendRoot = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100%;\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  pointer-events: none;\n  z-index: 100;\n`;\n\nconst BenchmarkLegendContent = styled.div`\n  background-color: rgba(255, 255, 255, 0.75);\n  pointer-events: all;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 0.5rem;\n`;\n\ninterface Props {\n  cityId: number;\n  year: number;\n  highlighted: string | undefined;\n  preChartRowKey: string;\n  hovered: string | undefined;\n  compositionType: CompositionType;\n  setHighlighted: (value: string | undefined) => void;\n  onNodeSelect: (value: string | undefined, action: NodeAction) => void;\n  setHovered: (value: string | undefined) => void;\n  setZoomLevel: (zoomLevel: ZoomLevel) => void;\n  zoomLevel: ZoomLevel;\n  clusterOverlayMode: ClusterMode;\n  nodeSizing: NodeSizing | undefined;\n  colorBy: ColorBy;\n  rcaThreshold: number;\n}\n\nconst ClusteredIndustrySpace = (props: Props) => {\n  const {\n    setHighlighted, highlighted, setZoomLevel, clusterOverlayMode,\n    setHovered, hovered, nodeSizing, preChartRowKey, onNodeSelect,\n    colorBy, zoomLevel, rcaThreshold,\n  } = props;\n  const windowDimensions = useWindowWidth();\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const [dimensions, setDimensions] = useState<{width: number, height: number} | undefined>(undefined);\n  const chartKey = dimensions\n    ? 'industry-space-sized-to-container-key' + dimensions.width.toString() + dimensions.height.toString()\n    : 'industry-space-sized-to-container-key-0-0';\n  const getString = useFluent();\n\n  useEffect(() => {\n    const node = rootRef.current;\n    if (node) {\n      setTimeout(() => {\n        const {width, height} = node.getBoundingClientRect();\n        setDimensions({width, height});\n      }, 0);\n    }\n  }, [rootRef, windowDimensions]);\n\n  return (\n    <>\n      <PreChartRow\n        key={preChartRowKey}\n        searchInGraphOptions={{\n          hiddenParents: [], digitLevel: DigitLevel.Six, clusterLevel: null, setHighlighted,\n          mode: Mode.naics,\n        }}\n        settingsOptions={{\n          compositionType: true,\n          clusterOverlayMode: true,\n          nodeSizing: {rca: true},\n          colorBy: {nodes: true},\n          digitLevel: { sixDigitOnlyMessage: getString('glossary-digit-level-disabled-industry-space') },\n          rcaThreshold: true,\n        }}\n      />\n      <Root ref={rootRef}>\n        <IndustrySpaceContainer>\n          <Chart\n            key={chartKey}\n            width={dimensions ? dimensions.width : 0}\n            height={dimensions ? dimensions.height : 0}\n            onNodeSelect={onNodeSelect}\n            hovered={hovered}\n            onNodeHover={setHovered}\n            highlighted={highlighted}\n            onZoomLevelChange={setZoomLevel}\n            clusterOverlayMode={clusterOverlayMode}\n            nodeSizing={nodeSizing}\n            colorBy={colorBy}\n            zoomLevel={zoomLevel}\n            rcaThreshold={rcaThreshold}\n          />\n        </IndustrySpaceContainer>\n        <BenchmarkLegendRoot>\n          <BenchmarkLegendContent>\n            <PresenceToggle />\n            <BenchmarkLegend />\n          </BenchmarkLegendContent>\n        </BenchmarkLegendRoot>\n      </Root>\n    </>\n  );\n};\n\nexport default ClusteredIndustrySpace;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport {breakPoints} from '../../../styling/GlobalGrid';\nimport {intensityColorRange} from '../../../styling/styleUtils';\nimport useFluent from '../../../hooks/useFluent';\nimport {joyrideClassNames} from '../../navigation/secondaryHeader/guide/CitiesGuide';\n\nconst RootBase = styled.div`\n  grid-row: 3;\n\n  @media ${breakPoints.small} {\n    grid-row: 4;\n  }\n`;\n\nconst StandardRoot = styled(RootBase)`\n  grid-column: 1;\n\n  @media (max-width: 1200px) {\n    grid-column: 1 / -1;\n  }\n`;\n\nconst FullWidthRoot = styled(RootBase)`\n  grid-column: 1 / -1;\n`;\n\nconst Content = styled.div`\n  padding: 0.875rem 0;\n`;\n\nconst Bar = styled.div`\n  width: 100%;\n  height: 0.6rem;\n  background: linear-gradient(90deg, ${intensityColorRange[0]} 0%, ${intensityColorRange[1]} 100%);\n`;\n\nconst Labels = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-size: 0.75rem;\n  text-transform: uppercase;\n`;\n\nconst Label = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\ninterface Props {\n  fullWidth?: boolean;\n}\n\nconst IntensityLegend = (props: Props) => {\n  const {fullWidth} = props;\n  const Root = fullWidth ? FullWidthRoot : StandardRoot;\n  const getString = useFluent();\n\n  return (\n    <Root className={joyrideClassNames.colorLegendNoFilter}>\n      <Content>\n        <Labels>\n          <Label>{getString('global-intensity-low')}</Label>\n          <Label>{getString('global-intensity-high')}</Label>\n        </Labels>\n        <Bar />\n      </Content>\n    </Root>\n  );\n};\n\nexport default IntensityLegend;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport {baseColor, lightBaseColor} from '../../../styling/styleUtils';\nimport {lowIntensityNodeColor} from '../../dataViz/industrySpace/chart/useLayoutData';\n\nconst Root = styled.div`\n  width: 100%;\n  box-sizing: border-box;\n  padding: 0.875rem 0;\n  position: sticky;\n  left: 0;\n  bottom: -1px;\n  background-color: #fff;\n  z-index: 100;\n  border-top: none;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: auto auto auto;\n  align-items: center;\n  font-size: 0.55rem;\n  font-size: clamp(0.55rem, 0.95vw, 0.65rem);\n  grid-column-gap: 1rem;\n  grid-row-gap: 0.5rem;\n  box-shadow: 0px -4px 3px 0px rgba(255, 255, 255, 1);\n`;\n\nconst ColumnBase = styled.div`\n  display: grid;\n  grid-template-columns: 1.25rem 1fr;\n  grid-column-gap: 0.2rem;\n  align-items: center;\n`;\n\nconst LeftColumn = styled(ColumnBase)`\n  grid-column: 1;\n`;\nconst RightColumn = styled(ColumnBase)`\n  grid-column: 2;\n`;\n\nconst Title = styled.h3`\n  font-weight: 400;\n  font-size: 0.65rem;\n  font-size: clamp(0.65rem, 1vw, 0.75rem);\n  color: ${baseColor};\n  grid-column: 1 / -1;\n  margin: 0;\n  font-weight: 600;\n`;\n\nconst NodeBase = styled.div`\n  border-radius: 5000px;\n  background-color: ${lightBaseColor};\n  border: solid 1px ${lightBaseColor};\n  margin: auto;\n  flex-shrink: 0;\n`;\n\nconst NodeSmall = styled(NodeBase)`\n  width: 0.25rem;\n  height: 0.25rem;\n`;\nconst NodeMedium = styled(NodeBase)`\n  width: 0.5rem;\n  height: 0.5rem;\n`;\nconst NodeBlank = styled(NodeMedium)`\n  background-color: ${lowIntensityNodeColor};\n  border-color: ${lowIntensityNodeColor};\n`;\nconst NodeLarge = styled(NodeBase)`\n  width: 1rem;\n  height: 1rem;\n`;\n\ninterface Props {\n  sizeBy: null | {\n    title: string;\n    minLabel: string;\n    maxLabel: string;\n  };\n  colorBy: null | {\n    coloredLabel: string;\n    greyLabel: string;\n  };\n}\n\nconst NodeLegend = (props: Props) => {\n  const sizeBy = props.sizeBy ? (\n    <>\n      <LeftColumn style={{gridRow: 1}}>\n        <Title>\n          {props.sizeBy.title}\n        </Title>\n      </LeftColumn>\n      <LeftColumn style={{gridRow: 2}}>\n        <NodeLarge /> <div>{props.sizeBy.maxLabel}</div>\n      </LeftColumn>\n      <LeftColumn style={{gridRow: 3}}>\n        <NodeSmall /> <div>{props.sizeBy.minLabel}</div>\n      </LeftColumn>\n    </>\n  ) : null;\n\n  const colorBy = props.colorBy ? (\n    <>\n      <RightColumn style={{gridRow: 1}}>\n        <Title>\n          Node Colors\n        </Title>\n      </RightColumn>\n      <RightColumn style={{gridRow: 2}}>\n        <NodeMedium />\n        <div>\n          <div>Colored Nodes:</div>\n          <div>{props.colorBy.coloredLabel}</div>\n        </div>\n      </RightColumn>\n      <RightColumn style={{gridRow: 3}}>\n        <NodeBlank />\n        <div>\n          <div>Grey Nodes:</div>\n          <div>{props.colorBy.greyLabel}</div>\n        </div>\n      </RightColumn>\n    </>\n  ) : null;\n  return (\n    <Root>\n      {sizeBy}\n      {colorBy}\n    </Root>\n  );\n};\n\nexport default NodeLegend;\n","import * as d3 from 'd3';\nimport {\n  getAspectRatio,\n} from '../Utils';\nimport {rgba} from 'polished';\nimport {SuccessResponse} from '../useRCAData';\nimport {LayoutData} from '../useLayoutData';\nimport {intensityColorRange} from '../../../../../styling/styleUtils';\n\ninterface Input {\n  rootEl: HTMLDivElement;\n  data: LayoutData;\n  rootWidth: number;\n  rootHeight: number;\n}\n\nconst createChart = (input: Input) => {\n  const {\n    rootEl, data, rootWidth, rootHeight,\n  } = input;\n\n  const {\n    width, height, outerWidth, outerHeight, margin,\n  } = getAspectRatio({w: 4, h: 3}, {w: rootWidth, h: rootHeight}, -5);\n\n  const svg = d3.select(rootEl).append('svg')\n    .attr('width',  outerWidth)\n    .attr('height', outerHeight);\n\n  const xScale = d3.scaleLinear()                // interpolator for X axis -- inner plot region\n    .domain(d3.extent(data.nodes, ({x}) => x) as [number, number])\n    .range([0, width]);\n\n  const yScale = d3.scaleLinear()                // interpolator for Y axis -- inner plot region\n    .domain(d3.extent(data.nodes, ({y}) => y) as [number, number])\n    .range([height, 0]);\n\n  const g = svg.append('g');\n\n\n  const continents = g.selectAll('.industry-continents')\n    .data(data.clusters.continents)\n    .enter().append('polygon')\n      .attr('class', 'industry-continents')\n      .attr('points', d =>\n        d.polygon.map(([xCoord, yCoord]: [number, number]) =>\n          [xScale(xCoord) as number + margin.left, yScale(yCoord) as number + margin.top].join(',')).join(' '),\n      )\n      .attr('fill', d => d.color)\n      .attr('stroke', rgba('#efefef', 1))\n      .attr('stroke-width', 1.5);\n\n  g.selectAll('.industry-countries')\n    .data(data.clusters.countries)\n    .enter().append('polygon')\n      .attr('class', 'industry-countries')\n      .attr('points', d =>\n        d.polygon.map(([xCoord, yCoord]) =>\n          [xScale(xCoord) as number + margin.left, yScale(yCoord) as number + margin.top].join(',')).join(' '),\n      )\n      .attr('fill', 'none')\n      .attr('stroke', rgba('#efefef', 0.5))\n      .attr('stroke-width', 0.75);\n\n  const node = g.append('circle')\n      .attr('class', 'industry-node')\n      .attr('r', 5)\n      .attr('stroke', '#fff')\n      .attr('stroke-width', 0.75);\n\n  function render(nodeId: string | undefined) {\n    const targetNode = data.nodes.find(n => n.id === nodeId);\n    if (targetNode) {\n      node\n        .style('display', 'block')\n        .attr('fill', targetNode.industryColor)\n        .attr('cx', xScale(targetNode.x) as number + margin.left )\n        .attr('cy', yScale(targetNode.y) as number + margin.top );\n    }\n  }\n\n  function update(nodeId: string | undefined, newData: SuccessResponse) {\n    const intensityColorScaleContinents = d3.scaleSymlog()\n      .domain(d3.extent(newData.c1Rca.map(c => c.rca ? c.rca : 0)) as [number, number])\n      .range(intensityColorRange as any);\n\n    continents.each(d => {\n      const newDatum = newData.c1Rca.find(({clusterId}) =>\n        clusterId !== null && d.clusterId.toString() === clusterId.toString());\n        if (newDatum && newDatum.rca !== null) {\n          d.color = intensityColorScaleContinents(newDatum.rca) as unknown as string;\n        } else {\n          d.color = intensityColorRange[0];\n        }\n      })\n    .attr('fill', d => d.color);\n\n    render(nodeId);\n  }\n\n  return {render, update};\n\n};\n\nexport default createChart;\n","import React, {useEffect, useState, useRef} from 'react';\nimport createChart from './createChart';\nimport useLayoutData from '../useLayoutData';\nimport useRCAData, {SuccessResponse} from '../useRCAData';\nimport {DigitLevel} from '../../../../../types/graphQL/graphQLTypes';\n\ntype Chart = {\n  initialized: false;\n} | {\n  initialized: true;\n  render: (nodeId: string | undefined) => void;\n  update: (nodeId: string | undefined, data: SuccessResponse) => void;\n};\n\ninterface Props {\n  width: number;\n  height: number;\n  highlighted: string | undefined;\n}\n\nconst Chart = (props: Props) => {\n  const {\n    width, height, highlighted,\n  } = props;\n\n  const chartRef = useRef<HTMLDivElement | null>(null);\n  const [chart, setChart] = useState<Chart>({initialized: false});\n\n  const layout = useLayoutData();\n  const {data} = useRCAData(DigitLevel.Six);\n\n  useEffect(() => {\n    const chartNode = chartRef.current;\n    if (chartNode) {\n      if (chartNode && layout.data && (\n          (chart.initialized === false && width && height)\n      )) {\n        chartNode.innerHTML = '';\n        setChart({...createChart({\n          rootEl: chartNode,\n          data: layout.data,\n          rootWidth: width,\n          rootHeight: height,\n        }), initialized: true });\n      }\n    }\n  }, [chartRef, chart, width, height, layout]);\n\n  useEffect(() => {\n    if (chart.initialized) {\n      chart.render(highlighted);\n    }\n  }, [chart, highlighted]);\n\n  useEffect(() => {\n    if (chart.initialized && data !== undefined) {\n      chart.update(highlighted, data);\n    }\n  }, [chart, highlighted, data]);\n\n  return (\n    <>\n      <div\n        ref={chartRef}\n        style={{width, height}}\n      />\n    </>\n  );\n};\n\nexport default Chart;\n","import React, {useRef, useEffect, useState} from 'react';\nimport {useWindowWidth} from '../../../contextProviders/appContext';\nimport styled from 'styled-components/macro';\nimport Chart from './chart/miniMap';\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100px;\n  position: relative;\n  background-color: #fff;\n  box-sizing: border-box;\n`;\n\nconst IndustrySpaceContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n`;\n\ninterface Props {\n  highlighted: string | undefined;\n}\n\nconst ClusteredIndustrySpace = (props: Props) => {\n  const {highlighted} = props;\n  const windowDimensions = useWindowWidth();\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const [dimensions, setDimensions] = useState<{width: number, height: number} | undefined>(undefined);\n  const chartKey = dimensions\n    ? 'industry-space-sized-to-container-key' + dimensions.width.toString() + dimensions.height.toString()\n    : 'industry-space-sized-to-container-key-0-0';\n\n  useEffect(() => {\n    const node = rootRef.current;\n    if (node) {\n      setTimeout(() => {\n        const {width, height} = node.getBoundingClientRect();\n        setDimensions({width, height});\n      }, 0);\n    }\n  }, [rootRef, windowDimensions]);\n\n  return (\n    <>\n      <Root ref={rootRef}>\n        <IndustrySpaceContainer>\n          <Chart key={chartKey}\n            width={dimensions ? dimensions.width : 0}\n            height={dimensions ? dimensions.height : 0}\n            highlighted={highlighted}\n          />\n      </IndustrySpaceContainer>\n      </Root>\n    </>\n  );\n};\n\nexport default ClusteredIndustrySpace;\n","import React, {useState, useRef, useEffect} from 'react';\nimport {LoadingOverlay} from '../../../../../components/transitionStateComponents/VizLoadingBlock';\nimport SimpleError from '../../../../../components/transitionStateComponents/SimpleError';\nimport useLayoutData from '../../../../../components/dataViz/industrySpace/chart/useLayoutData';\nimport {\n  useGlobalIndustryMap,\n} from '../../../../../hooks/useGlobalIndustriesData';\nimport useFluent from '../../../../../hooks/useFluent';\nimport styled from 'styled-components/macro';\nimport {\n  lightBorderColor,\n  lightBaseColor,\n  sectorColorMap,\n} from '../../../../../styling/styleUtils';\nimport {rgba} from 'polished';\nimport MiniMap from '../../../../../components/dataViz/industrySpace/MiniMap';\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  display: grid;\n  grid-template-rows: 1fr auto auto;\n  border-left: solid 1px ${lightBorderColor};\n`;\n\nconst Table = styled.div`\n  display: grid;\n  grid-template-columns: auto auto;\n`;\n\nconst Subtitle = styled.div`\n  font-size: 0.75rem;\n  text-transform: uppercase;\n  font-weight: 600;\n  color: ${lightBaseColor};\n`;\n\nconst TableCell = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 0.75rem;\n  padding: 0.5rem 0.35rem;\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst NameCell = styled(TableCell)`\n  border-left: solid 2px ${lightBorderColor};\n  border-right: solid 1px ${lightBorderColor};\n  font-weight: 600;\n`;\n\nconst HeaderCell = styled(Subtitle)`\n  border-top: solid 1px ${lightBorderColor};\n  border-bottom: solid 1px ${lightBorderColor};\n  position: sticky;\n  top: 0;\n  background-color: #fff;\n  padding: 0.35rem;\n`;\n\nconst MiniMapContainer = styled.div`\n  width: 100%;\n  height: auto;\n  box-sizing: border-box;\n  position: sticky;\n  bottom: 0;\n  margin-top: auto;\n  margin-left: -1px;\n  border-top: solid 1px ${lightBorderColor};\n  border-bottom: solid 1px ${lightBorderColor};\n  border-left: solid 1px ${lightBorderColor};\n  background-color: #fff;\n`;\nconst NodeLegenedContainer = styled.div`\n  padding-left: 0.75rem;\n  padding-right: 0.25rem;\n`;\n\ninterface Props {\n  id: string;\n  hovered: string | undefined;\n  setHovered: (value: string | undefined) => void;\n  setHighlighted: (value: string | undefined) => void;\n  children: React.ReactNode;\n}\n\nconst IndustryDistanceTable = (props: Props) => {\n  const {\n    id, hovered, setHovered, setHighlighted, children,\n  } = props;\n\n  const getString = useFluent();\n  const layout = useLayoutData();\n  const {data: industryData} = useGlobalIndustryMap();\n  const titleRef = useRef<HTMLDivElement | null>(null);\n  const [titleHeight, setTitleHeight] = useState<number>(0);\n\n  useEffect(() => {\n    const titleNode = titleRef.current;\n    if (titleNode) {\n      setTitleHeight(titleNode.offsetHeight);\n    }\n  }, [titleRef, id, layout]);\n\n  const clearHovered = () => setHovered(undefined);\n\n  let output: React.ReactElement<any> | null;\n  if (layout.loading) {\n    output = null;\n  } else if (layout.error) {\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(layout.error);\n  } else if (layout.data !== undefined && industryData !== undefined) {\n    const node = layout.data.nodes.find(n => n.id === id);\n    if (node) {\n      const edges = node.edges.map(({trg}) => {\n        const industry = industryData[trg];\n        if (industry) {\n          const parent = industryData[industry.naicsIdTopParent];\n          const parentIndustry = sectorColorMap.find(s => s.id === industry.naicsIdTopParent.toString());\n          const onMouseEnter = () => setHovered(industry.naicsId);\n          const onMouseClick = () => setHighlighted(industry.naicsId);\n          const color = parentIndustry ? parentIndustry.color : lightBorderColor;\n          return (\n            <React.Fragment key={industry.naicsId}>\n              <NameCell\n                style={{\n                  borderLeftColor: color,\n                  backgroundColor: hovered === industry.naicsId ? rgba(color, 0.4) : undefined,\n                }}\n                onMouseEnter={onMouseEnter}\n                onMouseLeave={clearHovered}\n                onClick={onMouseClick}\n              >\n                {industry.name}\n              </NameCell>\n              <TableCell\n                style={{\n                  backgroundColor: hovered === industry.naicsId ? rgba(color, 0.4) : undefined,\n                }}\n                onMouseEnter={onMouseEnter}\n                onMouseLeave={clearHovered}\n                onClick={onMouseClick}\n              >\n                {parent ? parent.name : ''}\n              </TableCell>\n            </React.Fragment>\n          );\n        } else {\n          return null;\n        }\n      });\n      output = (\n        <>\n          <Root>\n            <div>\n              <Table>\n                <HeaderCell style={{top: titleHeight}}>\n                  {getString('global-ui-related-industry')}\n                </HeaderCell>\n                <HeaderCell style={{top: titleHeight}}>\n                  {getString('global-ui-sector')}\n                </HeaderCell>\n                {edges}\n              </Table>\n            </div>\n            <MiniMapContainer>\n              <MiniMap\n                highlighted={id}\n              />\n              <NodeLegenedContainer>\n                {children}\n              </NodeLegenedContainer>\n            </MiniMapContainer>\n          </Root>\n        </>\n      );\n    } else {\n      output = (\n        <LoadingOverlay>\n          <SimpleError />\n        </LoadingOverlay>\n      );\n    }\n  } else {\n    output = null;\n  }\n\n  return (\n    <>\n      {output}\n    </>\n  );\n};\n\nexport default IndustryDistanceTable;\n","import React from 'react';\nimport StandardSideTextBlock from '../../../../../components/general/StandardSideTextBlock';\nimport {\n  ContentParagraph,\n  ContentTitle,\n} from '../../../../../styling/styleUtils';\nimport useFluent, {possessive} from '../../../../../hooks/useFluent';\nimport useCurrentCity from '../../../../../hooks/useCurrentCity';\nimport StandardSideTextLoading from '../../../../../components/transitionStateComponents/StandardSideTextLoading';\nimport {\n  isValidPeerGroup,\n} from '../../../../../types/graphQL/graphQLTypes';\nimport useCurrentBenchmark from '../../../../../hooks/useCurrentBenchmark';\nimport Helmet from 'react-helmet';\n\nconst SideText = ({children}:{children: React.ReactNode}) => {\n  const getString = useFluent();\n  const {loading, city} = useCurrentCity();\n  const { benchmark, benchmarkNameShort } = useCurrentBenchmark();\n  const benchmarkType = isValidPeerGroup(benchmark) ? benchmark : benchmarkNameShort;\n  if (loading) {\n    return <StandardSideTextLoading />;\n  } else if (city) {\n    const cityName = city.name ? city.name : '';\n    const cityNamePlural = possessive([cityName]);\n    const title = getString('industry-space-title', {\n      'name-plural': cityNamePlural,\n    });\n    const para1 = getString('industry-space-para-1', {\n      'name': cityName,\n      'benchmark-type': benchmarkType,\n    });\n    const para2 = getString('industry-space-para-2', {\n      'name': cityName,\n      'name-plural': cityNamePlural,\n    });\n\n    return (\n      <StandardSideTextBlock>\n        <Helmet>\n          <title>{title + ' | ' + getString('meta-data-title-default-suffix')}</title>\n          <meta property='og:title' content={title + ' | ' + getString('meta-data-title-default-suffix')} />\n        </Helmet>\n        <ContentTitle>{title}</ContentTitle>\n        <ContentParagraph>{para1}</ContentParagraph>\n        <ContentParagraph>{para2}</ContentParagraph>\n        {children}\n      </StandardSideTextBlock>\n    );\n  } else {\n    return null;\n  }\n\n};\n\nexport default SideText;\n","import React, {useState} from 'react';\nimport UtilityBar from '../../../../../components/navigation/secondaryHeader/UtilityBar';\nimport ClusteredIndustrySpace from '../../../../../components/dataViz/industrySpace';\nimport {ZoomLevel, NodeAction} from '../../../../../components/dataViz/industrySpace/chart/createChart';\nimport {defaultYear, formatNumberLong} from '../../../../../Utils';\nimport {\n  ContentGrid,\n} from '../../../../../styling/styleUtils';\nimport {\n  defaultCompositionType,\n  DigitLevel,\n} from '../../../../../types/graphQL/graphQLTypes';\nimport CategoryLabels from '../../../../../components/dataViz/legend/CategoryLabels';\nimport IntensityLegend from '../../../../../components/dataViz/legend/IntensityLegend';\nimport EducationLegend from '../../../../../components/dataViz/legend/EducationLegend';\nimport WageLegend from '../../../../../components/dataViz/legend/WageLegend';\nimport NodeLegend from '../../../../../components/dataViz/legend/NodeLegend';\nimport StandardSideTextBlock from '../../../../../components/general/StandardSideTextBlock';\nimport useSectorMap from '../../../../../hooks/useSectorMap';\nimport useFluent from '../../../../../hooks/useFluent';\nimport useQueryParams from '../../../../../hooks/useQueryParams';\nimport {ClusterMode, defaultClusterMode, ColorBy, NodeSizing} from '../../../../../routing/routes';\nimport IndustryDistanceTable from './IndustryDistanceTable';\nimport {\n  useAggregateIndustryMap,\n} from '../../../../../hooks/useAggregateIndustriesData';\nimport useRCAData from '../../../../../components/dataViz/industrySpace/chart/useRCAData';\nimport {extent} from 'd3-array';\nimport SideText from './SideText';\n\ninterface Props {\n  cityId: string;\n}\n\nconst idToKey = (id: string | undefined) => 'industry-space-prechart-row-' + id + new Date();\n\nconst IndustrySpacePosition = (props: Props) => {\n  const { cityId } = props;\n  const [highlighted, setHighlighted] = useState<string | undefined>(undefined);\n  const [hovered, setHovered] = useState<string | undefined>(undefined);\n  const [zoomLevel, setZoomLevel] = useState<ZoomLevel>(ZoomLevel.Cluster1);\n  const [preChartRowKey, setPreChartRowKey] = useState<string>(idToKey(highlighted));\n  const sectorMap = useSectorMap();\n  const {cluster_overlay, node_sizing, color_by, rca_threshold} = useQueryParams();\n  const clusterOverlayMode = cluster_overlay ? cluster_overlay : defaultClusterMode;\n  const rcaThreshold = rca_threshold !== undefined ? parseFloat(rca_threshold) : 1;\n  const getString = useFluent();\n  const aggregateIndustryDataMap = useAggregateIndustryMap({level: DigitLevel.Six, year: defaultYear});\n  const {data: rcaData} = useRCAData(DigitLevel.Six);\n\n  let legend: React.ReactElement<any> | null;\n  if (!(zoomLevel === ZoomLevel.Node\n        || clusterOverlayMode === ClusterMode.none\n        || clusterOverlayMode === ClusterMode.outline\n      )) {\n    legend = (\n      <IntensityLegend />\n    );\n  } else if (color_by === ColorBy.education) {\n    legend = (\n      <EducationLegend />\n    );\n  } else if (color_by === ColorBy.wage) {\n    legend = (\n      <WageLegend />\n    );\n  } else {\n    legend = (\n      <CategoryLabels\n        categories={sectorMap}\n        allowToggle={false}\n        fullWidth={true}\n      />\n    );\n  }\n\n  const nodeSizing = node_sizing ? node_sizing : NodeSizing.rca;\n  let nodeSizingTitle: string | undefined;\n  let nodeSizingMinText: string | undefined;\n  let nodeSizingMaxText: string | undefined;\n  if (aggregateIndustryDataMap.data && !aggregateIndustryDataMap.loading) {\n    if (nodeSizing === NodeSizing.globalCompanies) {\n      nodeSizingTitle = 'Node Size by Global Number of Establishments';\n      nodeSizingMinText = formatNumberLong(aggregateIndustryDataMap.data.globalMinMax.minSumNumCompany);\n      nodeSizingMaxText = formatNumberLong(aggregateIndustryDataMap.data.globalMinMax.maxSumNumCompany);\n    } else if (nodeSizing === NodeSizing.globalEmployees) {\n      nodeSizingTitle = 'Node Size by Global Number of Employees';\n      nodeSizingMinText = formatNumberLong(aggregateIndustryDataMap.data.globalMinMax.minSumNumEmploy);\n      nodeSizingMaxText = formatNumberLong(aggregateIndustryDataMap.data.globalMinMax.maxSumNumEmploy);\n    } if (nodeSizing === NodeSizing.cityCompanies && rcaData) {\n      nodeSizingTitle = 'Node Size by Number of Establishments in City';\n      const [min, max] = extent(rcaData.naicsData.map(d => d.numCompany).filter(d => d !== null) as number []);\n      nodeSizingMinText = formatNumberLong(min ? min : 0);\n      nodeSizingMaxText = formatNumberLong(max ? max : 0);\n    } else if (nodeSizing === NodeSizing.cityEmployees && rcaData) {\n      nodeSizingTitle = 'Node Size by Number of Employees in City';\n      const [min, max] = extent(rcaData.naicsData.map(d => d.numEmploy).filter(d => d !== null) as number []);\n      nodeSizingMinText = formatNumberLong(min ? min : 0);\n      nodeSizingMaxText = formatNumberLong(max ? max : 0);\n    } else if (nodeSizing === NodeSizing.rca && rcaData) {\n      nodeSizingTitle = 'Node Size by Relative Presence';\n      const [min, max] = extent(rcaData.naicsRca.map(d => d.rca).filter(d => d !== null) as number []);\n      nodeSizingMinText = Math.floor(min ? min : 0) + 'x expected presence';\n      nodeSizingMaxText = Math.ceil(max ? max : 0) + 'x expected presence';\n    }\n  }\n\n\n  const onNodeSelect = (id: string | undefined, action: NodeAction) => {\n    setHighlighted(id);\n    if (action === NodeAction.SoftReset || action === NodeAction.Reset) {\n      setPreChartRowKey(curr => idToKey(curr + undefined));\n    } else if (action !== NodeAction.ExternalSelect) {\n      setPreChartRowKey(idToKey(id));\n    }\n  };\n\n  const onTableSelect = (id: string | undefined) => {\n    setHighlighted(id);\n    setPreChartRowKey(idToKey(id));\n  };\n\n  const sideContent = highlighted === undefined ? (\n    <SideText>\n        <NodeLegend\n          sizeBy={nodeSizingMinText && nodeSizingMaxText && nodeSizingTitle ? {\n              title: nodeSizingTitle,\n              minLabel: nodeSizingMinText,\n              maxLabel: nodeSizingMaxText,\n            } : null\n          }\n          colorBy={(zoomLevel === ZoomLevel.Node ||\n                    clusterOverlayMode === ClusterMode.none ||\n                    clusterOverlayMode === ClusterMode.outline\n                  ) && (!color_by || color_by === ColorBy.sector)\n                  && !aggregateIndustryDataMap.loading\n            ? {\n              coloredLabel: getString('global-intensity-high'),\n              greyLabel: getString('global-intensity-low'),\n            } : null\n          }\n        />\n    </SideText>\n  ) : (\n    <StandardSideTextBlock clearStyles={true}>\n      <IndustryDistanceTable\n        id={highlighted}\n        hovered={hovered}\n        setHovered={setHovered}\n        setHighlighted={onTableSelect}\n      >\n        <NodeLegend\n          sizeBy={nodeSizingMinText && nodeSizingMaxText && nodeSizingTitle ? {\n              title: nodeSizingTitle,\n              minLabel: nodeSizingMinText,\n              maxLabel: nodeSizingMaxText,\n            } : null\n          }\n          colorBy={(zoomLevel === ZoomLevel.Node ||\n                    clusterOverlayMode === ClusterMode.none ||\n                    clusterOverlayMode === ClusterMode.outline\n                  ) && (!color_by || color_by === ColorBy.sector)\n                  && !aggregateIndustryDataMap.loading\n            ? {\n              coloredLabel: getString('global-intensity-high'),\n              greyLabel: getString('global-intensity-low'),\n            } : null\n          }\n        />\n      </IndustryDistanceTable>\n    </StandardSideTextBlock>\n  );\n\n  return (\n    <>\n      <ContentGrid>\n        {sideContent}\n        <ClusteredIndustrySpace\n          cityId={parseInt(cityId, 10)}\n          year={defaultYear}\n          compositionType={defaultCompositionType}\n          highlighted={highlighted}\n          setHighlighted={setHighlighted}\n          zoomLevel={zoomLevel}\n          setZoomLevel={setZoomLevel}\n          clusterOverlayMode={clusterOverlayMode}\n          setHovered={setHovered}\n          hovered={hovered}\n          nodeSizing={node_sizing}\n          onNodeSelect={onNodeSelect}\n          preChartRowKey={preChartRowKey}\n          colorBy={color_by ? color_by : ColorBy.sector}\n          rcaThreshold={isNaN(rcaThreshold) ? 1 : rcaThreshold}\n        />\n        {legend}\n      </ContentGrid>\n      <UtilityBar\n      />\n    </>\n  );\n};\n\nexport default IndustrySpacePosition;\n","import React from 'react';\nimport {DefaultContentWrapper} from '../../../../styling/GlobalGrid';\nimport IndustrySpace from './industrySpace';\nimport useCurrentCityId from '../../../../hooks/useCurrentCityId';\nimport SimpleError from '../../../../components/transitionStateComponents/SimpleError';\nimport {LoadingOverlay} from '../../../../components/transitionStateComponents/VizLoadingBlock';\n\nconst IndustrySpacePosition = () => {\n  const cityId = useCurrentCityId();\n\n  if (cityId === null) {\n    return (\n      <DefaultContentWrapper>\n        <LoadingOverlay>\n          <SimpleError fluentMessageId={'global-ui-error-invalid-city'} />\n        </LoadingOverlay>\n      </DefaultContentWrapper>\n    );\n  }\n\n  return (\n    <DefaultContentWrapper>\n      <IndustrySpace\n        cityId={cityId}\n      />\n    </DefaultContentWrapper>\n  );\n};\n\nexport default IndustrySpacePosition;\n","import React, {useState, useEffect, useRef} from 'react';\nimport {\n  CompositionType,\n} from '../../../types/graphQL/graphQLTypes';\nimport SimpleError from '../../transitionStateComponents/SimpleError';\nimport LoadingBlock, {LoadingOverlay} from '../../transitionStateComponents/VizLoadingBlock';\nimport ScrollContainer from 'react-indiana-drag-scroll';\nimport styled from 'styled-components/macro';\nimport TableRow, {RowDatum, highlightedIdName} from './TableRow';\nimport {\n  lightBorderColor,\n  backgroundMedium,\n} from '../../../styling/styleUtils';\nimport raw from 'raw.macro';\nimport orderBy from 'lodash/orderBy';\nimport ColumnFilterBox from './ColumnFilterBox';\nimport TextFilter from './TextFilter';\nimport QuickError from '../../transitionStateComponents/QuickError';\nimport useFluent from '../../../hooks/useFluent';\nimport useRcaAndDensityOptions, {\n  formatNumber,\n} from './useRcaAndDensityOptions';\n\nconst sortArrows = raw('../../../assets/icons/sort-arrows.svg');\n\nconst Root = styled.div`\n  position: relative;\n  height: 100%;\n  width: 100%;\n`;\n\nconst ScrollRoot = styled(ScrollContainer)`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  cursor: move;\n  border: solid 1px ${lightBorderColor};\n`;\n\nconst Table = styled.table`\n  border-collapse: collapse;\n  min-width: 100%;\n`;\n\nconst Th = styled.th`\n  position: sticky;\n  top: 0;\n  z-index: 20;\n  background-color: ${backgroundMedium};\n  font-weight: 600;\n  font-size: 0.8rem;\n  text-transform: uppercase;\n  height: 70px;\n`;\n\nconst NameTh = styled(Th)`\n  left: 0;\n  z-index: 30;\n\n  &:after {\n    content: '';\n    position: absolute;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    border-right: solid 1px ${lightBorderColor};\n    width: 0;\n    display: block;\n  }\n`;\n\nconst CellContent = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nconst SortContent = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0.2rem 0.5rem;\n  cursor: pointer;\n  flex-grow: 1;\n`;\n\nconst FilterContent = styled.div`\n  margin-top: 0.25rem;\n`;\n\nconst activeClassBase = 'active-sort-column-';\n\nenum SortDirection {\n  ascending = 'asc',\n  descending = 'desc',\n}\n\nconst SortArrowsBase = styled.div`\n  width: 0.5rem;\n  height: 0.8rem;\n  flex-shrink: 0;\n  margin-left: 0.5rem;\n\n  svg {\n    width: 100%;\n\n    polygon {\n      fill: #b9b9b9;\n    }\n  }\n\n  &.${activeClassBase + SortDirection.ascending} {\n    svg {\n      polygon.sort-arrow-up {\n        fill: #333;\n      }\n    }\n  }\n\n  &.${activeClassBase + SortDirection.descending} {\n    svg {\n      polygon.sort-arrow-down {\n        fill: #333;\n      }\n    }\n  }\n`;\n\nenum Quadrant {\n  Potential = 'Possible Entrants',\n  Strength = 'Strength',\n  Weakness = 'Weakness',\n  Opportunity = 'Opportunity',\n  Threat = 'Threat',\n}\n\nconst quadrantOptionsArray = [\n  {value: Quadrant.Potential, label: Quadrant.Potential},\n  {value: Quadrant.Strength, label: Quadrant.Strength},\n  {value: Quadrant.Weakness, label: Quadrant.Weakness},\n  {value: Quadrant.Opportunity, label: Quadrant.Opportunity},\n  {value: Quadrant.Threat, label: Quadrant.Threat},\n];\n\nenum SortField {\n  name = 'name',\n  rca = 'rca',\n  density = 'density',\n  quadrant = 'quadrant',\n}\n\nexport const getQuadrant = (rca: number, density: number): Quadrant => {\n  if (rca === 0) {\n    return Quadrant.Potential;\n  } if (rca > 1) {\n    if (density > 0) {\n      return Quadrant.Strength;\n    } else {\n      return Quadrant.Threat;\n    }\n  } else {\n    if (density > 0) {\n      return Quadrant.Opportunity;\n    } else {\n      return Quadrant.Weakness;\n    }\n  }\n};\n\ninterface Props {\n  loading: boolean;\n  error: any | undefined;\n  data: RowDatum[] | undefined;\n  compositionType: CompositionType;\n  highlighted: string | undefined;\n  clearHighlighted: () => void;\n}\n\nconst PSWOTTable = (props: Props) => {\n  const {\n    loading, error, data, highlighted, clearHighlighted,\n  } = props;\n\n  const [sortField, setSortField] = useState<SortField>(SortField.name);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(SortDirection.ascending);\n  const [filterText, setFilterText] = useState<string>('');\n  const [filterdQuadrants, setFilteredQuadrants] = useState<Quadrant[]>([]);\n  const [filterdRCA, setFilteredRCA] = useState<string[]>([]);\n  const [filterdDensity, setFilteredDensity] = useState<string[]>([]);\n  const [highlightError, setHighlightError] = useState<boolean>(false);\n  const getString = useFluent();\n  const {match, rcaOptions, densityOptions} = useRcaAndDensityOptions();\n\n  const toggleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(c => c === SortDirection.ascending ? SortDirection.descending : SortDirection.ascending);\n    } else {\n      setSortField(field);\n    }\n  };\n\n  const rootRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    if (rootRef && rootRef.current && highlighted !== undefined) {\n      const rootNode = rootRef.current;\n      const highlightedElm: HTMLElement | null = rootNode.querySelector(`#${highlightedIdName}`);\n      if (highlightedElm) {\n        highlightedElm.scrollIntoView({behavior: 'smooth', block: 'center'});\n      } else {\n        setHighlightError(true);\n      }\n    } else {\n      setHighlightError(false);\n    }\n  }, [rootRef, highlighted]);\n\n  let output: React.ReactElement<any> | null;\n  if (loading) {\n    output = <LoadingBlock />;\n  } else if (error !== undefined) {\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(error);\n  } else if (data !== undefined) {\n    const rows =\n      orderBy(data, [sortField], [sortDirection])\n        .filter(d => {\n          if (filterdQuadrants.length && !filterdQuadrants.includes(d.quadrant as Quadrant)) {\n            return false;\n          }\n          if (filterText.length && !d.name.toLowerCase().includes(filterText.toLowerCase())) {\n            return false;\n          }\n          if (!match(d.rca, 'rca', filterdRCA)) {\n            return false;\n          }\n          if (!match(d.density, 'density', filterdDensity)) {\n            return false;\n          }\n          return true;\n        })\n        .map(d => {\n          return (\n            <TableRow\n              key={'table-row-' + d.id}\n              id={d.id}\n              name={d.name}\n              density={formatNumber(d.density)}\n              rca={formatNumber(d.rca)}\n              quadrant={d.quadrant}\n              color={d.color}\n              highlighted={highlighted}\n            />\n          );\n        });\n\n    const activeClass = activeClassBase + sortDirection;\n\n    output = (\n      <Table>\n        <thead>\n          <tr>\n            <NameTh>\n              <CellContent>\n                <SortContent\n                  onClick={() => toggleSort(SortField.name)}\n                >\n                  <div>{getString('global-name')}</div>\n                  <SortArrowsBase\n                    className={sortField === SortField.name ? activeClass : undefined}\n                    dangerouslySetInnerHTML={{__html: sortArrows}}\n                  />\n                </SortContent>\n                <FilterContent>\n                  <TextFilter\n                    initialQuery={filterText}\n                    setSearchQuery={setFilterText}\n                    placeholder={getString('global-filter-name')}\n                  />\n                </FilterContent>\n              </CellContent>\n            </NameTh>\n            <Th>\n              <CellContent>\n                <SortContent\n                  onClick={() => toggleSort(SortField.rca)}\n                >\n                  <div>{getString('pswot-axis-labels-bottom')}</div>\n                  <SortArrowsBase\n                    className={sortField === SortField.rca ? activeClass : undefined}\n                    dangerouslySetInnerHTML={{__html: sortArrows}}\n                  />\n                </SortContent>\n                <FilterContent>\n                  <ColumnFilterBox\n                    allOptions={rcaOptions}\n                    selectedOptions={filterdRCA}\n                    setSelectedOptions={setFilteredRCA as any}\n                    title={getString('pswot-axis-labels-bottom')}\n                    multipleAsValuesText={true}\n                  />\n                </FilterContent>\n              </CellContent>\n            </Th>\n            <Th>\n              <CellContent>\n                <SortContent\n                  onClick={() => toggleSort(SortField.density)}\n                >\n                  <div>{getString('pswot-axis-labels-left')}</div>\n                  <SortArrowsBase\n                    className={sortField === SortField.density ? activeClass : undefined}\n                    dangerouslySetInnerHTML={{__html: sortArrows}}\n                  />\n                </SortContent>\n                <FilterContent>\n                  <ColumnFilterBox\n                    allOptions={densityOptions}\n                    selectedOptions={filterdDensity}\n                    setSelectedOptions={setFilteredDensity as any}\n                    title={getString('pswot-axis-labels-left')}\n                    multipleAsValuesText={true}\n                  />\n                </FilterContent>\n              </CellContent>\n            </Th>\n            <Th>\n              <CellContent>\n                <SortContent\n                  onClick={() => toggleSort(SortField.quadrant)}\n                >\n                  <div>{getString('pswot-table-assigned-category')}</div>\n                  <SortArrowsBase\n                    className={sortField === SortField.quadrant ? activeClass : undefined}\n                    dangerouslySetInnerHTML={{__html: sortArrows}}\n                  />\n                </SortContent>\n                <FilterContent>\n                  <ColumnFilterBox\n                    allOptions={quadrantOptionsArray}\n                    selectedOptions={filterdQuadrants}\n                    setSelectedOptions={setFilteredQuadrants as any}\n                    title={getString('pswot-table-categories')}\n                  />\n                </FilterContent>\n              </CellContent>\n            </Th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows}\n        </tbody>\n      </Table>\n    );\n  } else {\n    output = null;\n  }\n\n\n  const highlightErrorPopup = highlightError && highlighted !== undefined ? (\n    <QuickError\n      closeError={clearHighlighted}\n    >\n      {getString('global-ui-error-industry-not-in-data-set')}\n    </QuickError>\n  ) : null;\n\n  return (\n    <Root\n      ref={rootRef as any}\n    >\n      <ScrollRoot\n        hideScrollbars={false}\n        ignoreElements={'input'}\n      >\n        {output}\n      </ScrollRoot>\n      {highlightErrorPopup}\n    </Root>\n  );\n};\n\nexport default PSWOTTable;\n","import React, {useLayoutEffect, useRef} from 'react';\nimport styled from 'styled-components';\nimport { useWindowWidth } from '../../../contextProviders/appContext';\nimport useFluent from '../../../hooks/useFluent';\nimport { baseColor } from '../../../styling/styleUtils';\nimport BenchmarkLegend from '../legend/BenchmarkLegend';\nimport PresenceToggle from '../legend/PresenceToggle';\n\nconst Root = styled.div`\n  position: fixed;\n  z-index: 100;\n  transform: translateX(-50%);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #fff;\n  left: -1000px;\n\n  @media (max-width: 943px) {\n    position: static;\n    margin-top: -2rem;\n    margin-left: 120px;\n    transform: none;\n  }\n`;\n\nconst BottomAxisRoot = styled.div`\n  white-space: nowrap;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  pointer-events: none;\n  padding-left: 0;\n`;\n\nconst BenchmarkRoot = styled(BottomAxisRoot)`\n  grid-row: 3;\n  justify-content: center;\n  white-space: normal;\n`;\n\nconst AxisLabelBase = styled.div`\n  font-weight: 600;\n  font-size: 0.75rem;\n  color: ${baseColor};\n  text-transform: uppercase;\n\n  @media (max-width: 1000px) {\n    font-size: 0.6rem;\n  }\n\n  @media (max-height: 600px) {\n    font-size: 0.65rem;\n  }\n`;\n\nconst AxisLabelLeft = styled(AxisLabelBase)`\n  margin-right: 1rem;\n  font-weight: 400;\n\n  @media (max-width: 990px) {\n    margin-right: 0.75rem;\n  }\n\n  @media (max-width: 920px) {\n    display: none;\n  }\n`;\n\nconst AxisLabelRight = styled(AxisLabelBase)`\n  margin-left: 1rem;\n  font-weight: 400;\n\n  @media (max-width: 990px) {\n    margin-left: 0.75rem;\n  }\n\n  @media (max-width: 920px) {\n    display: none;\n  }\n`;\n\nconst BenchmarkAxisLegend = () => {\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const windowDimensions = useWindowWidth();\n  const getString = useFluent();\n  useLayoutEffect(() => {\n    const setAxisPosition = (attempts: number) => {\n      setTimeout(() => {\n        const bottomLabelNode: SVGTSpanElement | null = document.querySelector('.pswot-plot-bottom-label');\n        const rootNode = rootRef.current;\n        if (bottomLabelNode && rootNode) {\n          const { top, left } = bottomLabelNode.getBoundingClientRect();\n          bottomLabelNode.style.opacity = '0';\n          rootNode.style.left = left + 'px';\n          rootNode.style.top = top + 'px';\n          if (window.innerWidth <= 943) {\n            rootNode.style.right = '0px';\n          }\n        } else {\n          if (attempts < 10) {\n            setAxisPosition(attempts++);\n          }\n        }\n      }, 0);\n    };\n    setAxisPosition(1);\n  }, [rootRef, windowDimensions]);\n\n  return (\n    <Root ref={rootRef}>\n      <BottomAxisRoot>\n        <AxisLabelLeft>{getString('pswot-axis-labels-bottom-left')}</AxisLabelLeft>\n        <AxisLabelBase>\n          <PresenceToggle\n            showArrows={true}\n          />\n        </AxisLabelBase>\n        <AxisLabelRight>{getString('pswot-axis-labels-bottom-right')}</AxisLabelRight>\n      </BottomAxisRoot>\n      <BenchmarkRoot>\n        <BenchmarkLegend />\n      </BenchmarkRoot>\n    </Root>\n  );\n};\n\nexport default BenchmarkAxisLegend;\n","import React, {useState, useRef, useEffect, useCallback} from 'react';\nimport {\n  ClassificationNaicsIndustry,\n  DigitLevel,\n  CompositionType,\n  defaultCompositionType,\n} from '../../../types/graphQL/graphQLTypes';\nimport {\n  useGlobalIndustryMap,\n} from '../../../hooks/useGlobalIndustriesData';\nimport {\n  useAggregateIndustryMap,\n} from '../../../hooks/useAggregateIndustriesData';\nimport {\n  usePrevious,\n} from 'react-use';\nimport {useWindowWidth} from '../../../contextProviders/appContext';\nimport {breakPoints} from '../../../styling/GlobalGrid';\nimport ErrorBoundary from '../ErrorBoundary';\nimport styled from 'styled-components/macro';\nimport {\n  sectorColorMap,\n  educationColorRange,\n  wageColorRange,\n  primaryColorDark,\n} from '../../../styling/styleUtils';\nimport SimpleError from '../../transitionStateComponents/SimpleError';\nimport LoadingBlock, {LoadingOverlay} from '../../transitionStateComponents/VizLoadingBlock';\nimport PSwotPlot, {\n  Datum,\n} from 'react-pswot-plot';\nimport useRCAData, {\n  SuccessResponse,\n} from '../../../hooks/useRCAData';\nimport useFluent from '../../../hooks/useFluent';\nimport {NodeSizing, ColorBy} from '../../../routing/routes';\nimport {getStandardTooltip, RapidTooltipRoot} from '../../../utilities/rapidTooltip';\nimport {rgba} from 'polished';\nimport {defaultYear} from '../../../Utils';\nimport {scaleLinear} from 'd3-scale';\nimport orderBy from 'lodash/orderBy';\nimport QuickError from '../../transitionStateComponents/QuickError';\nimport BenchmarkAxisLegend from './BenchmarkAxisLegend';\n\nconst benchmarkLegendBuffer = 35;\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  grid-column: 1;\n  grid-row: 2;\n  position: relative;\n\n  @media ${breakPoints.small} {\n    grid-row: 3;\n    grid-column: 1;\n  }\n`;\n\nconst SizingContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\n\nconst VizContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n\n  .cluster-bar-chart-y-axis-label {\n    text-transform: uppercase;\n    font-size: 0.75rem;\n  }\n`;\n\ninterface Props {\n  highlighted: string | null;\n  setHighlighted: (value: string | undefined) => void;\n  digitLevel: DigitLevel;\n  nodeSizing: NodeSizing;\n  hiddenSectors: ClassificationNaicsIndustry['id'][];\n  colorBy: ColorBy;\n  compositionType: CompositionType;\n}\n\nconst PSWOTChart = (props: Props) => {\n  const {\n    hiddenSectors, setHighlighted, digitLevel,\n    highlighted, nodeSizing, colorBy, compositionType,\n  } = props;\n\n  const {loading, error, data} = useRCAData(digitLevel);\n  const aggregateIndustryDataMap = useAggregateIndustryMap({level: digitLevel, year: defaultYear});\n  const windowDimensions = useWindowWidth();\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const [dimensions, setDimensions] = useState<{width: number, height: number} | undefined>(undefined);\n  const getString = useFluent();\n\n  useEffect(() => {\n    const node = rootRef.current;\n    if (node) {\n      const {width, height} = node.getBoundingClientRect();\n      setDimensions({width, height});\n    }\n  }, [rootRef, windowDimensions]);\n\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\n  const industries = useGlobalIndustryMap();\n\n  const highlightIndustry = highlighted ? industries.data[highlighted] : undefined;\n\n  const setHovered = (datum: {label: string, fill?: string, id?: string, x?: number, y?: number}, coords: {x: number, y: number}) => {\n    const node = tooltipRef.current;\n    const industry = industries && industries.data && datum.id ? industries.data[datum.id] : undefined;\n    if (node) {\n      const rows: string[][] = [];\n      let simple = false;\n      if (industry && industry.code) {\n        rows.push(\n          ['NAICS Code', industry.code],\n        );\n        if (datum.x !== undefined) {\n          rows.push(\n            ['Relative Presence', parseFloat(datum.x.toFixed(3)).toString() ],\n          );\n        }\n        if (datum.y) {\n          rows.push(\n            ['Technological Fit', parseFloat(datum.y.toFixed(3)).toString() ],\n          );\n        }\n        if ((colorBy === ColorBy.education|| colorBy === ColorBy.wage)\n              && aggregateIndustryDataMap.data) {\n          const target = aggregateIndustryDataMap.data.industries[industry.naicsId];\n          const targetValue = colorBy === ColorBy.education\n            ? target.yearsEducation : target.hourlyWage;\n          rows.push([\n            getString('global-formatted-color-by', {type: colorBy}),\n            (colorBy === ColorBy.wage ? '$' : '') + targetValue.toFixed(2),\n          ]);\n        }\n      } else if (datum.id) {\n        if (!datum.id.includes('axis')) {\n          rows.push(\n            [getString('pswot-quadrant-tooltips-' + datum.id.toLowerCase())],\n          );\n        } else {\n          simple = true;\n        }\n      }\n      const title = simple ? `\n        <span style=\"font-weight:400;\">${getString(datum.id + '-about')}</span>\n      ` : datum.label;\n      node.innerHTML = getStandardTooltip({\n        title,\n        color: datum.fill ? rgba(datum.fill, 0.5) : rgba('#f69c7c', 0.5),\n        rows,\n        boldColumns: [1],\n        simple,\n      });\n      node.style.top = coords.y + 'px';\n      node.style.left = coords.x + 'px';\n      node.style.display = 'block';\n    }\n  };\n\n  const removeHovered = useCallback(() => {\n    const node = tooltipRef.current;\n    if (node) {\n      node.style.display = 'none';\n    }\n  }, [tooltipRef]);\n\n  useEffect(() => {\n    removeHovered();\n  }, [data, removeHovered]);\n\n\n  const prevData = usePrevious(data);\n  let dataToUse: SuccessResponse | undefined;\n  if (data) {\n    dataToUse = data;\n  } else if (prevData) {\n    dataToUse = prevData;\n  } else {\n    dataToUse = undefined;\n  }\n\n  let output: React.ReactElement<any> | null;\n  if (industries.loading || aggregateIndustryDataMap.loading ||\n      !dimensions || (loading && prevData === undefined)) {\n    output = <LoadingBlock />;\n  } else if (error !== undefined) {\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(error);\n  } else if (industries.error !== undefined) {\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(error);\n  } else if (aggregateIndustryDataMap.error !== undefined) {\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(error);\n  } else if (dataToUse !== undefined &&\n      aggregateIndustryDataMap && aggregateIndustryDataMap.data &&\n      industries && industries.data\n    ) {\n    const {naicsRca, naicsDensity, naicsData} = dataToUse;\n\n    const pswotChartData: Datum[] = [];\n    const {globalMinMax} = aggregateIndustryDataMap.data;\n    let radiusScale: (value: number) => number | undefined;\n    if (nodeSizing === NodeSizing.cityCompanies || nodeSizing === NodeSizing.cityEmployees) {\n      const field = nodeSizing === NodeSizing.cityEmployees ? 'numEmploy' : 'numCompany';\n      const allValues = naicsData.map(c => c[field] ? c[field] : 0) as number[];\n      radiusScale = scaleLinear()\n        .domain([0, Math.max(...allValues)] as [number, number])\n        .range([ 4, 16 ]);\n    } else if (nodeSizing === NodeSizing.globalCompanies) {\n      const minSizeBy = globalMinMax && globalMinMax.minSumNumCompany\n            ? globalMinMax.minSumNumCompany : 0;\n      const maxSizeBy = globalMinMax && globalMinMax.maxSumNumCompany\n            ? globalMinMax.maxSumNumCompany : 1;\n      radiusScale = scaleLinear()\n        .domain([minSizeBy, maxSizeBy])\n        .range([ 4, 16 ]);\n    } else if (nodeSizing === NodeSizing.globalEmployees) {\n      const minSizeBy = globalMinMax && globalMinMax.minSumNumEmploy\n            ? globalMinMax.minSumNumEmploy : 0;\n      const maxSizeBy = globalMinMax && globalMinMax.maxSumNumEmploy\n            ? globalMinMax.maxSumNumEmploy : 1;\n      radiusScale = scaleLinear()\n        .domain([minSizeBy, maxSizeBy])\n        .range([ 4, 16 ]);\n    } else {\n      radiusScale = (_unused: number) => 5.5;\n    }\n    let colorScale: (value: number) => string | undefined;\n    if (colorBy === ColorBy.education) {\n      const {minYearsEducation, medianYearsEducation, maxYearsEducation} = globalMinMax;\n      colorScale = scaleLinear()\n        .domain([minYearsEducation, medianYearsEducation, maxYearsEducation])\n        .range(educationColorRange as any) as any;\n    } else if (colorBy === ColorBy.wage) {\n      const {minHourlyWage, medianHourlyWage, maxHourlyWage} = globalMinMax;\n      colorScale = scaleLinear()\n        .domain([minHourlyWage, medianHourlyWage, maxHourlyWage])\n        .range(wageColorRange as any) as any;\n    } else {\n      colorScale = () => undefined;\n    }\n\n    const highlightError = Boolean(\n      highlighted &&\n      (!naicsRca.find(d => d.naicsId !== null && d.naicsId.toString() === highlighted.toString()) ||\n      (industries.data[highlighted] && !industries.data[highlighted].tradable)),\n    );\n\n    naicsRca.forEach(n => {\n      const industry = n.naicsId ? industries.data[n.naicsId] : undefined;\n      const industryGlobalData = n.naicsId ? aggregateIndustryDataMap.data.industries[n.naicsId] : undefined;\n      const naicsId = industry ? industry.naicsId : '';\n      const tradable = industry && industry.tradable ? true : false;\n      const sector = sectorColorMap.find(c => industry && c.id === industry.naicsIdTopParent.toString());\n      const datum = naicsDensity.find(nn => n.naicsId !== null && nn.naicsId.toString() === n.naicsId.toString());\n      if (sector && datum && !hiddenSectors.includes(sector.id) && tradable && n.comparableIndustry) {\n        const x = n.rca !== null ? n.rca : 0;\n        let densityKey: 'densityCompany' | 'densityEmploy';\n        if (compositionType === CompositionType.Companies ||\n            (!compositionType && defaultCompositionType === CompositionType.Companies)) {\n          densityKey = 'densityCompany';\n        } else {\n          densityKey = 'densityEmploy';\n        }\n        const y = datum[densityKey] !== null ? datum[densityKey] as number : 0;\n\n        let radius: number;\n        if (nodeSizing === NodeSizing.cityCompanies || nodeSizing === NodeSizing.cityEmployees) {\n          const field = nodeSizing === NodeSizing.cityEmployees ? 'numEmploy' : 'numCompany';\n          const naicsDatum = naicsData.find(nn => nn.naicsId === naicsId);\n          radius = radiusScale(naicsDatum && naicsDatum[field] !== null ? naicsDatum[field] as number : 0) as number;\n        } else if (nodeSizing === NodeSizing.globalCompanies) {\n          radius = radiusScale(industryGlobalData && industryGlobalData.sumNumCompany\n              ? industryGlobalData.sumNumCompany : 0) as number;\n        } else if (nodeSizing === NodeSizing.globalEmployees) {\n          radius = radiusScale(industryGlobalData && industryGlobalData.sumNumEmploy\n              ? industryGlobalData.sumNumEmploy : 0) as number;\n        } else {\n          radius = 5.5;\n        }\n\n        let fill: string | undefined;\n        if (colorBy === ColorBy.education) {\n          fill = colorScale(industryGlobalData ? industryGlobalData.yearsEducationRank : 0);\n        } else if (colorBy === ColorBy.wage) {\n          fill = colorScale(industryGlobalData ? industryGlobalData.hourlyWageRank : 0);\n        } else {\n          fill = sector ? rgba(sector.color, 0.7) : undefined;\n        }\n        pswotChartData.push({\n          id: naicsId,\n          label: industry && industry.name ? industry.name : naicsId,\n          x,\n          y,\n          radius,\n          fill,\n          highlighted: highlightIndustry && highlightIndustry.naicsId === naicsId,\n          faded: !highlightError && highlightIndustry && highlightIndustry.naicsId !== naicsId,\n          onMouseMove: setHovered,\n          onMouseLeave: removeHovered,\n        });\n      }\n    });\n\n    const sortedData = orderBy(pswotChartData, ['radius'], ['desc']);\n\n    const loadingOverlay = loading ? <LoadingBlock /> : null;\n\n    const highlightErrorPopup = highlightError ? (\n      <QuickError\n        closeError={() => setHighlighted(undefined)}\n      >\n        {getString('global-ui-error-industry-not-in-data-set')}\n      </QuickError>\n    ) : null;\n\n    output = (\n      <VizContainer style={{ height: dimensions.height - benchmarkLegendBuffer}}>\n        <ErrorBoundary>\n          <PSwotPlot\n            id={'react-pswot-plot-demo'}\n            data={sortedData}\n            chartTitle={'SWOT Scatterplot also showing Possible Entrants'}\n            averageLineText={getString('pswot-average-line-text')}\n            quadrantLabels={{\n              I: getString('pswot-quadrant-labels-i'),\n              II: getString('pswot-quadrant-labels-ii'),\n              III: getString('pswot-quadrant-labels-iii'),\n              IV: getString('pswot-quadrant-labels-iv'),\n              V: 'Possible\\nEntrants',\n            }}\n            quadrantBackgroundColors={{\n              I: '#dadbdd',\n              II: '#e6e7e8',\n              III: '#f2f3f3',\n              IV: '#fafafb',\n              V: '#edf6f4',\n            }}\n            zeroAxisLabel={getString('pswot-zero-axis-label')}\n            yLineText={getString('pswot-y-average-line-text')}\n            axisLabels={{\n              left: getString('pswot-axis-labels-left'),\n              leftUp: dimensions.height > 500 ? getString('pswot-axis-labels-left-up') : '',\n              leftDown: dimensions.height > 500 ? getString('pswot-axis-labels-left-down') : '',\n              bottom: '-',\n            }}\n            axisLabelColor={'#333'}\n            quadrantLabelColor={primaryColorDark}\n            onQuadrantLabelMouseMove={setHovered}\n            onQuadrantLabelMouseLeave={removeHovered}\n          />\n        </ErrorBoundary>\n        <BenchmarkAxisLegend />\n        {loadingOverlay}\n        {highlightErrorPopup}\n      </VizContainer>\n    );\n  } else {\n    output = null;\n  }\n  return (\n    <>\n      <Root>\n        <SizingContainer ref={rootRef}>\n          {output}\n        </SizingContainer>\n      </Root>\n      <RapidTooltipRoot ref={tooltipRef} />\n    </>\n  );\n};\n\nexport default PSWOTChart;","import React, {useState, useRef, useEffect, useCallback} from 'react';\nimport {\n  ClassificationNaicsCluster,\n  ClusterLevel,\n  DigitLevel,\n  CompositionType,\n  defaultCompositionType,\n} from '../../../types/graphQL/graphQLTypes';\nimport {\n  useGlobalClusterMap,\n} from '../../../hooks/useGlobalClusterData';\nimport {\n  useAggregateIndustryMap,\n} from '../../../hooks/useAggregateIndustriesData';\nimport {\n  usePrevious,\n} from 'react-use';\nimport {useWindowWidth} from '../../../contextProviders/appContext';\nimport {breakPoints} from '../../../styling/GlobalGrid';\nimport ErrorBoundary from '../ErrorBoundary';\nimport styled from 'styled-components/macro';\nimport {\n  clusterColorMap,\n  educationColorRange,\n  wageColorRange,\n  primaryColorDark,\n} from '../../../styling/styleUtils';\nimport SimpleError from '../../transitionStateComponents/SimpleError';\nimport LoadingBlock, {LoadingOverlay} from '../../transitionStateComponents/VizLoadingBlock';\nimport PSwotPlot, {\n  Datum,\n} from 'react-pswot-plot';\nimport useClusterRCAData, {\n  SuccessResponse,\n} from '../../../hooks/useClusterRCAData';\nimport useFluent from '../../../hooks/useFluent';\nimport {NodeSizing, ColorBy} from '../../../routing/routes';\nimport {getStandardTooltip, RapidTooltipRoot} from '../../../utilities/rapidTooltip';\nimport {rgba} from 'polished';\nimport {defaultYear} from '../../../Utils';\nimport {scaleLinear} from 'd3-scale';\nimport orderBy from 'lodash/orderBy';\nimport QuickError from '../../transitionStateComponents/QuickError';\nimport BenchmarkAxisLegend from './BenchmarkAxisLegend';\n\nconst benchmarkLegendBuffer = 35;\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  grid-column: 1;\n  grid-row: 2;\n  position: relative;\n\n  @media ${breakPoints.small} {\n    grid-row: 3;\n    grid-column: 1;\n  }\n`;\n\nconst SizingContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\n\nconst VizContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n\n  .cluster-bar-chart-y-axis-label {\n    text-transform: uppercase;\n    font-size: 0.75rem;\n  }\n`;\n\ninterface Props {\n  highlighted: string | null;\n  setHighlighted: (value: string | undefined) => void;\n  clusterLevel: ClusterLevel;\n  nodeSizing: NodeSizing;\n  hiddenClusters: ClassificationNaicsCluster['id'][];\n  colorBy: ColorBy;\n  compositionType: CompositionType;\n}\n\nconst PSWOTChart = (props: Props) => {\n  const {\n    hiddenClusters, setHighlighted, clusterLevel,\n    highlighted, colorBy, compositionType, nodeSizing,\n  } = props;\n\n  const {loading, error, data} = useClusterRCAData(clusterLevel);\n  const aggregateIndustryDataMap = useAggregateIndustryMap({level: DigitLevel.Sector, year: defaultYear, clusterLevel});\n  const windowDimensions = useWindowWidth();\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const [dimensions, setDimensions] = useState<{width: number, height: number} | undefined>(undefined);\n  const getString = useFluent();\n\n  useEffect(() => {\n    const node = rootRef.current;\n    if (node) {\n      const {width, height} = node.getBoundingClientRect();\n      setDimensions({width, height});\n    }\n  }, [rootRef, windowDimensions]);\n\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\n  const clusters = useGlobalClusterMap();\n\n  const highlightCluster = highlighted ? clusters.data[highlighted] : undefined;\n\n  const setHovered = (datum: {label: string, fill?: string, id?: string, x?: number, y?: number}, coords: {x: number, y: number}) => {\n    const node = tooltipRef.current;\n    const cluster = clusters && clusters.data && datum.id ? clusters.data[datum.id] : undefined;\n    if (node) {\n      const rows: string[][] = [];\n      let simple = false;\n      if (datum.x !== undefined) {\n        rows.push(\n          ['Relative Presence', parseFloat(datum.x.toFixed(3)).toString() ],\n        );\n      }\n      if (datum.y) {\n        rows.push(\n          ['Technological Fit', parseFloat(datum.y.toFixed(3)).toString() ],\n        );\n      }\n      if (datum.id && (!cluster || cluster.clusterId === null || cluster.clusterId === undefined)) {\n        if (!datum.id.includes('axis')) {\n          rows.push(\n            [getString('pswot-cluster-quadrant-tooltips-' + datum.id.toLowerCase())],\n          );\n        } else {\n          simple = true;\n        }\n      } else if (cluster && cluster.clusterId) {\n        if ((colorBy === ColorBy.education|| colorBy === ColorBy.wage)\n              && aggregateIndustryDataMap.data) {\n          const target = aggregateIndustryDataMap.data.clusters[cluster.clusterId];\n          const targetValue = colorBy === ColorBy.education\n            ? target.yearsEducation : target.hourlyWage;\n          rows.push([\n            getString('global-formatted-color-by', {type: colorBy}),\n            (colorBy === ColorBy.wage ? '$' : '') + targetValue.toFixed(2),\n          ]);\n        }\n      }\n      const title = simple ? `\n        <span style=\"font-weight:400;\">${getString(datum.id + '-about')}</span>\n      ` : datum.label;\n      node.innerHTML = getStandardTooltip({\n        title,\n        color: datum.fill ? rgba(datum.fill, 0.5) : '#f69c7c',\n        rows,\n        boldColumns: [1],\n        simple,\n      });\n      node.style.top = coords.y + 'px';\n      node.style.left = coords.x + 'px';\n      node.style.display = 'block';\n    }\n  };\n\n  const removeHovered = useCallback(() => {\n    const node = tooltipRef.current;\n    if (node) {\n      node.style.display = 'none';\n    }\n  }, [tooltipRef]);\n\n  useEffect(() => {\n    removeHovered();\n  }, [data, removeHovered]);\n\n\n  const prevData = usePrevious(data);\n  let dataToUse: SuccessResponse | undefined;\n  if (data) {\n    dataToUse = data;\n  } else if (prevData) {\n    dataToUse = prevData;\n  } else {\n    dataToUse = undefined;\n  }\n\n  let output: React.ReactElement<any> | null;\n  if (clusters.loading || aggregateIndustryDataMap.loading ||\n      !dimensions || (loading && prevData === undefined)) {\n    output = <LoadingBlock />;\n  } else if (error !== undefined) {\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(error);\n  } else if (clusters.error !== undefined) {\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(error);\n  } else if (aggregateIndustryDataMap.error !== undefined) {\n    output = (\n      <LoadingOverlay>\n        <SimpleError />\n      </LoadingOverlay>\n    );\n    console.error(error);\n  } else if (dataToUse !== undefined &&\n      aggregateIndustryDataMap && aggregateIndustryDataMap.data &&\n      clusters && clusters.data\n    ) {\n    const {clusterRca, clusterDensity, clusterData} = dataToUse;\n\n    const pswotChartData: Datum[] = [];\n    const {clusterMinMax} = aggregateIndustryDataMap.data;\n\n    let radiusScale: (value: number) => number | undefined;\n    if (nodeSizing === NodeSizing.cityCompanies || nodeSizing === NodeSizing.cityEmployees) {\n      const field = nodeSizing === NodeSizing.cityEmployees ? 'numEmploy' : 'numCompany';\n      const allValues = clusterData.filter(c => c.level === clusterLevel).map(c => c[field] ? c[field] : 0) as number[];\n      radiusScale = scaleLinear()\n        .domain([0, Math.max(...allValues)] as [number, number])\n        .range([ 4, 16 ]);\n    } else if (nodeSizing === NodeSizing.globalCompanies) {\n      const minSizeBy = clusterMinMax && clusterMinMax.minSumNumCompany\n            ? clusterMinMax.minSumNumCompany : 0;\n      const maxSizeBy = clusterMinMax && clusterMinMax.maxSumNumCompany\n            ? clusterMinMax.maxSumNumCompany : 1;\n      radiusScale = scaleLinear()\n        .domain([minSizeBy, maxSizeBy])\n        .range([ 4, 16 ]);\n    } else if (nodeSizing === NodeSizing.globalEmployees) {\n      const minSizeBy = clusterMinMax && clusterMinMax.minSumNumEmploy\n            ? clusterMinMax.minSumNumEmploy : 0;\n      const maxSizeBy = clusterMinMax && clusterMinMax.maxSumNumEmploy\n            ? clusterMinMax.maxSumNumEmploy : 1;\n      radiusScale = scaleLinear()\n        .domain([minSizeBy, maxSizeBy])\n        .range([ 4, 16 ]);\n    } else {\n      radiusScale = (_unused: number) => 5.5;\n    }\n\n    let colorScale: (value: number) => string | undefined;\n    if (colorBy === ColorBy.education) {\n      const {minYearsEducation, medianYearsEducation, maxYearsEducation} = clusterMinMax;\n      colorScale = scaleLinear()\n        .domain([minYearsEducation, medianYearsEducation, maxYearsEducation])\n        .range(educationColorRange as any) as any;\n    } else if (colorBy === ColorBy.wage) {\n      const {minHourlyWage, medianHourlyWage, maxHourlyWage} = clusterMinMax;\n      colorScale = scaleLinear()\n        .domain([minHourlyWage, medianHourlyWage, maxHourlyWage])\n        .range(wageColorRange as any) as any;\n    } else {\n      colorScale = () => undefined;\n    }\n\n    const highlightError = Boolean(\n      highlighted &&\n      (!clusterRca.find(d => d.clusterId !== null && d.clusterId.toString() === highlighted.toString()) ||\n      (clusters.data[highlighted] && !clusters.data[highlighted].tradable)),\n    );\n\n    clusterRca.forEach(n => {\n      const cluster = n.clusterId ? clusters.data[n.clusterId] : undefined;\n      const clusterGlobalData = n.clusterId ? aggregateIndustryDataMap.data.clusters[n.clusterId] : undefined;\n      const clusterId = cluster ? cluster.clusterId : '';\n      const tradable = cluster && cluster.tradable ? true : false;\n      const clusterColor = clusterColorMap.find(c => cluster && cluster.clusterIdTopParent &&\n        c.id === cluster.clusterIdTopParent.toString());\n      const datum = clusterDensity.find(nn => n.clusterId !== null && nn.clusterId.toString() === n.clusterId.toString());\n      if (clusterColor && datum && !hiddenClusters.includes(clusterColor.id) && tradable && n.comparableIndustry) {\n        const x = n.rca !== null ? n.rca : 0;\n        let densityKey: 'densityCompany' | 'densityEmploy';\n        if (compositionType === CompositionType.Companies ||\n            (!compositionType && defaultCompositionType === CompositionType.Companies)) {\n          densityKey = 'densityCompany';\n        } else {\n          densityKey = 'densityEmploy';\n        }\n        const y = datum[densityKey] !== null ? datum[densityKey] as number : 0;\n\n        let radius: number;\n        if (nodeSizing === NodeSizing.cityCompanies || nodeSizing === NodeSizing.cityEmployees) {\n          const field = nodeSizing === NodeSizing.cityEmployees ? 'numEmploy' : 'numCompany';\n          const naicsDatum = clusterData.find(nn => nn.clusterId === clusterId);\n          radius = radiusScale(naicsDatum && naicsDatum[field] !== null ? naicsDatum[field] as number : 0) as number;\n        } else if (nodeSizing === NodeSizing.globalCompanies) {\n          radius = radiusScale(clusterGlobalData && clusterGlobalData.sumNumCompany\n              ? clusterGlobalData.sumNumCompany : 0) as number;\n        } else if (nodeSizing === NodeSizing.globalEmployees) {\n          radius = radiusScale(clusterGlobalData && clusterGlobalData.sumNumEmploy\n              ? clusterGlobalData.sumNumEmploy : 0) as number;\n        } else {\n          radius = 5.5;\n        }\n\n        let fill: string | undefined;\n        if (colorBy === ColorBy.education) {\n          fill = colorScale(clusterGlobalData ? clusterGlobalData.yearsEducationRank : 0);\n        } else if (colorBy === ColorBy.wage) {\n          fill = colorScale(clusterGlobalData ? clusterGlobalData.hourlyWageRank : 0);\n        } else {\n          fill = clusterColor ? rgba(clusterColor.color, 0.7) : undefined;\n        }\n        pswotChartData.push({\n          id: clusterId,\n          label: cluster && cluster.name ? cluster.name : clusterId,\n          x,\n          y,\n          radius,\n          fill,\n          highlighted: highlightCluster && highlightCluster.clusterId === clusterId,\n          faded: !highlightError && highlightCluster && highlightCluster.clusterId !== clusterId,\n          onMouseMove: setHovered,\n          onMouseLeave: removeHovered,\n        });\n      }\n    });\n\n    const sortedData = orderBy(pswotChartData, ['radius'], ['desc']);\n\n    const loadingOverlay = loading ? <LoadingBlock /> : null;\n\n    const highlightErrorPopup = highlightError ? (\n      <QuickError\n        closeError={() => setHighlighted(undefined)}\n      >\n        {getString('global-ui-error-industry-not-in-data-set')}\n      </QuickError>\n    ) : null;\n\n    output = (\n      <VizContainer style={{ height: dimensions.height - benchmarkLegendBuffer }}>\n        <ErrorBoundary>\n          <PSwotPlot\n            id={'react-pswot-plot-demo'}\n            data={sortedData}\n            chartTitle={'SWOT Scatterplot also showing Possible Entrants'}\n            averageLineText={getString('pswot-average-line-text')}\n            quadrantLabels={{\n              I: getString('pswot-quadrant-labels-i'),\n              II: getString('pswot-quadrant-labels-ii'),\n              III: getString('pswot-quadrant-labels-iii'),\n              IV: getString('pswot-quadrant-labels-iv'),\n              V: 'Possible\\nEntrants',\n            }}\n            quadrantBackgroundColors={{\n              I: '#dadbdd',\n              II: '#e6e7e8',\n              III: '#f2f3f3',\n              IV: '#fafafb',\n              V: '#edf6f4',\n            }}\n            zeroAxisLabel={getString('pswot-zero-axis-label')}\n            yLineText={getString('pswot-y-average-line-text')}\n            axisLabels={{\n              left: getString('pswot-axis-labels-left'),\n              leftUp: dimensions.height > 400 ? getString('pswot-axis-labels-left-up') : '',\n              leftDown: dimensions.height > 400 ? getString('pswot-axis-labels-left-down') : '',\n              bottom: '-',\n            }}\n            axisLabelColor={'#333'}\n            quadrantLabelColor={primaryColorDark}\n            onQuadrantLabelMouseMove={setHovered}\n            onQuadrantLabelMouseLeave={removeHovered}\n          />\n        </ErrorBoundary>\n        <BenchmarkAxisLegend />\n        {loadingOverlay}\n        {highlightErrorPopup}\n      </VizContainer>\n    );\n  } else {\n    output = null;\n  }\n  return (\n    <>\n      <Root>\n        <SizingContainer ref={rootRef}>\n          {output}\n        </SizingContainer>\n      </Root>\n      <RapidTooltipRoot ref={tooltipRef} />\n    </>\n  );\n};\n\nexport default PSWOTChart;","import React, {useState} from 'react';\nimport styled from 'styled-components/macro';\nimport {\n  lightBorderColor,\n  primaryColorLight,\n} from '../../../styling/styleUtils';\n\nexport const highlightedIdName = 'react-comparison-bar-chart-highlighted-item';\n\nconst hoverBackgroundColor = '#efefef';\n\nconst Tr = styled.tr`\n  height: initial;\n\n  &:hover {\n    background-color: ${hoverBackgroundColor};\n  }\n`;\n\nconst Td = styled.td`\n  padding: 0.5rem;\n  vertical-align: middle;\n  font-size: 0.8rem;\n\n  &:before {\n    content: '';\n    position: absolute;\n    right: 0;\n    left: 0;\n    bottom: 0;\n    border-bottom: solid 1px ${lightBorderColor};\n    width: 100%;\n    display: block;\n  }\n`;\n\nconst NameTd = styled(Td)`\n  position: sticky;\n  left: 0;\n  z-index: 10;\n  background-color: #fff;\n\n  &:after {\n    content: '';\n    position: absolute;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    border-right: solid 1px ${lightBorderColor};\n    width: 0;\n    display: block;\n  }\n`;\n\nconst NameContent = styled.div`\n  display: flex;\n`;\n\nconst ContentTd = styled(Td)`\n  text-align: center;\n  position: relative;\n`;\n\nconst ColorBar = styled.div`\n  flex-shrink: 0;\n  width: 0.4rem;\n  margin: -0.2rem 0.75rem -0.2rem 0;\n`;\n\nexport interface RowDatum {\n  id: string;\n  name: string;\n  rca: number;\n  density: number;\n  quadrant: string;\n  color: string;\n}\n\ninterface Props extends RowDatum {\n  highlighted: string | undefined;\n}\n\nconst TableRow = (props: Props) => {\n  const {\n    id, name, rca, density, quadrant, color, highlighted,\n  } = props;\n\n  const [hovered, setHovered] = useState<boolean>(false);\n\n  return (\n    <Tr\n      onMouseEnter={() => setHovered(true)}\n      onMouseLeave={() => setHovered(false)}\n      id={highlighted === id ? highlightedIdName : undefined}\n      style={highlighted === id ? {backgroundColor: primaryColorLight} : undefined}\n    >\n      <NameTd style={hovered && highlighted !== id\n          ? {backgroundColor: hoverBackgroundColor}\n          : highlighted === id ? {backgroundColor: primaryColorLight} : undefined}>\n        <NameContent>\n          <ColorBar style={{backgroundColor: color}} />\n          {name}\n        </NameContent>\n      </NameTd>\n      <ContentTd>{rca}</ContentTd>\n      <ContentTd>{density}</ContentTd>\n      <ContentTd>{quadrant}</ContentTd>\n    </Tr>\n  );\n};\n\nexport default TableRow;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport {\n  lightBorderColor,\n  backgroundMedium,\n  baseColor,\n  primaryFont,\n  lightBaseColor,\n} from '../../../styling/styleUtils';\nimport MultiSelect from '@khanacademy/react-multi-select';\n\nconst Root = styled.div`\n  position: relative;\n  z-index: 10;\n  max-width: 100%;\n  min-width: 120px;\n\n  .multi-select {\n    .dropdown {\n      .dropdown-heading {\n        border-radius: 0 !important;\n        height: 1.5rem !important;\n        border-top: none !important;\n        border-bottom: none !important;\n        border-left: none !important;\n        border-right: none !important;\n        color: ${lightBaseColor} !important;\n        background-color: rgba(255, 255, 255, 0.75) !important;\n        ::placeholder, span {\n          color: ${lightBaseColor} !important;\n          opacity: 1;\n        }\n        .dropdown-heading-dropdown-arrow span {\n          border-color: ${lightBaseColor} transparent transparent !important;\n        }\n        .dropdown-heading-value {\n          padding: 0.1rem 0.3rem !important;\n          position: relative !important;\n          line-height: 1.5rem !important;\n          text-transform: none;\n          font-weight: 400;\n          span {\n            color: ${lightBaseColor} !important;\n          }\n        }\n      }\n      .dropdown-content {\n        font-family: ${primaryFont} !important;\n        border-color: ${lightBorderColor} !important;\n        input {\n          border-radius: 0 !important;\n          border-color: ${lightBaseColor} !important;\n          font-family: ${primaryFont} !important;\n        }\n        .select-item {\n          color: ${baseColor} !important;\n          text-align: left;\n          font-weight: 400;\n          text-transform: none;\n          padding: 2px 0px !important;\n\n          .item-renderer {\n            display: flex !important;\n            align-items: center;\n          }\n\n          &:hover {\n            background-color: ${backgroundMedium} !important;\n          }\n        }\n      }\n    }\n    .dropdown[aria-expanded=\"true\"] {\n      .dropdown-heading {\n        .dropdown-heading-dropdown-arrow span {\n          border-color: transparent transparent ${lightBaseColor} !important;\n        }\n      }\n    }\n  }\n`;\n\ninterface Props {\n  allOptions: {label: string, value: string}[];\n  selectedOptions: string[];\n  setSelectedOptions: (s: string[]) => void;\n  title: string;\n  multipleAsValuesText?: boolean;\n}\n\nconst ColumnFilterBox = (props: Props) => {\n  const {\n    allOptions, selectedOptions, setSelectedOptions,\n    title,\n  } = props;\n\n\n  function selectBoxValueRenderer(selected: any) {\n    if (selected.length === 0) {\n      return `Filter ${title}`;\n    } else if (selected.length === allOptions.length) {\n      return `All ${title} selected`;\n    } else if (props.multipleAsValuesText) {\n      return selected.length === 1 ? selected.label : `${selected.length} values selected`;\n    }\n    return selected.length === 1 ? selected.label : `${selected.length} ${title} selected`;\n  }\n\n  return (\n    <Root>\n      <MultiSelect\n        options={allOptions}\n        selected={selectedOptions}\n        onSelectedChanged={setSelectedOptions}\n        valueRenderer={selectBoxValueRenderer}\n        hasSelectAll={false}\n        disableSearch={true}\n      />\n    </Root>\n  );\n};\n\nexport default ColumnFilterBox;\n","import debounce from 'lodash/debounce';\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components/macro';\nimport {\n  lightBaseColor,\n  primaryFont,\n} from '../../../styling/styleUtils';\n\nconst SearchContainer = styled.label`\n  position: relative;\n  display: flex;\n`;\n\nconst SearchBar = styled.input`\n  width: 100%;\n  padding: 0.2rem;\n  box-sizing: border-box;\n  box-shadow: 0px 0px 3px -1px #b5b5b5;\n  font-weight: 400;\n  font-family: ${primaryFont};\n  border: none;\n  color: ${lightBaseColor};\n  height: 1.5rem;\n  line-height: 1.5rem;\n  background-color: rgba(255, 255, 255, 0.75);\n`;\n\nconst ClearButton = styled.button`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  padding: 0.25rem;\n  line-height: 0;\n  font-size: 0.875rem;\n  background-color: transparent;\n  color: ${lightBaseColor};\n`;\n\ninterface Props {\n  placeholder: string;\n  setSearchQuery: (value: string) => void;\n  initialQuery: string;\n}\n\nconst StandardSearch = (props: Props) => {\n  const {\n    placeholder, setSearchQuery, initialQuery,\n  } = props;\n\n  const searchEl = useRef<HTMLInputElement | null>(null);\n  const clearEl = useRef<HTMLButtonElement | null>(null);\n\n  const onChange = debounce(() => {\n    if (searchEl !== null && searchEl.current !== null) {\n      setSearchQuery(searchEl.current.value);\n      if (clearEl && clearEl.current) {\n        clearEl.current.style.display = searchEl.current.value.length ? 'block' : 'none';\n      }\n    }\n  }, 400);\n\n  const clearSearch = () => {\n    if (searchEl !== null && searchEl.current !== null) {\n      searchEl.current.value = '';\n      setSearchQuery(searchEl.current.value);\n    }\n    if (clearEl && clearEl.current) {\n      clearEl.current.style.display = 'none';\n    }\n  };\n\n  useEffect(() => {\n    const node = searchEl.current;\n    if (node) {\n      if (!node.value) {\n        node.value = initialQuery;\n      }\n      if (clearEl && clearEl.current) {\n        clearEl.current.style.display = node.value.length ? 'block' : 'none';\n      }\n    }\n  }, [searchEl, initialQuery]);\n\n  return (\n    <SearchContainer>\n      <SearchBar\n        ref={searchEl}\n        type={'text'}\n        placeholder={placeholder}\n        onChange={onChange}\n        autoComplete={'off'}\n      />\n      <ClearButton\n        ref={clearEl}\n        style={{display: 'none'}}\n        onClick={clearSearch}\n      >\n        ×\n      </ClearButton>\n    </SearchContainer>\n  );\n};\n\nexport default StandardSearch;\n","import useQueryParams from '../../../hooks/useQueryParams';\nimport THRESHOLD_DATA from './thresholds.json';\nimport {\n  DigitLevel,\n  defaultDigitLevel,\n  CompositionType,\n  defaultCompositionType,\n} from '../../../types/graphQL/graphQLTypes';\nimport {\n  ClusterLevel,\n  defaultClusterLevel,\n  AggregationMode,\n  defaultAggregationMode,\n} from '../../../routing/routes';\n\nconst RCA_OPTIONS_BASE = [\n  {label: 'Very High', value: 'Very High'},\n  {label: 'High', value: 'High'},\n  {label: 'Expected', value: 'Expected'},\n  {label: 'Low', value: 'Low'},\n  {label: 'Very Low', value: 'Very Low'},\n  {label: 'None', value: 'None'},\n];\nconst DENSITY_OPTIONS_BASE = [\n  {label: 'Very High', value: 'Very High'},\n  {label: 'High', value: 'High'},\n  {label: 'Expected', value: 'Expected'},\n  {label: 'Low', value: 'Low'},\n  {label: 'Very Low', value: 'Very Low'},\n];\n\nexport const formatNumber = (value: number) => {\n  if (value > 1 || value < -1) {\n    return parseFloat(value.toFixed(2));\n  } else if (value === 0) {\n    return value;\n  } else {\n    const numberOfZerosAfterDecimal = Math.abs(Math.floor( Math.log10(Math.abs(value)) + 1));\n    // console.log(value);\n    // console.log(numberOfZerosAfterDecimal);\n    // return parseFloat(value.toFixed(2));\n    return parseFloat(value.toFixed(numberOfZerosAfterDecimal + 2));\n  }\n};\n\nconst useRcaAndDensityOptions = () => {\n  const {composition_type, digit_level, cluster_level, aggregation} = useQueryParams();\n  const compositionType = composition_type ? composition_type as CompositionType : defaultCompositionType;\n  const aggregationType = aggregation ? aggregation as AggregationMode : defaultAggregationMode;\n  const digitLevel = digit_level ? parseInt(digit_level, 10) as DigitLevel : defaultDigitLevel;\n  const clusterLevel = cluster_level ? cluster_level as ClusterLevel : defaultClusterLevel;\n  const findThreshold = (metric: 'rca' | 'density') => THRESHOLD_DATA.find(d => {\n    if (d.metric === metric) {\n      if ((compositionType === CompositionType.Companies && d.var === 'company') ||\n          (compositionType === CompositionType.Employees && d.var === 'employ')) {\n        if (aggregationType === AggregationMode.industries && d.classification === 'naics') {\n          if (d.level === digitLevel) {\n            return true;\n          }\n        }\n        if (aggregationType === AggregationMode.cluster && d.classification === 'cluster') {\n          if (d.level.toString() === clusterLevel) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  });\n  const rcaThreshold = findThreshold('rca');\n  const densityThreshold = findThreshold('density');\n  const match = (value: number, metric: 'rca' | 'density', values: string[]) => {\n    const threshold = metric === 'density' ? densityThreshold : rcaThreshold;\n    if (!values.length) {\n      return true;\n    }\n    if (threshold) {\n      if (values.includes('Very High')) {\n        if (value >= threshold.high_split) {\n          return true;\n        }\n      }\n      if (values.includes('High')) {\n        if (value > threshold.expected_high && value < threshold.high_split) {\n          return true;\n        }\n      }\n      if (values.includes('Expected')) {\n        if (value >= threshold.expected_low && value <= threshold.expected_high) {\n          return true;\n        }\n      }\n      if (values.includes('Low')) {\n        if (value < threshold.expected_low && value > threshold.low_split) {\n          return true;\n        }\n      }\n      if (values.includes('Very Low')) {\n        if ((metric === 'density' || value > 0) && value <= threshold.low_split) {\n          return true;\n        }\n      }\n    }\n    if (metric === 'rca' && values.includes('None')) {\n      if (value === 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n  const rcaOptions = RCA_OPTIONS_BASE.map(d => {\n    let label: string = d.label;\n    if (rcaThreshold) {\n      if (d.value === 'Very High') {\n        label = label +\n          ` (n ≥ ${formatNumber(rcaThreshold.high_split)})`;\n      }\n      if (d.value === 'High') {\n        label = label +\n          ` (n > ${formatNumber(rcaThreshold.expected_high)} & n < ${formatNumber(rcaThreshold.high_split)})`;\n      }\n      if (d.value === 'Expected') {\n        label = label +\n          ` (n ≥ ${formatNumber(rcaThreshold.expected_low)} & n ≤ ${formatNumber(rcaThreshold.expected_high)})`;\n      }\n      if (d.value === 'Low') {\n        label = label +\n          ` (n < ${formatNumber(rcaThreshold.expected_low)} & n > ${formatNumber(rcaThreshold.low_split)})`;\n      }\n      if (d.value === 'Very Low') {\n        label = label +\n          ` (n ≤ ${formatNumber(rcaThreshold.low_split)} & n > 0)`;\n      }\n      if (d.value === 'None') {\n        label = label +\n          ` (n = 0)`;\n      }\n    }\n    return {\n      label,\n      value: d.value,\n    };\n  });\n  const densityOptions = DENSITY_OPTIONS_BASE.map(d => {\n    let label: string = d.label;\n    if (rcaThreshold) {\n      if (d.value === 'Very High') {\n        label = label +\n          ` (n ≥ ${formatNumber(rcaThreshold.high_split)})`;\n      }\n      if (d.value === 'High') {\n        label = label +\n          ` (n > ${formatNumber(rcaThreshold.expected_high)} & n < ${formatNumber(rcaThreshold.high_split)})`;\n      }\n      if (d.value === 'Expected') {\n        label = label +\n          ` (n ≥ ${formatNumber(rcaThreshold.expected_low)} & n ≤ ${formatNumber(rcaThreshold.expected_high)})`;\n      }\n      if (d.value === 'Low') {\n        label = label +\n          ` (n < ${formatNumber(rcaThreshold.expected_low)} & n > ${formatNumber(rcaThreshold.low_split)})`;\n      }\n      if (d.value === 'Very Low') {\n        label = label +\n          ` (n ≤ ${formatNumber(rcaThreshold.low_split)})`;\n      }\n    }\n    return {\n      label,\n      value: d.value,\n    };\n  });\n  return {match, rcaOptions, densityOptions};\n};\n\nexport default useRcaAndDensityOptions;\n","import React, {useEffect, useState} from 'react';\nimport EconomicComposition from './economicComposition';\nimport Overview from './overview';\nimport GoodAt from './goodAt';\nimport IndustrySpacePosition from './industrySpacePosition';\nimport GrowthOpportunities from './growthOpportunities';\nimport {\n  Switch,\n  useHistory,\n  matchPath,\n} from 'react-router-dom';\nimport {CityRoutes, cityIdParam, GlobalQueryParams} from '../../../routing/routes';\nimport {createRoute} from '../../../routing/Utils';\nimport InnerPage from '../../../components/templates/InnerPage';\nimport useFluent from '../../../hooks/useFluent';\nimport useCurrentCityId from '../../../hooks/useCurrentCityId';\nimport TrackedRoute from '../../../routing/TrackedRoute';\nimport { usePrevious } from 'react-use';\nimport styled from 'styled-components';\nimport { backgroundDark, primaryFont } from '../../../styling/styleUtils';\n\nconst Button = styled.button`\n  border: solid 1px #fff;\n  background-color: transparent;\n  color: #fff;\n  font-family: ${primaryFont};\n  font-size: 0.875rem;\n  margin-top: 0.75rem;\n\n  &:hover {\n    background-color: #fff;\n    color: ${backgroundDark};\n  }\n`;\n\nconst overviewTooltipLocalStorageKey = 'cityProfileOverviewOneTimeTooltipLocalStorageKeyv1';\nenum StringBoolean {\n  'TRUE' = 'TRUE',\n  'FALSE' = 'FALSE',\n}\n\nconst City = () => {\n  const getString = useFluent();\n  const getStringWithNewLines = (value: string) => getString(value).replace(/\\\\n/g, '\\n');\n  const history = useHistory();\n  const match = matchPath<{[cityIdParam]: string}>(history.location.pathname, CityRoutes.CityBase);\n  const matchOverview = matchPath<{[cityIdParam]: string}>(history.location.pathname, CityRoutes.CityOverview);\n  const cityId = useCurrentCityId();\n  const prevCityId = usePrevious(cityId);\n\n  const [showOverviewTooltip, setShowOverviewTooltip] = useState<boolean>(false);\n  const dismissOverviewTooltip = () => {\n    setShowOverviewTooltip(false);\n    localStorage.setItem(overviewTooltipLocalStorageKey, StringBoolean.TRUE);\n  };\n\n  useEffect(() => {\n    const dismissed = localStorage.getItem(overviewTooltipLocalStorageKey);\n    if (cityId && prevCityId && cityId !== prevCityId && !matchOverview?.isExact && dismissed !== StringBoolean.TRUE) {\n      setShowOverviewTooltip(true);\n    }\n  }, [matchOverview, cityId, prevCityId]);\n\n  useEffect(() => {\n    if (showOverviewTooltip && matchOverview?.isExact) {\n      setShowOverviewTooltip(false);\n      localStorage.setItem(overviewTooltipLocalStorageKey, StringBoolean.TRUE);\n    }\n  }, [matchOverview, showOverviewTooltip]);\n\n  useEffect(() => {\n    // If route is blank, default to first slide\n    if (match && match.isExact && match.params[cityIdParam]) {\n      history.replace(createRoute.city(CityRoutes.CityOverview, match.params[cityIdParam]));\n    }\n  }, [history, match]);\n\n  const baseLinkData = cityId !== null ? [\n    {\n      label: getStringWithNewLines('cities-single-page-titles-question-1'),\n      url: createRoute.city(CityRoutes.CityOverview, cityId),\n      removeParams: [\n        'cluster_overlay' as keyof GlobalQueryParams,\n        'node_sizing' as keyof GlobalQueryParams,\n        'city_node_sizing' as keyof GlobalQueryParams,\n        'city_color_by' as keyof GlobalQueryParams,\n        'rca_threshold' as keyof GlobalQueryParams,\n      ],\n      tooltipText: showOverviewTooltip ? (\n          <>\n          {getString('city-overview-one-time-tooltip')}<br />\n          <Button onClick={dismissOverviewTooltip}>{getString('city-overview-one-time-tooltip-got-it')}</Button>\n          </>\n        ) : undefined,\n    },\n    {\n      label: getStringWithNewLines('cities-single-page-titles-question-2'),\n      url: createRoute.city(CityRoutes.CityEconomicComposition, cityId),\n      removeParams: [\n        'cluster_overlay' as keyof GlobalQueryParams,\n        'node_sizing' as keyof GlobalQueryParams,\n        'city_node_sizing' as keyof GlobalQueryParams,\n        'city_color_by' as keyof GlobalQueryParams,\n        'rca_threshold' as keyof GlobalQueryParams,\n      ],\n    },\n    {\n      label: getStringWithNewLines('cities-single-page-titles-question-3'),\n      url: createRoute.city(CityRoutes.CityGoodAt, cityId),\n      removeParams: [\n        'cluster_overlay' as keyof GlobalQueryParams,\n        'node_sizing' as keyof GlobalQueryParams,\n        'cluster_level' as keyof GlobalQueryParams,\n        'city_node_sizing' as keyof GlobalQueryParams,\n        'city_color_by' as keyof GlobalQueryParams,\n        'rca_threshold' as keyof GlobalQueryParams,\n      ],\n    },\n    {\n      label: getStringWithNewLines('cities-single-page-titles-question-4'),\n      url: createRoute.city(CityRoutes.CityIndustrySpacePosition, cityId),\n      removeParams: [\n        'digit_level' as keyof GlobalQueryParams,\n        'city_node_sizing' as keyof GlobalQueryParams,\n        'city_color_by' as keyof GlobalQueryParams,\n      ],\n    },\n    {\n      label: getStringWithNewLines('cities-single-page-titles-question-5'),\n      url: createRoute.city(CityRoutes.CityGrowthOpportunities, cityId),\n      removeParams: [\n        'cluster_overlay' as keyof GlobalQueryParams,\n        'city_node_sizing' as keyof GlobalQueryParams,\n        'city_color_by' as keyof GlobalQueryParams,\n        'rca_threshold' as keyof GlobalQueryParams,\n      ],\n    },\n  ] : [];\n\n  return (\n    <InnerPage\n      baseLinkData={baseLinkData}\n    >\n      <Switch>\n        <TrackedRoute path={CityRoutes.CityOverview} component={Overview} />\n        <TrackedRoute path={CityRoutes.CityEconomicComposition} component={EconomicComposition} />\n        <TrackedRoute path={CityRoutes.CityGoodAt} component={GoodAt} />\n        <TrackedRoute path={CityRoutes.CityIndustrySpacePosition} component={IndustrySpacePosition} />\n        <TrackedRoute path={CityRoutes.CityGrowthOpportunities} component={GrowthOpportunities} />\n      </Switch>\n    </InnerPage>\n  );\n};\n\nexport default City;\n","import React from 'react';\nimport useGlobalIndustriesData from '../../../hooks/useGlobalIndustriesData';\nimport useRCAData from '../../../hooks/useRCAData';\nimport {\n  DigitLevel,\n  CompositionType,\n  defaultCompositionType,\n  ClassificationNaicsIndustry,\n} from '../../../types/graphQL/graphQLTypes';\nimport Table, {getQuadrant} from './Table';\nimport {RowDatum} from './TableRow';\nimport {\n  sectorColorMap,\n} from '../../../styling/styleUtils';\n\ninterface Props {\n  digitLevel: DigitLevel;\n  compositionType: CompositionType;\n  hiddenSectors: ClassificationNaicsIndustry['id'][];\n  highlighted: string | undefined;\n  clearHighlighted: () => void;\n}\n\nconst PSWOTTable = (props: Props) => {\n  const {\n    digitLevel, compositionType, hiddenSectors,\n    highlighted, clearHighlighted,\n  } = props;\n  const rcaData = useRCAData(digitLevel);\n  const industries = useGlobalIndustriesData();\n\n  let error: any | undefined;\n  if (industries.error !== undefined) {\n    error = industries.error;\n  }\n  if (rcaData.error !== undefined) {\n    error = rcaData.error;\n  }\n\n  let data: RowDatum[] | undefined;\n  if (rcaData.data !== undefined && industries && industries.data) {\n    const {naicsRca, naicsDensity} = rcaData.data;\n    data = industries.data.industries\n      .filter(d => {\n        const rcaDatum = naicsRca.find(dd => dd.naicsId !== null && dd.naicsId.toString() === d.naicsId);\n        return (\n          d.level === digitLevel && !hiddenSectors.includes(d.naicsIdTopParent.toString()) &&\n          d.tradable && rcaDatum && rcaDatum.comparableIndustry\n        );\n      })\n      .map(d => {\n        const rcaDatum = naicsRca.find(dd => dd.naicsId !== null && dd.naicsId.toString() === d.naicsId);\n        const densityDatum = naicsDensity.find(dd => dd.naicsId !== null && dd.naicsId.toString() === d.naicsId);\n        let densityKey: 'densityCompany' | 'densityEmploy';\n        if (compositionType === CompositionType.Companies ||\n            (!compositionType && defaultCompositionType === CompositionType.Companies)) {\n          densityKey = 'densityCompany';\n        } else {\n          densityKey = 'densityEmploy';\n        }\n        const density = densityDatum && densityDatum[densityKey] !== null ? densityDatum[densityKey] as number : 0;\n        const rca = rcaDatum && rcaDatum.rca ? rcaDatum.rca : 0;\n        const quadrant = getQuadrant(rca, density);\n        const parent = sectorColorMap.find(dd => d.naicsIdTopParent.toString() === dd.id);\n        const datum: RowDatum = {\n          id: d.naicsId,\n          name: d.name ? d.name : '',\n          density: parseFloat(density.toFixed(4)),\n          rca: parseFloat(rca.toFixed(4)),\n          quadrant,\n          color: parent ? parent.color : 'gray',\n        };\n        return datum;\n      });\n  }\n\n  return (\n    <Table\n      loading={industries.loading || rcaData.loading}\n      error={error}\n      data={data}\n      compositionType={compositionType}\n      highlighted={highlighted}\n      clearHighlighted={clearHighlighted}\n    />\n  );\n};\n\nexport default PSWOTTable;\n","import React from 'react';\nimport useGlobalClusterData from '../../../hooks/useGlobalClusterData';\nimport useClusterRCAData from '../../../hooks/useClusterRCAData';\nimport {\n  ClusterLevel,\n  CompositionType,\n  defaultCompositionType,\n  ClassificationNaicsCluster,\n} from '../../../types/graphQL/graphQLTypes';\nimport Table, {getQuadrant} from './Table';\nimport {RowDatum} from './TableRow';\nimport {\n  clusterColorMap,\n} from '../../../styling/styleUtils';\n\ninterface Props {\n  clusterLevel: ClusterLevel;\n  compositionType: CompositionType;\n  hiddenClusters: ClassificationNaicsCluster['id'][];\n  highlighted: string | undefined;\n  clearHighlighted: () => void;\n}\n\nconst PSWOTTable = (props: Props) => {\n  const {\n    clusterLevel, compositionType, hiddenClusters, highlighted, clearHighlighted,\n  } = props;\n  const rcaData = useClusterRCAData(clusterLevel);\n  const clusters = useGlobalClusterData();\n\n  let error: any | undefined;\n  if (clusters.error !== undefined) {\n    error = clusters.error;\n  }\n  if (rcaData.error !== undefined) {\n    error = rcaData.error;\n  }\n\n  let data: RowDatum[] | undefined;\n  if (rcaData.data !== undefined && clusters && clusters.data) {\n    const {clusterRca, clusterDensity} = rcaData.data;\n    data = clusters.data.clusters\n      .filter(d => {\n        const rcaDatum = clusterRca.find(dd => dd.clusterId !== null && dd.clusterId.toString() === d.clusterId);\n        return (d.level === clusterLevel &&\n          !hiddenClusters.includes(d.clusterIdTopParent !== null ? d.clusterIdTopParent.toString() : '')\n          && d.tradable && rcaDatum && rcaDatum.comparableIndustry\n        );\n      })\n      .map(d => {\n        const rcaDatum = clusterRca.find(dd => dd.clusterId !== null && dd.clusterId.toString() === d.clusterId);\n        const densityDatum = clusterDensity.find(dd => dd.clusterId !== null && dd.clusterId.toString() === d.clusterId);\n        let densityKey: 'densityCompany' | 'densityEmploy';\n        if (compositionType === CompositionType.Companies ||\n            (!compositionType && defaultCompositionType === CompositionType.Companies)) {\n          densityKey = 'densityCompany';\n        } else {\n          densityKey = 'densityEmploy';\n        }\n        const density = densityDatum && densityDatum[densityKey] !== null ? densityDatum[densityKey] as number : 0;\n        const rca = rcaDatum && rcaDatum.rca ? rcaDatum.rca : 0;\n        const quadrant = getQuadrant(rca, density);\n        const parent = clusterColorMap.find(dd => d.clusterIdTopParent !== null &&\n          d.clusterIdTopParent.toString() === dd.id);\n        const datum: RowDatum = {\n          id: d.clusterId,\n          name: d.name ? d.name : '',\n          density: parseFloat(density.toFixed(4)),\n          rca: parseFloat(rca.toFixed(4)),\n          quadrant,\n          color: parent ? parent.color : 'gray',\n        };\n        return datum;\n      });\n  }\n\n  return (\n    <Table\n      loading={clusters.loading || rcaData.loading}\n      error={error}\n      data={data}\n      compositionType={compositionType}\n      highlighted={highlighted}\n      clearHighlighted={clearHighlighted}\n    />\n  );\n};\n\nexport default PSWOTTable;\n","import React from 'react';\nimport {\n  ClusterLevel,\n  DigitLevel,\n  CompositionType,\n  ClassificationNaicsIndustry,\n  ClassificationNaicsCluster,\n} from '../../../types/graphQL/graphQLTypes';\nimport ScrollContainer from 'react-indiana-drag-scroll';\nimport styled from 'styled-components/macro';\nimport NAICSTable from './NAICSTable';\nimport ClusterTable from './ClusterTable';\nimport {\n  AggregationMode,\n} from '../../../routing/routes';\nimport PresenceToggle from '../legend/PresenceToggle';\nimport BenchmarkLegend from '../legend/BenchmarkLegend';\n\nconst Root = styled.div`\n  position: relative;\n  height: 100%;\n  width: 100%;\n`;\n\nconst ScrollRoot = styled(ScrollContainer)`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  cursor: move;\n  padding-bottom: 90px;\n`;\n\nconst BenchmarkLegendRoot = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100%;\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  pointer-events: none;\n  z-index: 100;\n`;\n\nconst BenchmarkLegendContent = styled.div`\n  pointer-events: all;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 0.5rem;\n`;\n\ninterface Props {\n  digitLevel: DigitLevel;\n  clusterLevel: ClusterLevel;\n  compositionType: CompositionType;\n  aggregationMode: AggregationMode;\n  hiddenSectors: ClassificationNaicsIndustry['id'][];\n  hiddenClusters: ClassificationNaicsCluster['id'][];\n  highlighted: string | undefined;\n  clearHighlighted: () => void;\n}\n\nconst PSWOTTable = (props: Props) => {\n  const {\n    digitLevel, compositionType, aggregationMode, clusterLevel,\n    hiddenSectors, hiddenClusters, highlighted, clearHighlighted,\n  } = props;\n\n  const table = aggregationMode === AggregationMode.cluster ? (\n    <ClusterTable\n      clusterLevel={clusterLevel}\n      compositionType={compositionType}\n      hiddenClusters={hiddenClusters}\n      highlighted={highlighted}\n      clearHighlighted={clearHighlighted}\n    />\n  ) : (\n    <NAICSTable\n      digitLevel={digitLevel}\n      compositionType={compositionType}\n      hiddenSectors={hiddenSectors}\n      highlighted={highlighted}\n      clearHighlighted={clearHighlighted}\n    />\n  );\n\n  return (\n    <Root>\n      <ScrollRoot hideScrollbars={false}>\n        {table}\n      </ScrollRoot>\n      <BenchmarkLegendRoot>\n        <BenchmarkLegendContent>\n          <PresenceToggle />\n          <BenchmarkLegend />\n        </BenchmarkLegendContent>\n      </BenchmarkLegendRoot>\n    </Root>\n  );\n};\n\nexport default PSWOTTable;\n","import React from 'react';\nimport {\n  useAggregateIndustryMap,\n} from '../../../../hooks/useAggregateIndustriesData';\nimport {defaultYear, formatNumberLong} from '../../../../Utils';\nimport {extent} from 'd3-array';\nimport {\n  DigitLevel,\n} from '../../../../types/graphQL/graphQLTypes';\nimport {\n  NodeSizing,\n} from '../../../../routing/routes';\nimport NodeLegend from '../../../../components/dataViz/legend/NodeLegend';\nimport useRCAData from '../../../../hooks/useRCAData';\n\ninterface Props {\n  digitLevel: DigitLevel;\n  nodeSizing: NodeSizing;\n}\n\nconst NodeLegendIndustries = (props: Props) => {\n  const {\n    digitLevel, nodeSizing,\n  } = props;\n  const aggregateIndustryDataMap = useAggregateIndustryMap({level: digitLevel, year: defaultYear});\n  const {data: rcaData} = useRCAData(digitLevel);\n\n  let nodeSizingTitle: string | undefined;\n  let nodeSizingMinText: string | undefined;\n  let nodeSizingMaxText: string | undefined;\n  if (aggregateIndustryDataMap.data && !aggregateIndustryDataMap.loading) {\n    if (nodeSizing === NodeSizing.globalCompanies) {\n      nodeSizingTitle = 'Node Size by Global Number of Establishments';\n      nodeSizingMinText = formatNumberLong(aggregateIndustryDataMap.data.globalMinMax.minSumNumCompany);\n      nodeSizingMaxText = formatNumberLong(aggregateIndustryDataMap.data.globalMinMax.maxSumNumCompany);\n    } else if (nodeSizing === NodeSizing.globalEmployees) {\n      nodeSizingTitle = 'Node Size by Global Number of Employees';\n      nodeSizingMinText = formatNumberLong(aggregateIndustryDataMap.data.globalMinMax.minSumNumEmploy);\n      nodeSizingMaxText = formatNumberLong(aggregateIndustryDataMap.data.globalMinMax.maxSumNumEmploy);\n    } if (nodeSizing === NodeSizing.cityCompanies && rcaData) {\n      nodeSizingTitle = 'Node Size by Number of Establishments in City';\n      const [min, max] = extent(rcaData.naicsData.map(d => d.numCompany).filter(d => d !== null) as number []);\n      nodeSizingMinText = formatNumberLong(min ? min : 0);\n      nodeSizingMaxText = formatNumberLong(max ? max : 0);\n    } else if (nodeSizing === NodeSizing.cityEmployees && rcaData) {\n      nodeSizingTitle = 'Node Size by Number of Employees in City';\n      const [min, max] = extent(rcaData.naicsData.map(d => d.numEmploy).filter(d => d !== null) as number []);\n      nodeSizingMinText = formatNumberLong(min ? min : 0);\n      nodeSizingMaxText = formatNumberLong(max ? max : 0);\n    } else if (nodeSizing === NodeSizing.rca && rcaData) {\n      nodeSizingTitle = 'Node Size by Relative Presence';\n      const [min, max] = extent(rcaData.naicsRca.map(d => d.rca).filter(d => d !== null) as number []);\n      nodeSizingMinText = Math.floor(min ? min : 0) + 'x expected presence';\n      nodeSizingMaxText = Math.ceil(max ? max : 0) + 'x expected presence';\n    }\n  }\n\n  return (\n    <NodeLegend\n      sizeBy={nodeSizingMinText && nodeSizingMaxText && nodeSizingTitle ? {\n          title: nodeSizingTitle,\n          minLabel: nodeSizingMinText,\n          maxLabel: nodeSizingMaxText,\n        } : null\n      }\n      colorBy={null}\n    />\n  );\n};\n\nexport default NodeLegendIndustries;\n","import React from 'react';\nimport {\n  useAggregateIndustryMap,\n} from '../../../../hooks/useAggregateIndustriesData';\nimport {defaultYear, formatNumberLong} from '../../../../Utils';\nimport {extent} from 'd3-array';\nimport {\n  DigitLevel,\n  ClusterLevel,\n} from '../../../../types/graphQL/graphQLTypes';\nimport {\n  NodeSizing,\n} from '../../../../routing/routes';\nimport NodeLegend from '../../../../components/dataViz/legend/NodeLegend';\nimport useClusterRCAData from '../../../../hooks/useClusterRCAData';\n\ninterface Props {\n  clusterLevel: ClusterLevel;\n  nodeSizing: NodeSizing;\n}\n\nconst NodeLegendIndustries = (props: Props) => {\n  const {\n    nodeSizing, clusterLevel,\n  } = props;\n  const aggregateIndustryDataMap = useAggregateIndustryMap({\n    level: DigitLevel.Sector, year: defaultYear, clusterLevel,\n  });\n  const {data: rcaData} = useClusterRCAData(clusterLevel);\n\n  let nodeSizingTitle: string | undefined;\n  let nodeSizingMinText: string | undefined;\n  let nodeSizingMaxText: string | undefined;\n  if (aggregateIndustryDataMap.data && !aggregateIndustryDataMap.loading) {\n    if (nodeSizing === NodeSizing.globalCompanies) {\n      nodeSizingTitle = 'Node Size by Global Number of Establishments';\n      nodeSizingMinText = formatNumberLong(aggregateIndustryDataMap.data.clusterMinMax.minSumNumCompany);\n      nodeSizingMaxText = formatNumberLong(aggregateIndustryDataMap.data.clusterMinMax.maxSumNumCompany);\n    } else if (nodeSizing === NodeSizing.globalEmployees) {\n      nodeSizingTitle = 'Node Size by Global Number of Employees';\n      nodeSizingMinText = formatNumberLong(aggregateIndustryDataMap.data.clusterMinMax.minSumNumEmploy);\n      nodeSizingMaxText = formatNumberLong(aggregateIndustryDataMap.data.clusterMinMax.maxSumNumEmploy);\n    } if (nodeSizing === NodeSizing.cityCompanies && rcaData) {\n      nodeSizingTitle = 'Node Size by Number of Establishments in City';\n      const [min, max] = extent(rcaData.clusterData\n        .filter(d => d.level === clusterLevel)\n        .map(d => d.numCompany).filter(d => d !== null) as number []);\n      nodeSizingMinText = formatNumberLong(min ? min : 0);\n      nodeSizingMaxText = formatNumberLong(max ? max : 0);\n    } else if (nodeSizing === NodeSizing.cityEmployees && rcaData) {\n      nodeSizingTitle = 'Node Size by Number of Employees in City';\n      const [min, max] = extent(rcaData.clusterData\n        .filter(d => d.level === clusterLevel)\n        .map(d => d.numEmploy).filter(d => d !== null) as number []);\n      nodeSizingMinText = formatNumberLong(min ? min : 0);\n      nodeSizingMaxText = formatNumberLong(max ? max : 0);\n    } else if (nodeSizing === NodeSizing.rca && rcaData) {\n      nodeSizingTitle = 'Node Size by Relative Presence';\n      const [min, max] = extent(rcaData.clusterRca.map(d => d.rca).filter(d => d !== null) as number []);\n      nodeSizingMinText = Math.floor(min ? min : 0) + 'x expected presence';\n      nodeSizingMaxText = Math.ceil(max ? max : 0) + 'x expected presence';\n    }\n  }\n\n  return (\n    <NodeLegend\n      sizeBy={nodeSizingMinText && nodeSizingMaxText && nodeSizingTitle ? {\n          title: nodeSizingTitle,\n          minLabel: nodeSizingMinText,\n          maxLabel: nodeSizingMaxText,\n        } : null\n      }\n      colorBy={null}\n    />\n  );\n};\n\nexport default NodeLegendIndustries;\n","import React from 'react';\nimport StandardSideTextBlock from '../../../../components/general/StandardSideTextBlock';\nimport {\n  ContentParagraph,\n  ContentTitle,\n} from '../../../../styling/styleUtils';\nimport useFluent, {possessive} from '../../../../hooks/useFluent';\nimport useCurrentCity from '../../../../hooks/useCurrentCity';\nimport StandardSideTextLoading from '../../../../components/transitionStateComponents/StandardSideTextLoading';\nimport {\n  isValidPeerGroup,\n} from '../../../../types/graphQL/graphQLTypes';\nimport useCurrentBenchmark from '../../../../hooks/useCurrentBenchmark';\nimport Helmet from 'react-helmet';\n\nconst SideText = ({children}:{children: React.ReactNode}) => {\n  const getString = useFluent();\n  const {loading, city} = useCurrentCity();\n  const { benchmark, benchmarkNameShort } = useCurrentBenchmark();\n  const benchmarkType = isValidPeerGroup(benchmark) ? benchmark : benchmarkNameShort;\n  if (loading) {\n    return <StandardSideTextLoading />;\n  } else if (city) {\n    const cityName = city.name ? city.name : '';\n    const cityNamePlural = possessive([cityName]);\n    const title = getString('growth-opportunities-title', {\n      'name': cityName,\n    });\n    const para1 = getString('growth-opportunities-para-1', {\n      'name': cityName,\n      'name-plural': cityNamePlural,\n      'benchmark-type': benchmarkType,\n    });\n\n    return (\n      <StandardSideTextBlock>\n        <Helmet>\n          <title>{title + ' | ' + getString('meta-data-title-default-suffix')}</title>\n          <meta property='og:title' content={title + ' | ' + getString('meta-data-title-default-suffix')} />\n        </Helmet>\n        <ContentTitle>{title}</ContentTitle>\n        <ContentParagraph>{para1}</ContentParagraph>\n        {children}\n      </StandardSideTextBlock>\n    );\n  } else {\n    return null;\n  }\n\n};\n\nexport default SideText;\n","import {DefaultContentWrapper} from '../../../../styling/GlobalGrid';\nimport useCurrentCityId from '../../../../hooks/useCurrentCityId';\nimport SimpleError from '../../../../components/transitionStateComponents/SimpleError';\nimport {LoadingOverlay} from '../../../../components/transitionStateComponents/VizLoadingBlock';\nimport React, {useState} from 'react';\nimport {\n  DigitLevel,\n  defaultDigitLevel,\n  ClassificationNaicsIndustry,\n  ClassificationNaicsCluster,\n  ClusterLevel,\n  CompositionType,\n  defaultCompositionType,\n} from '../../../../types/graphQL/graphQLTypes';\nimport {\n  ContentGrid,\n} from '../../../../styling/styleUtils';\nimport useQueryParams from '../../../../hooks/useQueryParams';\nimport useFluent from '../../../../hooks/useFluent';\nimport CategoryLabels from '../../../../components/dataViz/legend/CategoryLabels';\nimport useSectorMap from '../../../../hooks/useSectorMap';\nimport UtilityBar from '../../../../components/navigation/secondaryHeader/UtilityBar';\nimport {createRoute} from '../../../../routing/Utils';\nimport {\n  CityRoutes,\n  cityIdParam,\n  ColorBy,\n  AggregationMode,\n  defaultAggregationMode,\n  defaultNodeSizing,\n  NodeSizing,\n} from '../../../../routing/routes';\nimport TrackedRoute from '../../../../routing/TrackedRoute';\nimport {\n  useHistory,\n  Switch,\n  Route,\n  matchPath,\n} from 'react-router-dom';\nimport NAICSChart from '../../../../components/dataViz/pswotChart/NAICSChart';\nimport ClusterChart from '../../../../components/dataViz/pswotChart/ClusterChart';\nimport EducationLegend from '../../../../components/dataViz/legend/EducationLegend';\nimport WageLegend from '../../../../components/dataViz/legend/WageLegend';\nimport useClusterMap from '../../../../hooks/useClusterMap';\nimport PreChartRow from '../../../../components/general/PreChartRow';\nimport {Mode} from '../../../../components/general/searchIndustryInGraphDropdown';\nimport PSWOTTable from '../../../../components/dataViz/pswotTable';\nimport NodeLegendIndustries from './NodeLegendIndustries';\nimport NodeLegendClusters from './NodeLegendClusters';\nimport SideText from './SideText';\n\nconst GrowthOppurtunities = () => {\n  const cityId = useCurrentCityId();\n\n  const {node_sizing, color_by, digit_level, aggregation, cluster_level, composition_type} = useQueryParams();\n  const digitLevel = digit_level ? parseInt(digit_level, 10) as DigitLevel : defaultDigitLevel;\n  const clusterLevel = cluster_level ? parseInt(cluster_level, 10) as ClusterLevel : ClusterLevel.C3;\n  const compositionType = composition_type ? composition_type as CompositionType : defaultCompositionType;\n  const nodeSizing = node_sizing && node_sizing !== NodeSizing.rca ? node_sizing : defaultNodeSizing;\n  const sectorMap = useSectorMap();\n  const clusterMap = useClusterMap();\n  const [hiddenSectors, setHiddenSectors] = useState<ClassificationNaicsIndustry['id'][]>([]);\n  const [hiddenClusters, setHiddenClusters] = useState<ClassificationNaicsCluster['id'][]>([]);\n  const toggleSector = (sectorId: ClassificationNaicsIndustry['id']) =>\n    hiddenSectors.includes(sectorId)\n      ? setHiddenSectors(hiddenSectors.filter(sId => sId !== sectorId))\n      : setHiddenSectors([...hiddenSectors, sectorId]);\n  const isolateSector = (sectorId: ClassificationNaicsIndustry['id']) =>\n    hiddenSectors.length === sectorMap.length - 1 && !hiddenSectors.find(sId => sId === sectorId)\n      ? setHiddenSectors([])\n      : setHiddenSectors([...sectorMap.map(s => s.id).filter(sId => sId !== sectorId)]);\n  const resetSectors = () => setHiddenSectors([]);\n\n  const toggleCluster = (clusterId: ClassificationNaicsCluster['id']) =>\n    hiddenClusters.includes(clusterId)\n      ? setHiddenClusters(hiddenClusters.filter(sId => sId !== clusterId))\n      : setHiddenClusters([...hiddenClusters, clusterId]);\n  const isolateCluster = (clusterId: ClassificationNaicsCluster['id']) =>\n    hiddenClusters.length === clusterMap.length - 1 && !hiddenClusters.find(sId => sId === clusterId)\n      ? setHiddenClusters([])\n      : setHiddenClusters([...clusterMap.map(s => s.id).filter(sId => sId !== clusterId)]);\n  const resetClusters = () => setHiddenClusters([]);\n\n  const [highlighted, setHighlighted] = useState<string | undefined>(undefined);\n  const clearHighlighted = () => setHighlighted(undefined);\n  const getString = useFluent();\n  const history = useHistory();\n  const isTableView = matchPath<{[cityIdParam]: string}>(\n    history.location.pathname, CityRoutes.CityGrowthOpportunitiesTable,\n  );\n\n  const isClusterMode =\n    (!aggregation && defaultAggregationMode === AggregationMode.cluster) || (aggregation === AggregationMode.cluster);\n\n  const vizNavigation= [\n    {\n      label: 'Scatter Plot',\n      active: !!(!isTableView || !isTableView.isExact),\n      onClick: () => {\n        setHighlighted(undefined);\n        history.push(\n          createRoute.city(CityRoutes.CityGrowthOpportunities, cityId ? cityId :'')\n          + history.location.search,\n        );\n      },\n    },\n    {\n      label: 'Table of Industries',\n      active: !!(isTableView && isTableView.isExact),\n      onClick: () => {\n        setHighlighted(undefined);\n        history.push(\n          createRoute.city(CityRoutes.CityGrowthOpportunitiesTable, cityId ? cityId :'')\n          + history.location.search,\n        );\n      },\n    },\n  ];\n\n  if (cityId === null) {\n    return (\n      <DefaultContentWrapper>\n        <LoadingOverlay>\n          <SimpleError fluentMessageId={'global-ui-error-invalid-city'} />\n        </LoadingOverlay>\n      </DefaultContentWrapper>\n    );\n  }\n\n  let legend: React.ReactElement<any> | null;\n  if (color_by === ColorBy.education) {\n    legend = (\n      <EducationLegend />\n    );\n  } else if (color_by === ColorBy.wage) {\n    legend = (\n      <WageLegend />\n    );\n  } else {\n    if (isClusterMode) {\n      legend = (\n        <CategoryLabels\n          categories={clusterMap}\n          allowToggle={true}\n          toggleCategory={toggleCluster}\n          isolateCategory={isolateCluster}\n          hiddenCategories={hiddenClusters}\n          resetCategories={resetClusters}\n          resetText={getString('global-ui-reset-clusters')}\n          fullWidth={false}\n        />\n      );\n    } else {\n      legend = (\n        <CategoryLabels\n          categories={sectorMap}\n          allowToggle={true}\n          toggleCategory={toggleSector}\n          isolateCategory={isolateSector}\n          hiddenCategories={hiddenSectors}\n          resetCategories={resetSectors}\n          resetText={getString('global-ui-reset-sectors')}\n          fullWidth={true}\n        />\n      );\n    }\n  }\n\n\n  const pswotChart = isClusterMode ? (\n      <ClusterChart\n        highlighted={highlighted ? highlighted : null}\n        setHighlighted={setHighlighted}\n        clusterLevel={clusterLevel}\n        hiddenClusters={hiddenClusters}\n        nodeSizing={nodeSizing}\n        colorBy={color_by ? color_by : ColorBy.sector}\n        compositionType={compositionType}\n      />\n  ) : (\n      <NAICSChart\n        highlighted={highlighted ? highlighted : null}\n        setHighlighted={setHighlighted}\n        digitLevel={digitLevel}\n        hiddenSectors={hiddenSectors}\n        nodeSizing={nodeSizing}\n        colorBy={color_by ? color_by : ColorBy.sector}\n        compositionType={compositionType}\n      />\n  );\n\n  const nodeLegend = isClusterMode ? (\n      <NodeLegendClusters\n        clusterLevel={clusterLevel}\n        nodeSizing={nodeSizing}\n      />\n  ) : (\n      <NodeLegendIndustries\n        digitLevel={digitLevel}\n        nodeSizing={nodeSizing}\n      />\n  );\n\n  const pswotChartWithSettings = (\n    <>\n      <PreChartRow\n        searchInGraphOptions={{\n          hiddenParents: isClusterMode ? hiddenClusters : hiddenSectors,\n          digitLevel: isClusterMode ? null : digitLevel,\n          clusterLevel: isClusterMode ? clusterLevel.toString() as any : null,\n          setHighlighted,\n          mode: isClusterMode ? Mode.cluster : Mode.naics,\n        }}\n        settingsOptions={{\n          compositionType: true,\n          nodeSizing: true,\n          colorBy: {nodes: true},\n          aggregationMode: true,\n          digitLevel: isClusterMode ? undefined : true,\n          clusterLevel: isClusterMode ? true : undefined,\n        }}\n        vizNavigation={vizNavigation}\n      />\n      {pswotChart}\n    </>\n  );\n\n  const pswotTable = (\n    <>\n      <PreChartRow\n        searchInGraphOptions={{\n          hiddenParents: isClusterMode ? hiddenClusters : hiddenSectors,\n          digitLevel: isClusterMode ? null : digitLevel,\n          clusterLevel: isClusterMode ? clusterLevel.toString() as any : null,\n          setHighlighted,\n          mode: isClusterMode ? Mode.cluster : Mode.naics,\n        }}\n        settingsOptions={{\n          compositionType: true,\n          aggregationMode: true,\n          digitLevel: isClusterMode ? undefined : true,\n          clusterLevel: isClusterMode ? true : undefined,\n        }}\n        vizNavigation={vizNavigation}\n      />\n      <PSWOTTable\n        clusterLevel={clusterLevel}\n        digitLevel={digitLevel}\n        compositionType={compositionType}\n        aggregationMode={isClusterMode ? AggregationMode.cluster : AggregationMode.industries}\n        hiddenSectors={hiddenSectors}\n        hiddenClusters={hiddenClusters}\n        highlighted={highlighted}\n        clearHighlighted={clearHighlighted}\n      />\n    </>\n  );\n\n\n  return (\n    <DefaultContentWrapper>\n\n      <ContentGrid>\n        <SideText>\n          <Switch>\n            <Route path={CityRoutes.CityGrowthOpportunitiesTable}\n              render={() => (<></>)}\n            />\n            <Route path={CityRoutes.CityGrowthOpportunities}\n              render={() => (<>{nodeLegend}</>)}\n            />\n          </Switch>\n        </SideText>\n        <Switch>\n          <TrackedRoute path={CityRoutes.CityGrowthOpportunitiesTable}\n            render={() => (<>{pswotTable}</>)}\n          />\n          <TrackedRoute path={CityRoutes.CityGrowthOpportunities}\n            render={() => (<>{pswotChartWithSettings}</>)}\n          />\n        </Switch>\n        {legend}\n      </ContentGrid>\n      <UtilityBar />\n    </DefaultContentWrapper>\n  );\n};\n\nexport default GrowthOppurtunities;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport {\n  lightBaseColor,\n} from '../../../styling/styleUtils';\nimport matchingKeywordFormatter from '../../../styling/utils/panelSearchKeywordFormatter';\nimport PanelSearch, {Datum} from 'react-panel-search';\nimport useFluent from '../../../hooks/useFluent';\nimport {useGlobalLocationHierarchicalTreeData} from '../../../hooks/useGlobalLocationData';\nimport SimpleLoader from '../../transitionStateComponents/SimpleLoader';\nimport SimpleError from '../../transitionStateComponents/SimpleError';\nimport useCurrentCityId from '../../../hooks/useCurrentCityId';\nimport {\n  useHistory,\n  matchPath,\n} from 'react-router-dom';\nimport {\n  CityRoutes,\n  cityIdParam,\n} from '../../../routing/routes';\nimport {ValueOfCityRoutes, createRoute} from '../../../routing/Utils';\nimport {TooltipTheme} from '../../general/Tooltip';\nimport useCurrentBenchmark from '../../../hooks/useCurrentBenchmark';\n\nconst Root = styled.div`\n  display: grid;\n  grid-template-columns: auto;\n  grid-gap: 1rem;\n  height: 100%;\n  align-items: center;\n\n  @media (max-width: 500px) {\n    grid-template-columns: auto;\n    grid-template-rows: auto auto auto;\n  }\n`;\n\nconst SearchContainer = styled.div`\n  width: 200px;\n  width: clamp(200px, 25vw, 300px);\n\n  @media (max-width: 500px) {\n    width: 100%;\n  }\n`;\n\nconst LoadingContainer = styled.div`\n  border: solid 1px ${lightBaseColor};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 200px;\n  width: clamp(200px, 25vw, 300px);\n\n  @media (max-width: 500px) {\n    width: 100%;\n  }\n`;\n\ninterface Props {\n  searchContainerWidth?: string;\n}\n\nconst CitySearch = ({ searchContainerWidth }: Props) => {\n  const getString = useFluent();\n  const cityId = useCurrentCityId();\n  const history = useHistory();\n  const { benchmark } = useCurrentBenchmark();\n\n  const {loading, error, data} = useGlobalLocationHierarchicalTreeData();\n  let output: React.ReactElement<any> | null;\n  if (loading) {\n    output = (\n      <LoadingContainer\n        style={searchContainerWidth ? { width: searchContainerWidth } : undefined}\n      >\n        <SimpleLoader />\n      </LoadingContainer>\n    );\n  } else if (error !== undefined) {\n    console.error(error);\n    output = (\n      <LoadingContainer\n        style={searchContainerWidth ? { width: searchContainerWidth } : undefined}\n      >\n        <SimpleError />\n      </LoadingContainer>\n    );\n  } else if (data !== undefined) {\n    const initialSelected = data.find(({id}) => id === cityId);\n    const onSelect = (d: Datum | null) => {\n      if (d) {\n        Object.entries(CityRoutes).forEach(([_key, value]) => {\n          const match = matchPath<{[cityIdParam]: string}>(history.location.pathname, value);\n          if (match && match.isExact && match.path) {\n            history.push(createRoute.city(match.path as ValueOfCityRoutes, d.id.toString()) + history.location.search);\n          }\n        });\n      }\n    };\n\n    const dataWithoutCurrentComparisonOrBenchmark = benchmark !== undefined\n      ? data.filter(({id}) => id !== benchmark) : data;\n\n    output = (\n      <>\n        <SearchContainer\n          style={searchContainerWidth ? { width: searchContainerWidth } : undefined}\n        >\n          <PanelSearch\n            data={dataWithoutCurrentComparisonOrBenchmark}\n            topLevelTitle={getString('global-text-countries')}\n            disallowSelectionLevels={['0']}\n            defaultPlaceholderText={getString('global-ui-type-a-city-name')}\n            showCount={true}\n            resultsIdentation={1.75}\n            neverEmpty={true}\n            selectedValue={initialSelected ? initialSelected : undefined}\n            onSelect={onSelect}\n            maxResults={500}\n            matchingKeywordFormatter={matchingKeywordFormatter(TooltipTheme.Light)}\n          />\n        </SearchContainer>\n      </>\n    );\n  } else {\n    output = null;\n  }\n  return (\n    <Root>{output}</Root>\n  );\n};\n\nexport default CitySearch;\n","import React from 'react';\nimport {SecondaryHeaderContainer} from '../../../styling/GlobalGrid';\nimport styled from 'styled-components/macro';\nimport {\n  backgroundMedium,\n  defaultPadding,\n  secondaryFont,\n  SearchContainerLight,\n} from '../../../styling/styleUtils';\nimport {UtilityBarPortal} from './UtilityBar';\nimport {columnsToRowsBreakpoint} from '../Utils';\nimport CitySearch from './CitySearch';\nimport {\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport {CityRoutes} from '../../../routing/routes';\n\nconst Root = styled(SecondaryHeaderContainer)`\n  background-color: ${backgroundMedium};\n  padding: 0.4rem ${defaultPadding}rem;\n  box-sizing: border-box;\n  display: grid;\n  grid-template-columns: 1fr auto;\n  grid-gap: 0.7rem;\n  pointer-events: auto;\n  min-height: 40px;\n\n  @media (max-width: 1100px) {\n    padding: 0.55rem;\n  }\n\n  @media (max-width: ${columnsToRowsBreakpoint}px) {\n    grid-template-columns: auto;\n    grid-rows-columns: auto auto;\n    padding-bottom: 0.45rem;\n    min-height: 83px;\n  }\n`;\n\nconst SearchContainer = styled(SearchContainerLight)`\n  max-width: 800px;\n  width: 100%;\n  font-family: ${secondaryFont};\n\n  .react-panel-search-search-bar-input {\n    background-color: ${backgroundMedium};\n    padding: 0.4rem 0.5rem;\n    font-size: 0.75rem;\n\n    &:focus::placeholder {\n      color: ${backgroundMedium};\n    }\n  }\n\n  .react-panel-search-search-bar-search-icon {\n    display: none;\n  }\n\n  .react-panel-search-search-bar-dropdown-arrow,\n  .react-panel-search-search-bar-clear-button {\n    background-color: ${backgroundMedium};\n  }\n\n`;\n\nconst SecondaryHeader = () => {\n  return (\n    <Root>\n      <SearchContainer>\n        <Switch>\n          <Route path={CityRoutes.CityBase} component={CitySearch} />\n        </Switch>\n      </SearchContainer>\n      <UtilityBarPortal />\n    </Root>\n  );\n};\n\nexport default SecondaryHeader;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport {\n  breakPoints,\n} from '../../../styling/GlobalGrid';\nimport {\n  Link,\n  useHistory,\n  matchPath,\n} from 'react-router-dom';\nimport {Props as BaseProps} from './';\nimport {\n  baseColor,\n  primaryColorLight,\n  secondaryFont,\n} from '../../../styling/styleUtils';\nimport raw from 'raw.macro';\n\nconst Root = styled.div`\n  padding-top: 0.75rem;\n  display: none;\n  align-items: center;\n  justify-content: center;\n  grid-template-columns: auto 1fr auto;\n\n  @media ${breakPoints.small} {\n    display: grid;\n  }\n`;\n\nconst MobileButtonContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst MobileButton = styled.button`\n  background-color: ${primaryColorLight};\n  border: none;\n  padding: 0.75rem 1.25rem;\n  font-family: ${secondaryFont};\n  text-transform: uppercase;\n  font-size: 0.85rem;\n  color: ${baseColor};\n  max-width: 300px;\n  display: flex;\n  align-items: center;\n  pointer-events: all;\n`;\n\nconst ChevronSVG = raw('../../../assets/icons/chevron.svg');\n\nconst arrowStyles = `\n  margin: 1rem 0.5rem;\n  color: ${baseColor};\n  text-decoration: none;\n  pointer-events: all;\n`;\n\nconst ArrowBase = styled(Link)`\n  ${arrowStyles}\n`;\n\nconst DisabledArrow = styled.div`\n  ${arrowStyles}\n  opacity: 0.25;\n`;\n\nconst SvgBase = styled.div`\n  width: 2.75rem;\n  height: 1.85rem;\n  padding: 0.35rem 0.5rem;\n  box-sizing: border-box;\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    polyline {\n      stroke: ${baseColor};\n    }\n  }\n`;\n\nconst NextSvg = styled(SvgBase)`\n  svg {\n    transform: rotate(-90deg);\n  }\n`;\nconst PrevSvg = styled(SvgBase)`\n  svg {\n    transform: rotate(90deg);\n  }\n`;\n\nconst DownArrow = styled.span`\n  width: 0.9rem;\n  height: 0.9rem;\n  margin: 0 0.7rem;\n  flex-shrink: 0;\n  display: inline-block;\n  box-sizing: border-box;\n\n  svg {\n    width: 100%;\n    height: 100%;\n\n    polyline {\n      fill: ${baseColor};\n    }\n  }\n`;\n\nconst UpArrow = styled(DownArrow)`\n  svg {\n    transform: rotate(180deg);\n  }\n`;\n\ninterface Props extends BaseProps {\n  mobileMenuOpen: boolean;\n  toggleMenu: () => void;\n  closeMenu: () => void;\n}\n\nconst MobileMenu = ({baseLinkData, toggleMenu, mobileMenuOpen, closeMenu}: Props) => {\n  const history = useHistory();\n\n  if (baseLinkData.length === 0) {\n    console.warn('MobileMenu component are recieving baseLinkData of length 0');\n    return null;\n  }\n\n  const linkIndex = baseLinkData.findIndex(d => {\n    const match = matchPath(history.location.pathname, d.url);\n    return match ? true : false;\n  });\n\n  if (linkIndex === -1) {\n    console.warn('URL did not match any links provided to MobileMenu component');\n    return null;\n  } else {\n    const pageTitle = baseLinkData[linkIndex].label;\n    const prevLink = linkIndex > 0 ? (\n      <ArrowBase\n        to={baseLinkData[linkIndex - 1].url + history.location.search}\n        onClick={() => closeMenu()}\n      >\n        <PrevSvg dangerouslySetInnerHTML={{__html: ChevronSVG}} />\n      </ArrowBase>\n    ) : (\n      <DisabledArrow>\n        <PrevSvg dangerouslySetInnerHTML={{__html: ChevronSVG}} />\n      </DisabledArrow>\n    );\n    const nextLink = linkIndex < baseLinkData.length - 1 ? (\n      <ArrowBase\n        to={baseLinkData[linkIndex + 1].url + history.location.search}\n        onClick={() => closeMenu()}\n      >\n        <NextSvg dangerouslySetInnerHTML={{__html: ChevronSVG}} />\n      </ArrowBase>\n    ) : (\n      <DisabledArrow>\n        <NextSvg dangerouslySetInnerHTML={{__html: ChevronSVG}} />\n      </DisabledArrow>\n    );\n\n    const toggleArrow = mobileMenuOpen\n      ? (<UpArrow dangerouslySetInnerHTML={{__html: ChevronSVG}} />)\n      : (<DownArrow dangerouslySetInnerHTML={{__html: ChevronSVG}} />);\n\n    return (\n      <Root>\n        {prevLink}\n        <MobileButtonContainer>\n          <MobileButton onClick={toggleMenu}>\n            {pageTitle}\n            {toggleArrow}\n          </MobileButton>\n        </MobileButtonContainer>\n        {nextLink}\n      </Root>\n    );\n  }\n};\n\nexport default MobileMenu;\n","import React, {useRef, useEffect, useState, useContext} from 'react';\nimport {\n  NavigationContainer,\n  breakPoints,\n  breakPointValues,\n} from '../../../styling/GlobalGrid';\nimport {\n  secondaryFont,\n  baseColor,\n  primaryColor,\n  primaryColorLight,\n  lightBorderColor,\n  backgroundDark,\n} from '../../../styling/styleUtils';\nimport styled from 'styled-components/macro';\nimport {\n  Link,\n  useHistory,\n  matchPath,\n} from 'react-router-dom';\nimport AppContext from '../../../contextProviders/appContext';\nimport MobileMenu from './MobileMenu';\nimport {GlobalQueryParams} from '../../../routing/routes';\nimport useQueryParams from '../../../hooks/useQueryParams';\nimport queryString from 'query-string';\n\nconst collapsibleMenuClassName = 'collapsible-side-menu-root';\n\nconst Container = styled(NavigationContainer)`\n  pointer-events: all;\n\n  &:hover {\n    .${collapsibleMenuClassName} {\n      outline: dashed 1px ${lightBorderColor};\n    }\n  }\n\n  @media ${breakPoints.small} {\n    &:hover {\n      .${collapsibleMenuClassName} {\n        outline: none;\n      }\n    }\n  }\n`;\n\nconst rootWidth = {\n default: 240, // in px\n medium: 205, // in px\n};\n\nconst Root = styled.div`\n  width: ${rootWidth.default}px;\n  position: relative;\n  padding-top: 1rem;\n  margin: auto;\n  box-sizing: border-box;\n\n  svg {\n    height: 380px;\n    position: relative;\n    pointer-events: none;\n    left: -2px;\n\n    path {\n      fill: none;\n      stroke: #1f262b;\n      stroke-miterlimit: 10;\n      stroke-width: 2px;\n\n      @media not all and (min-resolution:.001dpcm) { @media {\n        fill: #fff;\n      }}\n    }\n\n    circle {\n      fill: #151f26;\n    }\n  }\n\n  @media ${breakPoints.medium} {\n    width: ${rootWidth.medium}px;\n\n    svg {\n      height: 280px;\n    }\n  }\n\n  @media ${breakPoints.small} {\n    display: none;\n    height: auto;\n    max-height: initial;\n    width: 100%;\n    max-width: 300px;\n    position: absolute;\n    z-index: 150;\n    background-color: #fff;\n    border: solid 1px ${lightBorderColor};\n    margin: 0 auto;\n    right: 0;\n    left: 0;\n\n    svg {\n      display: none;\n    }\n  }\n`;\n\nconst clipPathIdDesktop = 'side-navigation-circle-menu-clip-path-desktop';\nconst clipPathIdTablet = 'side-navigation-circle-menu-clip-path-tablet';\n\nconst LinkContainer = styled.div`\n  clip-path: url(#${clipPathIdDesktop});\n\n  @media ${breakPoints.medium} {\n    webkit-clip-path: none;\n    clip-path: url(#${clipPathIdTablet});\n  }\n\n  @media ${breakPoints.small} {\n    clip-path: none;\n  }\n\n  @media not all and (min-resolution:.001dpcm) { @media {\n    clip-path: none;\n  }}\n`;\n\nconst acitveLinkClass = 'main-circle-side-nav-active-nav-link-page';\n\nconst NavLink = styled(Link)`\n  position: absolute;\n  font-family: ${secondaryFont};\n  text-transform: uppercase;\n  font-size: 0.7rem;\n  letter-spacing: -0.3px;\n  font-weight: 600;\n  text-decoration: none;\n  white-space: pre-line;\n  padding-left: 1.25rem;\n  transform: translate(0, -40%);\n  color: ${baseColor};\n  transition: all 0.2s ease;\n  box-sizing: border-box;\n  pointer-events: auto;\n\n  &:after {\n    content: '';\n    z-index: -1;\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 150%;\n  }\n\n  &:before {\n    content: '';\n    z-index: -1;\n    position: absolute;\n    width: 200%;\n    height: 120%;\n    background-color: ${primaryColorLight};\n    top: -10%;\n    left: -250%;\n    transition: all 0.2s ease;\n  }\n\n  &:hover:before, &.${acitveLinkClass}:before {\n    left: -95%;\n  }\n\n  @media ${breakPoints.medium} {\n    font-size: 0.6rem;\n  }\n\n  @media ${breakPoints.small} {\n    position: static;\n    display: block;\n    transform: translate(0);\n    font-size: 0.85rem;\n    margin: 0.5rem 0.5rem;\n    padding: 0.5rem 0.5rem 0.85rem;\n    border-bottom: solid 1px ${lightBorderColor};\n    white-space: normal;\n\n    &:before, &:after {\n      display: none;\n    }\n\n    &:last-of-type {\n      border-bottom: none;\n    }\n  }\n`;\n\nconst BetaIcon = styled.div`\n  position: absolute;\n  font-family: ${secondaryFont};\n  text-transform: uppercase;\n  letter-spacing: -0.3px;\n  font-style: italic;\n  font-weight: 600;\n  color: #fff;\n  background-color: ${primaryColor};\n  font-size: 8px;\n  padding: 1px 3px 1px 2px;\n  top: 0;\n  transform: translate(0, calc(-100% - 0.1rem));\n  text-align: center;\n  font-size: 0.6rem;\n\n  @media ${breakPoints.small} {\n    top: -0.3rem;\n    right: 0;\n  }\n`;\n\nconst CollapseButton = styled.button`\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(0, -100%);\n  font-family: ${secondaryFont};\n  text-transform: uppercase;\n  background-color: transparent;\n  border: none;\n  font-size: 0.6rem;\n\n  &:hover {\n    background-color: ${baseColor};\n    color: #fff;\n  }\n\n  @media ${breakPoints.small} {\n    display: none;\n  }\n`;\n\nconst CollapsedMenu = styled.div`\n  position: relative;\n  padding-top: 1rem;\n  margin: auto;\n  box-sizing: border-box;\n  height: 380px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  width: 2rem;\n\n  &:hover {\n    z-index: 1000;\n  }\n\n  @media ${breakPoints.medium} {\n    height: 280px;\n  }\n\n  @media ${breakPoints.small} {\n    display: none;\n  }\n`;\n\nconst CollapsedLink = styled(Link)`\n  white-space: nowrap;\n  min-width: 1rem;\n  width: 1rem;\n  height: 1rem;\n  border-radius: 1000px;\n  border: solid 2px ${baseColor};\n  font-size: 0;\n  color: rgba(0, 0, 0, 0);\n  margin-left: 0.3rem;\n  transition: all 0.2s ease;\n  letter-spacing: -0.3px;\n  font-weight: 600;\n  text-decoration: none;\n  display: flex;\n\n  &:hover {\n    font-family: ${secondaryFont};\n    text-transform: uppercase;\n    font-size: 0.7rem;\n    padding: 0 1.25rem;\n    color: #fff;\n    background-color: ${baseColor};\n    width: min-content;\n  }\n\n  &.${acitveLinkClass}:before {\n    content: '';\n    display: block;\n    width: 0.75rem;\n    height: 0.75rem;\n    background-color: ${baseColor};\n    margin: auto;\n    border-radius: 1000px;\n  }\n`;\n\nconst ExpandButton = styled.div`\n  width: 1.15rem;\n  writing-mode: vertical-rl;\n  text-orientation: mixed;\n  background-color: ${baseColor};\n  color: #fff;\n  transform: rotate(180deg);\n  padding: 0.4rem 0.2rem;\n  text-transform: uppercase;\n  font-size: 0.75rem;\n  font-family: ${secondaryFont};\n  cursor: pointer;\n  letter-spacing: 1px\n`;\n\nconst ExtendArrow = styled.span`\n  display: inline-block;\n  transform: rotate(90deg);\n  position: relative;\n  left: -0.1rem;\n  padding: 3px 0;\n  cursor: pointer;\n`;\n\nconst Tooltip = styled.div`\n  position: fixed;\n  transform: translate(120px, -50%);\n  background-color: ${backgroundDark};\n  color: #fff;\n  padding: 0.5rem 0.75rem;\n  font-size: 0.8rem;\n  z-index: 100;\n  pointer-events: all;\n  max-width: 170px;\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: -0.4rem;\n    margin: auto;\n    width: 0;\n    height: 0;\n    border-top: 0.4rem solid transparent;\n    border-bottom: 0.4rem solid transparent;\n\n    border-right:0.4rem solid ${backgroundDark};\n  }\n\n`;\n\ninterface LinkDatum {\n  label: string;\n  url: string;\n  top: number;\n  absoluteTop: number;\n  left: number;\n  beta?: boolean;\n  tooltipText?: React.ReactNode;\n  removeParams?: (keyof GlobalQueryParams)[];\n}\n\nconst radius = 4.37;\n\nexport interface Props {\n  baseLinkData: {\n    label: string,\n    url: string,\n    beta?: boolean,\n    tooltipText?: React.ReactNode;\n    removeParams?: (keyof GlobalQueryParams)[],\n  }[];\n}\n\ninterface SideNavProps extends Props {\n  setCollapsed: (value: boolean) => void;\n  collapsed: boolean;\n}\n\nconst SideNavigation = ({baseLinkData, collapsed, setCollapsed}: SideNavProps) => {\n  const history = useHistory();\n  const params = useQueryParams();\n  const {windowDimensions} = useContext(AppContext);\n\n  const [linkData, setLinkData] = useState<LinkDatum[]>([]);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState<boolean>(false);\n  const [containerHovered, setContainerHovered] = useState<boolean>(false);\n\n  const rootRef = useRef<HTMLDivElement | null>(null);\n\n  const circle_0 = useRef<SVGCircleElement | null>(null);\n  const circle_1 = useRef<SVGCircleElement | null>(null);\n  const circle_2 = useRef<SVGCircleElement | null>(null);\n  const circle_3 = useRef<SVGCircleElement | null>(null);\n  const circle_4 = useRef<SVGCircleElement | null>(null);\n\n  useEffect(() => {\n    if (collapsed) {\n      setLinkData(baseLinkData.map(l => ({...l, top: 0, left: 0, absoluteTop: 0})));\n    } else {\n      const refArray = [circle_0, circle_1, circle_2, circle_3, circle_4];\n      const pageScrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n      const containerPosition = rootRef && rootRef.current ? rootRef.current.offsetTop : 0;\n      const offset = pageScrollTop - containerPosition;\n      const newLinkDatum: LinkDatum[] = [];\n      refArray.forEach((ref, i) => {\n        const node = ref.current;\n        if (node) {\n          const {top, left} = node.getBoundingClientRect();\n          newLinkDatum.push({...baseLinkData[i], top: top + offset, left, absoluteTop: top});\n        }\n      });\n      setLinkData([...newLinkDatum]);\n    }\n  }, [rootRef, circle_0, circle_1, circle_2, circle_3, circle_4, baseLinkData, windowDimensions, collapsed, mobileMenuOpen]);\n\n  const tooltips: React.ReactElement[] = [];\n\n  const links = linkData.map((d, i) => {\n    const match = matchPath(history.location.pathname, baseLinkData[i].url);\n    const className = match ? acitveLinkClass : undefined;\n    const beta = d.beta ? <BetaIcon>Beta</BetaIcon> : null;\n    let url = d.url;\n    if (d.removeParams) {\n      const newParams: any = {};\n      for (const key in params) {\n        if (!d.removeParams.includes(key as any)) {\n          newParams[key] = params[key as keyof GlobalQueryParams];\n        }\n      }\n      const query = queryString.stringify(newParams);\n      url = query ? url + '?' + query : url;\n    } else {\n      url = url + history.location.search;\n    }\n    if (d.tooltipText && !mobileMenuOpen && !collapsed) {\n      tooltips.push(\n        <Tooltip\n          style={{ top: d.absoluteTop, left: d.left }}\n        >\n          {d.tooltipText}\n        </Tooltip>,\n      );\n    }\n    const LinkRoot = mobileMenuOpen || !collapsed ? NavLink : CollapsedLink;\n    return (\n      <LinkRoot\n        to={url}\n        key={d.label + d.url}\n        style={{top: d.top, left: d.left}}\n        className={className}\n        onClick={() => mobileMenu ? setMobileMenuOpen(false) : null}\n      >\n        {d.label}\n        {beta}\n      </LinkRoot>\n    );\n  });\n\n  const mobileMenu = windowDimensions.width <= breakPointValues.width.small ||\n                     windowDimensions.height <= breakPointValues.height.small ? (\n     <MobileMenu\n       baseLinkData={baseLinkData}\n       mobileMenuOpen={mobileMenuOpen}\n       toggleMenu={() => setMobileMenuOpen(current => !current)}\n       closeMenu={() => setMobileMenuOpen(false)}\n     />\n   ) : null;\n\n  const collapseButton = containerHovered\n    ? <CollapseButton onClick={() => setCollapsed(true)}>{'<'} Collapse</CollapseButton>\n    : null;\n\n\n  const menu = mobileMenuOpen || !collapsed ? (\n    <Root\n      ref={rootRef}\n      style={{\n        display: mobileMenuOpen ? 'block' : undefined,\n      }}\n      className={collapsibleMenuClassName}\n    >\n      {collapseButton}\n      <LinkContainer>\n      {links}\n      </LinkContainer>\n      <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 70 377.85'>\n        <clipPath id={clipPathIdDesktop}>\n          <path\n            d='M0,0v0.8C41.6,35.5,68.3,112,64.4,199.4C61,274.8,35.6,340.1,0,376.4l0,4.4h366.4V0H0z'\n          />\n        </clipPath>\n        <clipPath id={clipPathIdTablet}>\n          <path\n            d='M0,0v0.6c30.7,25.5,50.4,81.9,47.5,146.3C44.9,202.5,26.2,250.6,0,277.3l0,3.2h270V0H0z'\n          />\n        </clipPath>\n        <path\n          d='M569.33,197.85c42.17,34.26,69.37,111.25,65.4,199.38-3.4,75.47-28.83,140.75-64.37,177'\n          transform='translate(-568.7 -197.07)'\n        />\n        <circle ref={circle_0} cx='20.1' cy='20.4' r={radius}/>\n        <circle ref={circle_1} cx='53.4' cy='90.1' r={radius}/>\n        <circle ref={circle_2} cx='65.7' cy='184.6' r={radius}/>\n        <circle ref={circle_3} cx='55.8' cy='269.3' r={radius}/>\n        <circle ref={circle_4} cx='25.3' cy='347' r={radius}/>\n      </svg>\n    </Root>\n  ) : (\n    <CollapsedMenu>\n      <ExpandButton onClick={() => setCollapsed(false)}>\n        Extend\n        <ExtendArrow>{'>'}</ExtendArrow>\n      </ExpandButton>\n      {links}\n    </CollapsedMenu>\n  );\n\n  return (\n    <>\n      <Container\n        onMouseEnter={() => setContainerHovered(true)}\n        onMouseLeave={() => setContainerHovered(false)}\n      >\n        {mobileMenu}\n        {menu}\n      </Container>\n      {tooltips}\n    </>\n  );\n};\n\nexport default SideNavigation;\n","import React, {useState} from 'react';\nimport Header from '../navigation/header';\nimport SecondaryHeader from '../navigation/secondaryHeader';\nimport SideNavigation, {\n  Props as NavProps,\n} from '../navigation/sideNav';\nimport {\n  Root as RootBase,\n  ContentContainer,\n} from '../../styling/GlobalGrid';\nimport styled from 'styled-components/macro';\n\nconst Root = styled(RootBase)`\n  pointer-events: none;\n`;\n\ntype Props = NavProps & {\n  children: React.ReactNode;\n};\n\nconst InnerPage = (props: Props) => {\n  const {\n    children, baseLinkData,\n  } = props;\n  const [collapsed, setCollapsed] = useState<boolean>(false);\n  return (\n    <Root>\n      <Header />\n      <SecondaryHeader />\n      <SideNavigation\n        baseLinkData={baseLinkData}\n        collapsed={collapsed}\n        setCollapsed={setCollapsed}\n      />\n      <ContentContainer key={'container-collapsed-' + collapsed}>\n        {children}\n      </ContentContainer>\n    </Root>\n  );\n};\n\nexport default InnerPage;\n","import React from 'react';\nimport {\n  primaryFont,\n} from '../../../styling/styleUtils';\nimport styled, {css} from 'styled-components/macro';\nimport GrowthLabLogoPNG from '../../../assets/branding/growth-lab-dark.png';\nimport CityverseLogoSVG from '../../../assets/icons/cities-logo-dark.svg';\nimport FacebookIconSVG from './assets/facebook.svg';\nimport TwitterIconSVG from './assets/twitter.svg';\nimport LinkedinIconSVG from './assets/linkedin.svg';\nimport YouTubeIconSVG from './assets/youtube.svg';\nimport ApplePodcastSVG from './assets/applepodcast.svg';\nimport {Routes} from '../../../routing/routes';\nimport {Link} from 'react-router-dom';\n\nconst Root = styled.div`\n  grid-column: 1 / -1;\n  grid-row: -1;\n  color: #333;\n`;\n\nconst Container = styled.div`\n  padding: 2rem 2rem 2rem;\n  background-color: #e6e6e6;\n`;\n\nconst smallMediaWidth = 900; // in px\n\nconst Content = styled.div`\n  display: grid;\n  grid-column-gap: 3rem;\n  grid-template-columns: 2fr auto auto minmax(auto, 1fr) 2fr;\n  max-width: 1200px;\n  margin: 0 auto;\n\n  @media (max-width: 1200px) {\n    grid-template-columns: 2fr auto auto auto 2fr;\n  }\n  @media (max-width: 1000px) {\n    grid-column-gap: 1.5rem;\n  }\n  @media (max-width: ${smallMediaWidth}px) {\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto auto auto auto;\n  }\n`;\n\nconst ColumnOrRow = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1rem;\n`;\n\nconst GrowthLabLogo = styled.img`\n  width: 180px;\n  max-width: 100%;\n  height: 100%;\n  margin-top: -0.75rem;\n\n  @media (max-width: 920px) {\n    width: 180px;\n  }\n`;\n\nconst CityverseLogo = styled.img`\n  width: 250px;\n  max-width: 100%;\n  height: 100%;\n`;\n\nconst Subtitle = styled.h4`\n  margin: 0.25rem 0 0;\n  font-weight: 400;\n  text-transform: none;\n  font-size: 0.865rem;\n  text-decoration: none;\n  color: #333;\n`;\n\nconst CenteredColumn = styled(ColumnOrRow)`\n  justify-content: flex-start;\n  margin-bottom: 0;\n`;\n\nconst SocialColumn = styled(ColumnOrRow)`\n  @media (max-width: ${smallMediaWidth}px) {\n    grid-column: 1 / -1;\n    grid-row: 4;\n    flex-direction: row;\n    padding: 3rem 0 0;\n  }\n`;\n\nconst InternalLinksColumn = styled(ColumnOrRow)`\n  display: flex;\n  flex-direction: column;\n\n  @media (max-width: ${smallMediaWidth}px) {\n    grid-column: 1;\n    grid-row: 2;\n    padding: 2rem 0 0;\n    display: flex;\n    align-items: center;\n    text-align: center;\n  }\n`;\n\nconst ExternalLinksColumn = styled(ColumnOrRow)`\n  display: flex;\n  flex-direction: column;\n\n  @media (max-width: ${smallMediaWidth}px) {\n    grid-column: 2;\n    grid-row: 2;\n    padding: 2rem 0 0;\n    display: flex;\n    align-items: center;\n    text-align: center;\n  }\n`;\n\nconst CityverseLogoColumn = styled(CenteredColumn)`\n  display: flex;\n  align-items: center;\n  text-align: center;\n\n  @media (max-width: ${smallMediaWidth}px) {\n    grid-column: 1 / -1;\n    grid-row: 1;\n  }\n`;\n\nconst LogoColumn = styled(CenteredColumn)`\n  display: flex;\n  align-items: flex-start;\n  justify-content: flex-start;\n\n  @media (max-width: ${smallMediaWidth}px) {\n    grid-column: 1 / -1;\n    grid-row: 3;\n    align-items: center;\n  }\n`;\n\nconst GrowthLabInfo = styled.small`\n  margin-top: 1rem;\n  width: 100%;\n  max-width: 300px;\n  font-family: ${primaryFont};\n  font-size: 0.75rem;\n`;\n\n\nconst SocialLink = styled.a`\n  width: 1.45rem;\n  margin: 0 auto 0.5rem;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst Icon = styled.img`\n  max-width: 100%;\n`;\n\nconst linkStyles = css`\n  color: #333;\n  text-decoration: none;\n  text-transform: uppercase;\n  margin-bottom: 0.5rem;\n\n  &:hover {\n    text-decoration: underline;\n  }\n\n  @media (max-width: 1000px) {\n    font-size: 0.75rem;\n  }\n`;\n\nconst StyledInternalLink = styled(Link)`\n  ${linkStyles}\n`;\nconst StyledExternalLink = styled.a`\n  ${linkStyles}\n`;\n\nconst LicenseAndReadme = styled.div`\n  padding: 0.5rem;\n  text-align: center;\n  background-color: #333;\n  color: #fff;\n  font-size: 0.875rem;\n  margin-bottom: 0;\n\n  a {\n    color: #fff;\n    text-decoration: none;\n    border-bottom: solid 1px transparent;\n\n    &:hover {\n      border-bottom-color: #fff;\n    }\n  }\n`;\n\nenum SocialType {\n  facebook = 'facebook',\n  twitter = 'twitter',\n  linkedin = 'linkedin',\n  youtube = 'youtube',\n  applepodcast = 'applepodcast',\n}\n\n\nconst defaultSocialIcons = [\n  {\n    target: 'https://www.facebook.com/HarvardCID/',\n    type: SocialType.facebook,\n    alt: 'facebook',\n  },\n  {\n    target: 'https://www.linkedin.com/company/center-for-international-development-harvard-university/',\n    type: SocialType.linkedin,\n    alt: 'linkedin',\n  },\n  {\n    target: 'https://twitter.com/HarvardGrwthLab',\n    type: SocialType.twitter,\n    alt: 'twitter',\n  },\n  {\n    target: 'https://www.youtube.com/user/HarvardCID',\n    type: SocialType.youtube,\n    alt: 'youtube',\n  },\n  {\n    target: 'https://podcasts.apple.com/us/podcast/growth-lab-podcast-series/id1486218164',\n    type: SocialType.applepodcast,\n    alt: 'apple podcast',\n  },\n];\n\nconst socialIcon = {\n  facebook: FacebookIconSVG,\n  twitter: TwitterIconSVG,\n  linkedin: LinkedinIconSVG,\n  youtube: YouTubeIconSVG,\n  applepodcast: ApplePodcastSVG,\n};\n\nconst StandardFooter = () => {\n  const socialItems = defaultSocialIcons;\n\n  const socialItemsList = socialItems.map(({target, type, alt}) =>{\n    return (\n      <SocialLink\n        href={target}\n        target='_blank'\n        rel='noopener noreferrer'\n        key={target + type}\n      >\n        <Icon\n          src={socialIcon[type]}\n          title={alt ? alt : ''}\n          alt={alt ? alt : ''}\n        />\n      </SocialLink>\n    );\n  });\n\n  return (\n    <Root>\n      <Container>\n        <Content>\n          <CityverseLogoColumn>\n            <Link to={Routes.Landing}>\n              <CityverseLogo\n                src={CityverseLogoSVG}\n                alt={'The Growth Lab\\'s Metroverse'}\n              />\n            </Link>\n            <Subtitle>\n              The Growth Lab's Urban Economy Navigator\n            </Subtitle>\n          </CityverseLogoColumn>\n          <InternalLinksColumn>\n            <StyledInternalLink to={Routes.Landing}>\n              City Profiles\n            </StyledInternalLink>\n            <StyledInternalLink to={Routes.AboutBase}>\n              About\n            </StyledInternalLink>\n            <StyledInternalLink to={Routes.ContactBase}>\n              Contact\n            </StyledInternalLink>\n            <StyledInternalLink to={Routes.FaqBase}>\n              FAQ\n            </StyledInternalLink>\n          </InternalLinksColumn>\n          <ExternalLinksColumn>\n            <StyledExternalLink href={'https://hksexeced.tfaforms.net/f/subscribe?s=a1n6g000000nJnxAAE'}>\n              Newsletter\n            </StyledExternalLink>\n            <StyledExternalLink\n              href='https://growthlab.app/'\n              target='_blank' rel='noopener noreferrer'\n            >\n              Viz Hub\n            </StyledExternalLink>\n            <StyledExternalLink\n              href='https://growthlab.cid.harvard.edu/'\n              target='_blank' rel='noopener noreferrer'\n            >\n              Growth Lab\n            </StyledExternalLink>\n          </ExternalLinksColumn>\n          <SocialColumn>\n            {socialItemsList}\n          </SocialColumn>\n          <LogoColumn>\n            <a\n              href='https://growthlab.cid.harvard.edu/'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              <GrowthLabLogo\n                src={GrowthLabLogoPNG}\n                alt={'The Growth Lab at Harvard\\'s Center for International Development'}\n              />\n            </a>\n            <GrowthLabInfo>\n              Center for International Development at Harvard University<br />\n              79 JFK St. | Mailbox 34 | Cambridge, MA 02138<br />\n              617-495-4112 | cid@harvard.edu\n            </GrowthLabInfo>\n          </LogoColumn>\n        </Content>\n      </Container>\n      <LicenseAndReadme>\n        <div>\n          Harvard Growth Lab’s digital tools are licensed under <a href='https://creativecommons.org/licenses/by-nc-sa/4.0/' target='_blank' rel='noopener noreferrer'>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)</a>.\n        </div>\n        <div style={{marginTop: '0.4rem'}}>\n          Copyright © {new Date().getFullYear()} The President and Fellows of Harvard College\n          {' | '}\n          <a href='https://gdpr.harvard.edu/eeaprivacydisclosures' target='_blank' rel='noopener noreferrer'>\n            Privacy\n          </a>\n          {' | '}\n          <a href='http://accessibility.harvard.edu/' target='_blank' rel='noopener noreferrer'>\n            Accessibility\n          </a>\n          {' | '}\n          <a href='https://accessibility.huit.harvard.edu/digital-accessibility-policy' target='_blank' rel='noopener noreferrer'>\n            Digital Accessibility\n          </a>\n          {' | '}\n          <a href='http://www.harvard.edu/reporting-copyright-infringements' target='_blank' rel='noopener noreferrer'>\n            Report Copyright\n          </a>\n        </div>\n      </LicenseAndReadme>\n    </Root>\n  );\n};\n\nexport default StandardFooter;\n","import {useEffect} from 'react';\nimport {useMapContext} from 'react-city-space-mapbox';\nimport useLayoutData, {defaultRadius} from './useLayoutData';\nimport useCurrentCityId from '../../../hooks/useCurrentCityId';\nimport {createProximityScale} from './Utils';\nimport useProximityData from './useProximityData';\nimport useQueryParams from '../../../hooks/useQueryParams';\nimport {\n  CityNodeSizing,\n  defaultCityNodeSizing,\n} from '../../../routing/routes';\nimport {scaleLinear} from 'd3-scale';\nimport {extent} from 'd3-array';\nimport mapboxgl from 'mapbox-gl';\n\nlet previousCityId: string | undefined;\n\nconst MapOptionsAndSettings = () => {\n  const mapContext = useMapContext();\n\n  const {data} = useLayoutData();\n  const cityId = useCurrentCityId();\n  const {city_node_sizing} = useQueryParams();\n\n  const {data: proximityData} = useProximityData();\n\n  useEffect(() => {\n    if (mapContext.intialized) {\n      mapContext.map.addControl(new mapboxgl.NavigationControl());\n      mapContext.map.scrollZoom.disable();\n    }\n  }, [mapContext]);\n\n  useEffect(() => {\n    if (mapContext.intialized && data && cityId) {\n      const currentCityFeature = data.cityGeoJson.features.find(({properties}: {properties: {id: number}}) => properties.id.toString() === cityId);\n      if (currentCityFeature) {\n        if (cityId !== previousCityId) {\n          previousCityId = cityId;\n          mapContext.setNewCenter(currentCityFeature.geometry.coordinates);\n        }\n        mapContext.setHighlighted(cityId);\n      }\n    }\n  }, [mapContext, data, cityId]);\n\n  useEffect(() => {\n    if (mapContext.intialized && proximityData && cityId) {\n      // const allValues: number[] = [];\n      // proximityData.cities.forEach(d => d && d.eucdist !== null ? allValues.push(d.eucdist) : false);\n      const colorScale = createProximityScale([\n        proximityData.cityPartnerEucdistScale.p20GlobalEucdist,\n        proximityData.cityPartnerEucdistScale.p40GlobalEucdist,\n        proximityData.cityPartnerEucdistScale.p60GlobalEucdist,\n        proximityData.cityPartnerEucdistScale.p80GlobalEucdist,\n      ]);\n      const proximityColorMap = proximityData.cities.map(({partnerId, eucdist}) => ({\n        id: partnerId,\n        color: colorScale(eucdist ? eucdist : 100),\n      }));\n      proximityColorMap.push({id: cityId, color: 'gray'});\n      mapContext.setColors(proximityColorMap);\n    }\n  }, [mapContext, data, proximityData, cityId]);\n\n  useEffect(() => {\n    if (mapContext.intialized && data && cityId) {\n      const nodeSize = city_node_sizing ? city_node_sizing : defaultCityNodeSizing;\n      if (nodeSize === CityNodeSizing.population) {\n        const allPopulationValues = data.cityGeoJson.features.map((f: any) => f.properties.population);\n        const minMaxPopulation = extent(allPopulationValues) as unknown as [number, number];\n        const populationScale = scaleLinear()\n            .domain(minMaxPopulation)\n            .range([24, 100]);\n        const populationSizeByMap = data.cityGeoJson.features.map((f: any) => ({\n          id: f.properties.id,\n          radius: populationScale(f.properties.population),\n        }));\n        mapContext.setNodeSizing(populationSizeByMap);\n      } else if (nodeSize === CityNodeSizing.gdpPpp) {\n        const allGdpPppValues = data.cityGeoJson.features.map((f: any) => f.properties.gdppc);\n        const minMaxGdpPpp = extent(allGdpPppValues) as unknown as [number, number];\n        const gdpPppScale = scaleLinear()\n            .domain(minMaxGdpPpp)\n            .range([16, 50]);\n        const gdpPppSizeByMap = data.cityGeoJson.features.map((f: any) => ({\n          id: f.properties.id,\n          radius: gdpPppScale(f.properties.gdppc),\n        }));\n        mapContext.setNodeSizing(gdpPppSizeByMap);\n      } else {\n        const uniformSizeByMap = data.cityGeoJson.features.map((f: any) => ({\n          id: f.properties.id,\n          radius: defaultRadius,\n        }));\n        mapContext.setNodeSizing(uniformSizeByMap);\n      }\n    }\n  }, [mapContext, data, city_node_sizing, cityId]);\n\n  return null;\n};\n\nexport default MapOptionsAndSettings;","import React from 'react';\nimport Header from '../../navigation/header';\nimport {\n  InformationalPageRoot as RootBase,\n  ContentContainer,\n  breakPoints,\n} from '../../../styling/GlobalGrid';\nimport {\n  primaryColorDark,\n  primaryHoverColor,\n  lightBaseColor,\n  baseColor,\n} from '../../../styling/styleUtils';\nimport styled from 'styled-components/macro';\nimport Footer from './Footer';\n\nexport const rootId = 'infromational-page-root-scroll-id';\n\nconst Root = styled(RootBase)`\n  overflow: auto;\n`;\n\nconst ContentStandard = styled(ContentContainer)`\n  display: grid;\n  padding: 1rem;\n  grid-template-columns: auto 15rem;\n  grid-column-gap: 5rem;\n  max-width: 950px;\n  width: 100%;\n  box-sizing: border-box;\n  margin: 0 auto;\n  position: relative;\n\n  h3 {\n    color: ${baseColor};\n  }\n\n  h4 {\n    color: ${lightBaseColor};\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n  }\n\n  p a, h4 a {\n    color: ${primaryColorDark};\n\n    &:hover {\n      color: ${primaryHoverColor};\n    }\n  }\n\n  li {\n    margin-bottom: 0.5rem;\n  }\n\n  cite {\n    display: block;\n    margin: 2rem 0 2rem;\n    font-style: normal;\n    padding-left: 0.875rem;\n    border-left: solid 1px #dfdfdf;\n    color: ${lightBaseColor};\n  }\n\n  @media (max-width: 760px) {\n    grid-template-columns: auto 8rem;\n    grid-column-gap: 1rem;\n  }\n\n  @media (max-width: 400px) {\n    grid-template-columns: auto 4rem;\n    grid-column-gap: 0.75rem;\n  }\n\n  @media ${breakPoints.small} {\n    height: initial;\n  }\n`;\n\nconst ContentFull = styled(ContentContainer)`\n  padding: 1rem;\n  width: 100%;\n  position: relative;\n  box-sizing: border-box;\n`;\n\ninterface Props {\n  children: React.ReactNode;\n  contentFull?: boolean;\n}\n\nconst InformationalPage = (props: Props) => {\n  const {\n    children, contentFull,\n  } = props;\n  const Content = contentFull ? ContentFull : ContentStandard;\n  return (\n    <Root id={rootId}>\n      <Header />\n      <Content>\n        {children}\n      </Content>\n      <Footer />\n    </Root>\n  );\n};\n\nexport default InformationalPage;\n","import React, {useState, useEffect, useCallback, useMemo, useRef} from 'react';\nimport { createPortal } from 'react-dom';\nimport styled from 'styled-components/macro';\nimport {\n  primaryColor,\n  backgroundDark,\n  baseColor,\n  primaryFont,\n  lightBaseColor,\n} from '../../../styling/styleUtils';\nimport useFluent from '../../../hooks/useFluent';\nimport ReactSlider from 'react-slider';\nimport MultiSelect from '@khanacademy/react-multi-select';\nimport {formatNumber} from '../../../Utils';\nimport {useMapContext} from 'react-city-space-mapbox';\nimport {scaleSymlog} from 'd3-scale';\nimport {joyrideClassNames} from '../../navigation/secondaryHeader/guide/CitiesGuide';\nimport Tooltip from '../../general/Tooltip';\n\nexport const filterBarId = 'similar-cities-filter-bar-id';\n\nconst medGray = '#9DA0A4';\n\nconst Settings = styled.div`\n  padding: 0.35rem 0.75rem 1rem;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ExpandBox = styled.div`\n  flex-grow: 1;\n  margin-bottom: 1rem;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst slideRootClassName = 'react-slider-root-class';\nconst slideThumbClassName = 'react-slider-thumb-class';\nconst slideTrackClassName = 'react-slider-track-class';\n\nconst SliderContainer = styled.div`\n  margin-top: 1.5rem;\n  position: relative;\n  height: 2.5rem;\n\n  .${slideThumbClassName} {\n    background-color: ${primaryColor};\n    height: 1rem;\n    width: 1rem;\n    border-radius: 1000px;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    outline: none;\n\n    span {\n      color: ${primaryColor};\n      transform: translateY(-100%);\n    }\n  }\n  .${slideThumbClassName}-0 {\n    transform: translateX(-0.1rem);\n  }\n  .${slideTrackClassName} {\n    margin-top: 0.25rem;\n  }\n  .${slideTrackClassName}-0 {\n    background-color: ${medGray};\n    height: 0.5rem;\n  }\n  .${slideTrackClassName}-1 {\n    background-color: ${backgroundDark};\n    height: 0.5rem;\n  }\n  .${slideTrackClassName}-2 {\n    background-color: ${medGray};\n    height: 0.5rem;\n  }\n`;\n\nconst SelectBoxContainer = styled.div`\n  margin-top: 0.3rem;\n  position: relative;\n  z-index: 10;\n\n  .multi-select {\n    .dropdown {\n      .dropdown-heading {\n        border-radius: 0 !important;\n        border-color: ${backgroundDark} !important;\n        color: ${baseColor} !important;\n        background-color: transparent !important;\n        ::placeholder, span {\n          color: ${baseColor} !important;\n          opacity: 1;\n        }\n        .dropdown-heading-dropdown-arrow span {\n          border-color: ${baseColor} transparent transparent !important;\n        }\n      }\n      .dropdown-content {\n        font-family: ${primaryFont} !important;\n        border-color: ${lightBaseColor} !important;\n        input {\n          border-radius: 0 !important;\n          border-color: ${lightBaseColor} !important;\n          font-family: ${primaryFont} !important;\n        }\n        .select-item {\n          color: ${baseColor} !important;\n\n          &:hover {\n            background-color: ${medGray} !important;\n          }\n        }\n      }\n    }\n    .dropdown[aria-expanded=\"true\"] {\n      .dropdown-heading {\n        .dropdown-heading-dropdown-arrow span {\n          border-color: transparent transparent ${baseColor} !important;\n        }\n      }\n    }\n  }\n  .item-renderer {\n    display: flex;\n    align-items: center;\n  }\n`;\n\nconst CityMark = styled.div`\n  position: absolute;\n  top: 0;\n  font-size: 0.775rem;\n  text-transform: uppercase;\n  font-weight: 600;\n  color: ${lightBaseColor};\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  white-space: nowrap;\n\n  &:before {\n    content: '';\n    position: absolute;\n    width: 0;\n    border-left: solid 3px ${lightBaseColor};\n    height: 0.75rem;\n    top: 0.25rem;\n  }\n`;\n\nconst CityName = styled.div`\n  transform: translate(0, 100%);\n  position: absolute;\n`;\n\nconst ResetSettingsBtn = styled.button`\n  max-width: min-content;\n  white-space: nowrap;\n  text-transform: uppercase;\n  font-size: 0.6rem;\n  font-weight: 600;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 1rem;\n  color: ${baseColor};\n  background-color: ${medGray};\n  transition: outline 0.1s ease-in-out;\n  outline: solid 0px ${medGray};\n  padding: 0.6rem 1rem;\n\n  &:hover,\n  &:focus {\n    outline: solid 2px ${medGray};\n  }\n`;\n\nconst selectBoxValueRenderer = (type: 'Countries' | 'Regions') => (selected: any, allOptions: any) => {\n  if (selected.length === 0 || selected.length === allOptions.length) {\n    return 'All ' + type;\n  }\n\n  return selected.length === 1 ? selected.label : `${selected.length} ${type} Selected`;\n};\n\ninterface FilterValues {\n  selectedRegionIds:  string[];\n  selectedCountryIds:  string[];\n  minMaxPopulation: [number, number];\n  minMaxGdppc: [number, number];\n}\n\ninterface Props {\n  populationMin: number;\n  populationMax: number;\n  gdppcMin: number;\n  gdppcMax: number;\n  regions: {label: string, value: string}[];\n  countries: {label: string, value: string, regionId: string}[];\n  setFilterValues: (value: FilterValues) => void;\n  currentCity: {city: string, population: number, gdppc: number} | undefined;\n}\n\ninterface ThumbState {\n  index: number;\n  value: number | number[];\n  valueNow: number;\n}\n\nconst FilterBar = (props: Props) => {\n  const {\n    populationMin, populationMax, gdppcMin, gdppcMax,\n    regions, setFilterValues, currentCity, countries,\n  } = props;\n  const mapContext = useMapContext();\n  const getString = useFluent();\n  const [selectedRegionIds, setSelectedRegionIds] = useState<string[]>([]);\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const [minMaxPopulation, setMinMaxPopulation] = useState<[number, number]>([0, 100]);\n  const [minMaxGdppc, setMinMaxGdppc] = useState<[number, number]>([0 , 100]);\n\n  const cityPopTitle = useRef<HTMLDivElement | null>(null);\n  const cityGdpTitle = useRef<HTMLDivElement | null>(null);\n\n  const gdpLogScale = useCallback(\n    scaleSymlog().domain([gdppcMin, gdppcMax]).range([0, 100]),\n    [gdppcMin, gdppcMax],\n  );\n  const popLogScale = useCallback(\n    scaleSymlog().domain([populationMin, populationMax]).range([0, 100]),\n    [populationMin, populationMax],\n  );\n\n  const currentGdpPercent = useMemo(\n    () => currentCity ? gdpLogScale(currentCity.gdppc) : 0,\n    [currentCity, gdpLogScale],\n  );\n  const currentPopPercent = useMemo(\n    () => currentCity ? popLogScale(currentCity.population) : 0,\n    [currentCity, popLogScale],\n  );\n  const currentCityName = currentCity ? currentCity.city : '';\n\n  const setDefaultPopulation = useCallback(() => {\n    const rawPopulation = popLogScale.invert(currentPopPercent as number);\n    let defaultMinPop = popLogScale(rawPopulation / 2) as number;\n    if (defaultMinPop < 0) {\n      defaultMinPop = 0;\n    }\n    let defaultMaxPop = popLogScale(rawPopulation * 2) as number;\n    if (defaultMaxPop > 100) {\n      defaultMaxPop = 100;\n    }\n    setMinMaxPopulation([defaultMinPop, defaultMaxPop]);\n\n  }, [currentPopPercent, popLogScale]);\n\n  useEffect(() => {\n    const titleNode = cityPopTitle.current;\n    const container = document.getElementById(filterBarId);\n    if (titleNode && container) {\n      const boundingRect = titleNode.getBoundingClientRect();\n      const containerRect = container.getBoundingClientRect();\n      if (boundingRect.left < 0) {\n        titleNode.style.left = '0px';\n      } else if (boundingRect.right > containerRect.width) {\n        titleNode.style.right = '0px';\n        titleNode.style.left = 'auto';\n      } else {\n        titleNode.style.left = '';\n        titleNode.style.right = '';\n      }\n    }\n  }, [cityPopTitle, currentPopPercent]);\n\n  useEffect(() => {\n    const titleNode = cityGdpTitle.current;\n    const container = document.getElementById(filterBarId);\n    if (titleNode && container) {\n      const boundingRect = titleNode.getBoundingClientRect();\n      const containerRect = container.getBoundingClientRect();\n      if (boundingRect.left < 0) {\n        titleNode.style.left = '0px';\n      } else if (boundingRect.right > containerRect.width) {\n        titleNode.style.right = '0px';\n        titleNode.style.left = 'auto';\n      } else {\n        titleNode.style.left = '';\n        titleNode.style.right = '';\n      }\n    }\n  }, [cityGdpTitle, currentGdpPercent]);\n\n  useEffect(() => {\n    setDefaultPopulation();\n  }, [setDefaultPopulation]);\n\n  const resetSettings = () => {\n    setSelectedRegionIds([]);\n    setSelectedCountryIds([]);\n    setMinMaxGdppc([0 , 100]);\n    setDefaultPopulation();\n  };\n\n  useEffect(() => {\n    if (mapContext.intialized) {\n      const convertedGdpPpc = minMaxGdppc.map(n => gdpLogScale.invert(n)) as [number, number];\n      const convertedPop = minMaxPopulation.map(n => popLogScale.invert(n)) as [number, number];\n      mapContext.setFilterParamaters(convertedPop, convertedGdpPpc, selectedRegionIds, selectedCountryIds);\n      setFilterValues({\n        minMaxPopulation: convertedPop,\n        minMaxGdppc: convertedGdpPpc,\n        selectedRegionIds, selectedCountryIds});\n    }\n  }, [\n    mapContext, popLogScale, gdpLogScale,\n    gdppcMin, gdppcMax, populationMin, populationMax,\n    minMaxPopulation, minMaxGdppc,\n    selectedRegionIds, setFilterValues, selectedCountryIds,\n  ]);\n\n  const thumbRender = (type: 'gdp' | 'pop') => (p: React.HTMLProps<HTMLDivElement>, state: ThumbState) => {\n    const scale = type === 'pop' ? popLogScale.invert : gdpLogScale.invert;\n    const $ = type === 'pop' ? '' : '$';\n    const value = scale(state.valueNow);\n    const decimalPlaces = value > 999999 && value < 9999999 ? 1 : 0;\n    const formatted = formatNumber(value, decimalPlaces);\n    return <small {...p}><span>{$}{formatted}</span></small>;\n  };\n\n  const node = document.getElementById(filterBarId) as HTMLDivElement | null;\n  if (node) {\n    const countryOptions = countries.filter(d => !selectedRegionIds.length || selectedRegionIds.includes(d.regionId));\n    return createPortal((\n      <div className={joyrideClassNames.filterOptions}>\n        <Settings>\n          <ExpandBox>\n            <Title>\n              {getString('global-text-population')}\n              <Tooltip\n                explanation={getString('global-text-population-about')}\n              />\n            </Title>\n            <SliderContainer>\n              <CityMark style={{left: currentPopPercent + '%'}}>\n                <CityName ref={cityPopTitle}>\n                  {currentCityName}\n                </CityName>\n              </CityMark>\n              <ReactSlider\n                className={slideRootClassName}\n                thumbClassName={slideThumbClassName}\n                trackClassName={slideTrackClassName}\n                value={minMaxPopulation}\n                renderThumb={thumbRender('pop')}\n                max={100}\n                min={0}\n                onAfterChange={v => setMinMaxPopulation(v as [number, number])}\n              />\n            </SliderContainer>\n          </ExpandBox>\n          <ExpandBox>\n            <Title>\n              {getString('global-text-gdp-per-capita')}\n              <Tooltip\n                explanation={getString('global-text-gdp-per-capita-about')}\n              />\n            </Title>\n            <SliderContainer>\n              <CityMark style={{left: currentGdpPercent + '%'}}>\n                <CityName ref={cityGdpTitle}>\n                  {currentCityName}\n                </CityName>\n              </CityMark>\n              <ReactSlider\n                className={slideRootClassName}\n                thumbClassName={slideThumbClassName}\n                trackClassName={slideTrackClassName}\n                value={minMaxGdppc}\n                renderThumb={thumbRender('gdp')}\n                max={100}\n                min={0}\n                onAfterChange={v => setMinMaxGdppc(v as [number, number])}\n              />\n            </SliderContainer>\n          </ExpandBox>\n          <ExpandBox>\n            {getString('city-filter-regions')}\n            <SelectBoxContainer style={{zIndex: 20}}>\n              <MultiSelect\n                options={regions}\n                selected={selectedRegionIds}\n                onSelectedChanged={(s: string[]) => setSelectedRegionIds(s)}\n                valueRenderer={selectBoxValueRenderer('Regions')}\n                disableSearch={true}\n              />\n            </SelectBoxContainer>\n          </ExpandBox>\n          <ExpandBox>\n            {getString('city-filter-countries')}\n            <SelectBoxContainer>\n              <MultiSelect\n                options={countryOptions}\n                selected={selectedCountryIds}\n                onSelectedChanged={(s: string[]) => setSelectedCountryIds(s)}\n                valueRenderer={selectBoxValueRenderer('Countries')}\n              />\n            </SelectBoxContainer>\n          </ExpandBox>\n          <ResetSettingsBtn onClick={resetSettings}>\n            {getString('global-ui-options-reset')}\n          </ResetSettingsBtn>\n        </Settings>\n      </div>\n    ), node);\n  }\n\n  return null;\n};\n\nexport default FilterBar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport useFluent from '../../../../hooks/useFluent';\nimport { CityNodeSizing, defaultCityNodeSizing } from '../../../../routing/routes';\nimport { baseColor, primaryFont } from '../../../../styling/styleUtils';\nimport queryString from 'query-string';\nimport useQueryParams from '../../../../hooks/useQueryParams';\nimport { useHistory } from 'react-router-dom';\nimport googleAnalyticsEvent from '../../../../components/analytics/googleAnalyticsEvent';\n\nconst Root = styled.div`\n  padding: 0.35rem 0.75rem 1rem;\n`;\n\nconst SelectRoot = styled.div`\n  position: relative;\n\n  &::after {\n    content: '';\n    box-sizing: border-box;\n    border-color: ${baseColor} transparent transparent;\n    border-style: solid;\n    border-width: 5px 5px 2.5px;\n    display: inline-block;\n    height: 0px;\n    width: 0px;\n    position: absolute;\n    right: 0.7rem;\n    top: 0;\n    bottom: 0;\n    margin: auto;\n    pointer-events: none;\n  }\n`;\n\nconst Select = styled.select`\n  height: 2.2rem;\n  background-color: transparent;\n  border-radius: 0;\n  border: solid 1px ${baseColor};\n  color: ${baseColor};\n  width: 100%;\n  font-family: ${primaryFont};\n  padding: 0 10px;\n  font-size: 1rem;\n  -moz-appearance:none; /* Firefox */\n  -webkit-appearance:none; /* Safari and Chrome */\n  appearance:none;\n`;\n\nconst Settings = () => {\n  const getString = useFluent();\n  const params = useQueryParams();\n  const history = useHistory();\n  const nodeSizing = params.city_node_sizing ? params.city_node_sizing : defaultCityNodeSizing;\n\n  const updateSetting = (param: string, value: string | number) => {\n    const query = queryString.stringify({ ...params, [param]: value });\n    const newUrl = query ? history.location.pathname + '?' + query : history.location.pathname;\n    googleAnalyticsEvent('Viz Options', param, `${value}`);\n    history.push(newUrl);\n  };\n\n  const onChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    updateSetting('city_node_sizing', e.target.value);\n  };\n\n  return (\n    <Root>\n      <SelectRoot>\n        <Select onChange={onChange} value={nodeSizing}>\n          <option value={CityNodeSizing.population}>{getString('global-formatted-size-by', {type: CityNodeSizing.population})}</option>\n          <option value={CityNodeSizing.gdpPpp}>{getString('global-formatted-size-by', {type: CityNodeSizing.gdpPpp})}</option>\n          <option value={CityNodeSizing.uniform}>{getString('global-formatted-size-by', {type: CityNodeSizing.uniform})}</option>\n        </Select>\n      </SelectRoot>\n    </Root>\n  );\n};\n\nexport default Settings;","import CITIES_UMAPJSON_RAW from './data/cities-umap.json';\nimport {scaleLinear} from 'd3-scale';\nimport {extent} from 'd3-array';\nimport { useQuery, gql } from '@apollo/client';\nimport {point, featureCollection} from '@turf/helpers';\nimport {\n  ClassificationCountry,\n  ClassificationCity,\n  ClassificationRegion,\n} from '../../../types/graphQL/graphQLTypes';\nimport uniqBy from 'lodash/uniqBy';\nimport orderBy from 'lodash/orderBy';\n\nexport const defaultRadius = 20;\n\nconst GLOBAL_LOCATION_WITH_GEOMETRY_QUERY = gql`\n  query GetGlobalLocationData {\n    countries: classificationCountryList {\n      countryId\n      nameShortEn\n      regionId\n      id\n    }\n    cities: classificationCityList {\n      cityId\n      name\n      centroidLat\n      centroidLon\n      countryId\n      population: population15\n      gdppc\n      region: regionId\n      id\n    }\n    regions: classificationRegionList {\n      regionId\n      regionName\n    }\n  }\n`;\n\ninterface SuccessResponse {\n  countries: {\n    countryId: ClassificationCountry['countryId'],\n    nameShortEn: ClassificationCountry['nameShortEn'],\n    regionId: ClassificationCountry['regionId'],\n    id: ClassificationCountry['id'],\n  }[];\n  cities: {\n    cityId: ClassificationCity['cityId'],\n    name: ClassificationCity['name'],\n    centroidLat: ClassificationCity['centroidLat'],\n    centroidLon: ClassificationCity['centroidLon'],\n    countryId: ClassificationCity['countryId'],\n    population: ClassificationCity['population15'],\n    gdppc: ClassificationCity['gdppc'],\n    region: ClassificationCity['regionId'],\n    id: ClassificationCity['id'],\n  }[];\n  regions: {\n    regionId: ClassificationRegion['regionId'];\n    regionName: ClassificationRegion['regionName'];\n  }[];\n}\n\ninterface Output {\n  loading: boolean;\n  error: any | undefined;\n  data: {\n    cityGeoJson: any;\n    cityUMapJson: any;\n    regions: {label: string, value: string}[];\n    countries: {label: string, value: string, regionId: string}[];\n  } | undefined;\n}\n\nconst useLayoutData = (): Output => {\n  const {loading, error, data: responseData} = useQuery<SuccessResponse, never>(GLOBAL_LOCATION_WITH_GEOMETRY_QUERY);\n\n  let data: Output['data'];\n  if (responseData) {\n    const allLatCoords: number[] = [];\n    const allLngCoords: number[] = [];\n\n    const filteredResponseCities = responseData.cities;\n    // const filteredResponseCities = responseData.cities\n      // .filter(city => CITIES_UMAPJSON_RAW.find(umap => umap.ID_HDC_G0.toString() === city.cityId.toString()));\n\n    const filteredUMapCities = CITIES_UMAPJSON_RAW\n      .filter(umap => responseData.cities.find(city => umap.ID_HDC_G0.toString() === city.cityId.toString()));\n\n    const regions = uniqBy(responseData.regions, 'regionId')\n      .map(r => ({label: r.regionName, value: r.regionId}));\n\n    const countries: {label: string, value: string, regionId: string}[] = [];\n    const cityGeoJson = featureCollection(filteredResponseCities.map(city => {\n      const {name, centroidLat, centroidLon, cityId, countryId, population, gdppc} = city;\n      const coordinates: [number, number] = centroidLat && centroidLon ? [centroidLon, centroidLat] : [0, 0];\n      if (centroidLat) {\n        allLatCoords.push(centroidLat);\n      }\n      if (centroidLon) {\n        allLngCoords.push(centroidLon);\n      }\n      const targetCountry = responseData.countries.find(country => countryId !== null && country.countryId === countryId.toString());\n      if (targetCountry && !countries.find(country => countryId !== null && country.value === countryId.toString())) {\n        countries.push({\n          label: targetCountry.nameShortEn ? targetCountry.nameShortEn : '',\n          value: targetCountry.countryId,\n          regionId: targetCountry.regionId !== null ? targetCountry.regionId.toString() : '',\n        });\n      }\n      return point(coordinates, {\n        id: cityId,\n        country: targetCountry ? targetCountry.nameShortEn : '',\n        countryId: targetCountry ? targetCountry.countryId.toString() : '',\n        city: name,\n        fill: 'gray',\n        radius: defaultRadius,\n        population,\n        gdppc,\n        region: city.region,\n      });\n    }));\n\n    const uMapXCoords: number[] = [];\n    const uMapYCoords: number[] = [];\n    filteredUMapCities.forEach(({x, y}) => {\n      uMapXCoords.push(x);\n      uMapYCoords.push(y);\n    });\n\n    const minMaxLat = extent(allLatCoords) as [number, number];\n    const yToLatScale = scaleLinear()\n      .domain(extent(uMapYCoords) as [number, number])\n      .range([minMaxLat[0] * 1.65, minMaxLat[1] * 1.2]) as ((val: number) => number);\n\n    const minMaxLng = extent(allLngCoords) as [number, number];\n    const xToLngScale = scaleLinear()\n      .domain(extent(uMapXCoords) as [number, number])\n      .range([minMaxLng[0] * 0.9, minMaxLng[1] * 1]) as ((val: number) => number);\n\n    const cityUMapJson = featureCollection(filteredUMapCities.map(n => {\n      const {x, y, ID_HDC_G0: id, CTR_MN_NM: country, UC_NM_MN: city } = n;\n      const targetCity = filteredResponseCities.find(c => c.cityId.toString() === id.toString());\n      return point([xToLngScale(x), yToLatScale(y)], {\n        id: id.toString(),\n        country, city, fill: 'gray', radius: defaultRadius,\n        population: targetCity ? targetCity.population : 0,\n        gdppc: targetCity ? targetCity.gdppc : 0,\n        region: targetCity ? targetCity.region : null,\n      });\n    }));\n\n    data = {cityGeoJson, cityUMapJson, regions, countries: orderBy(countries, ['label'])};\n  }\n\n\n  return {loading, error, data};\n};\n\nexport default useLayoutData;\n","import { extent } from 'd3-array';\nimport React from 'react';\nimport useLayoutData from '../../../../components/dataViz/similarCitiesMap/useLayoutData';\nimport useQueryParams from '../../../../hooks/useQueryParams';\nimport { CityNodeSizing, defaultCityNodeSizing } from '../../../../routing/routes';\nimport { formatNumberLong } from '../../../../Utils';\nimport styled from 'styled-components';\nimport { lightBaseColor } from '../../../../styling/styleUtils';\n\nconst Root = styled.div`\n  width: 100%;\n  box-sizing: border-box;\n  padding: 1rem 0.75rem;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: auto auto;\n  align-items: center;\n  font-size: 0.85rem;\n  grid-column-gap: 1rem;\n  grid-row-gap: 1rem;\n`;\n\nconst ColumnBase = styled.div`\n  display: grid;\n  grid-template-columns: 2.25rem 1fr;\n  grid-column-gap: 0.45rem;\n  align-items: center;\n`;\n\nconst LeftColumn = styled(ColumnBase)`\n  grid-column: 1;\n`;\n\nconst NodeBase = styled.div`\n  border-radius: 5000px;\n  background-color: ${lightBaseColor};\n  border: solid 1px ${lightBaseColor};\n  margin: auto;\n  flex-shrink: 0;\n`;\n\nconst NodeSmall = styled(NodeBase)`\n  width: 0.5rem;\n  height: 0.5rem;\n`;\nconst NodeLarge = styled(NodeBase)`\n  width: 1.5rem;\n  height: 1.5rem;\n`;\n\nconst NodeSizeLegend = () => {\n  const { city_node_sizing } = useQueryParams();\n  const { data } = useLayoutData();\n\n  const nodeSizing = city_node_sizing ? city_node_sizing : defaultCityNodeSizing;\n  if (nodeSizing !== CityNodeSizing.uniform) {\n    let nodeSizingMinText: string | undefined;\n    let nodeSizingMaxText: string | undefined;\n    if (data && data.cityGeoJson) {\n      if (nodeSizing === CityNodeSizing.population) {\n        const [minPop, maxPop] = extent(\n          data.cityGeoJson.features.map((f: any) => f.properties.population)) as unknown as [number, number];\n        nodeSizingMinText = formatNumberLong(minPop ? minPop : 0);\n        nodeSizingMaxText = formatNumberLong(maxPop ? maxPop : 0);\n      } else if (nodeSizing === CityNodeSizing.gdpPpp) {\n        const [minGdpPpp, maxGdpPpp] = extent(\n          data.cityGeoJson.features.map((f: any) => f.properties.gdppc)) as unknown as [number, number];\n        nodeSizingMinText = '$' + formatNumberLong(minGdpPpp ? minGdpPpp : 0);\n        nodeSizingMaxText = '$' + formatNumberLong(maxGdpPpp ? maxGdpPpp : 0);\n      }\n    }\n\n    return (\n      <Root>\n        <LeftColumn style={{ gridRow: 1 }}>\n          <NodeLarge /> <div>{nodeSizingMaxText}</div>\n        </LeftColumn>\n        <LeftColumn style={{ gridRow: 2 }}>\n          <NodeSmall /> <div>{nodeSizingMinText}</div>\n        </LeftColumn>\n      </Root>\n    );\n  }\n  return null;\n};\n\nexport default NodeSizeLegend;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { baseColor, lightBorderColor, SearchContainerLight, secondaryFont } from '../../../../styling/styleUtils';\nimport { filterBarId } from '../../../../components/dataViz/similarCitiesMap/FilterBar';\nimport Settings from './Settings';\nimport useFluent from '../../../../hooks/useFluent';\nimport NodeSizeLegend from './NodeSizeLegend';\nimport { breakPoints } from '../../../../styling/GlobalGrid';\nimport CitySearch from '../../../../components/navigation/secondaryHeader/CitySearch';\n\nconst Root = styled.div`\n  grid-column: 1;\n  position: relative;\n\n  @media ${breakPoints.small} {\n    grid-row: 3;\n  }\n`;\n\nconst Content = styled.div`\n  position: sticky;\n  top: 1rem;\n  height: 100vh;\n  padding: 0 1rem 2rem 0;\n  box-sizing: border-box;\n\n  @media ${breakPoints.small} {\n    height: auto;\n  }\n`;\n\n  const ScrollContainer = styled.div`\n  height: 100%;\n  overflow: auto;\n  background-color: ${lightBorderColor};\n`;\n\nconst Divider = styled.div`\n  margin: 0.75rem;\n  border-top: solid 1px ${baseColor};\n`;\n\nconst SectionTitle = styled.h2`\n  padding: 0 0.75rem;\n  font-family: ${secondaryFont};\n`;\n\nconst SearchContainer = styled(SearchContainerLight)`\n  width: calc(100% - 1rem);\n  font-family: ${secondaryFont};\n  margin-bottom: 1.5rem;\n\n  .react-panel-search-search-bar-input {\n    padding: 0.7rem 1rem;\n    font-size: 1rem;\n  }\n\n  .react-panel-search-search-bar-search-icon {\n    display: none;\n  }\n\n`;\n\nconst FilterBar = () => {\n  const getString = useFluent();\n  return (\n    <Root>\n      <SearchContainer>\n        <CitySearch\n          searchContainerWidth={'clamp(200px, 100vw, 100%)'}\n        />\n      </SearchContainer>\n      <Content>\n        <ScrollContainer>\n          <SectionTitle>{getString('city-filter-title')}</SectionTitle>\n          <div id={filterBarId} />\n          <Divider />\n          <SectionTitle>{getString('global-ui-node-size')}</SectionTitle>\n          <Settings />\n          <NodeSizeLegend />\n        </ScrollContainer>\n      </Content>\n    </Root>\n  );\n};\n\nexport default FilterBar;\n","import {\n  scaleThreshold,\n} from 'd3-scale';\n\nexport const proximityColors = [\n   '#E3260E',\n   '#F99600',\n   '#F9E202',\n   '#47C774',\n   '#2E8CB9',\n];\n\nexport const createProximityScale = (values: [number, number, number, number]) => {\n  const scale: (val: number) => string = scaleThreshold()\n    .domain(values)\n    .range(proximityColors as any[]) as any;\n  return scale;\n};\n","import svgPathReverse from 'svg-path-reverse';\nimport {\n  drawPoint,\n  Ring,\n  ellipsisText,\n} from '../industrySpace/chart/Utils';\nimport * as d3 from 'd3';\nimport {\n  primaryColorLight,\n} from '../../../styling/styleUtils';\nimport {getStandardTooltip} from '../../../utilities/rapidTooltip';\nimport {rgba} from 'polished';\nimport {defaultYear} from '../../../Utils';\nimport {ordinalNumber} from '../../../hooks/useFluent';\n\nconst minExpectedScreenSize = 1020;\nexport const defaultNodeRadius = 14;\nfunction circlePath(cx: number, cy: number, r: number){\n    return svgPathReverse.reverse(\n      'M '+cx+' '+cy+' m -'+r+', 0 a '+r+','+r+' 0 1,0 '+(r*2)+',0 a '+r+','+r+' 0 1,0 -'+(r*2)+',0',\n    );\n}\n\ninterface Ratio {\n  w: number;\n  h: number;\n}\n\nconst getAspectRatio = (aspect: Ratio, actual: Ratio, buffer: number) => {\n  const longerAspectSide = aspect.w > aspect.h ? 'width' : 'height';\n  const smallerActualValue = (actual.w > actual.h ? actual.h : actual.w) - (buffer * 2);\n  const ratio = longerAspectSide === 'width' ? aspect.h / aspect.w : aspect.w / aspect.h;\n  const width = longerAspectSide === 'width' ? smallerActualValue : smallerActualValue * ratio;\n  const height = longerAspectSide === 'height' ? smallerActualValue : smallerActualValue * ratio;\n  const margin = {\n    left: ((actual.w - width) / 2) + (buffer / 2), right: ((actual.w - width) / 2) + (buffer / 2),\n    top: ((actual.h - height) / 2) + (buffer / 2), bottom: ((actual.h - height) / 2) + (buffer / 2),\n  };\n  return {\n    width, height, margin,\n    outerWidth: actual.w,\n    outerHeight: actual.h,\n  };\n};\n\ninterface Node {\n  primary: boolean;\n  id: string;\n  name: string;\n  country: string;\n  color: string;\n  proximity: number;\n  radius?: number;\n  shown: boolean;\n}\n\ninterface NodeWithCoords extends Node {\n  x: number;\n  y: number;\n}\n\ninterface Data {\n  nodes: Node[];\n}\n\ninterface Input {\n  rootEl: HTMLDivElement;\n  data: Data;\n  rootWidth: number;\n  rootHeight: number;\n  tooltipEl: HTMLDivElement;\n}\n\nconst createChart = (input: Input) => {\n  const {\n    rootEl, data, rootWidth, rootHeight, tooltipEl,\n  } = input;\n\n  const {\n    width, height, outerWidth, outerHeight,\n  } = getAspectRatio({w: 4, h: 3}, {w: rootWidth, h: rootHeight}, 20);\n\n  const smallerSize = width < height ? width : height;\n  const radiusAdjuster = smallerSize / minExpectedScreenSize;\n  const radius = defaultNodeRadius * radiusAdjuster;\n\n  const innerRingRadius = 340 * radiusAdjuster;\n  const outerRingRadius = 590 * radiusAdjuster;\n  const baseFontSize = Math.min(Math.max(38 * radiusAdjuster, 12), 18);\n\n  const centerX = outerWidth / 2;\n  const centerY = outerHeight / 2;\n\n  const highNodesDatum: Node[] = [];\n  const mediumNodesDatum: Node[] = [];\n  const primary = data.nodes.find(d => d.primary);\n  if (primary) {\n    highNodesDatum.push(primary);\n  }\n  const filtered = data.nodes.filter(d => d.shown && !d.primary);\n  filtered.slice(0, 20).forEach((d, i) => {\n    if (i < 10) {\n      highNodesDatum.push(d);\n    } else {\n      mediumNodesDatum.push(d);\n    }\n  });\n\n  const highNodes = highNodesDatum.map((d, i) => {\n    if (d.primary) {\n      return {\n        ...d,\n        x: centerX,\n        y: centerY,\n      };\n    } else {\n      const innerCircleLength = highNodesDatum.length - 1;\n      const {x, y} = drawPoint(\n        innerRingRadius,\n        i,\n        innerCircleLength,\n        centerX,\n        centerY,\n        Ring.Inner,\n      );\n      return {\n        ...d,\n        x, y,\n      };\n    }\n  });\n\n  const mediumNodes = mediumNodesDatum.map((d, i) => {\n    if (d.primary) {\n      return {\n        ...d,\n        x: centerX,\n        y: centerY,\n      };\n    } else {\n      const {x, y} = drawPoint(\n        outerRingRadius,\n        i,\n        mediumNodesDatum.length,\n        centerX,\n        centerY,\n        Ring.Outer,\n      );\n      return {\n        ...d,\n        x, y,\n      };\n    }\n  });\n\n  const nodes: NodeWithCoords[] = [...highNodes, ...mediumNodes];\n\n  const svg = d3.select(rootEl).append('svg')\n  .attr('width',  outerWidth)\n  .attr('height', outerHeight)\n  .attr('alt', 'Similar Cities to Selected City Visualization');\n\n  const g = svg.append('g');\n\n  // OUTER RING\n  g.append('circle')\n    .attr('class', 'outer-ring')\n    .attr('cx', centerX)\n    .attr('cy', centerY)\n    .attr('fill', 'none')\n    .attr('stroke', '#bfbfbf')\n    .attr('stroke-width', '0.5')\n    .attr('r', outerRingRadius + 'px');\n\n  // INNER RING\n  g.append('circle')\n    .attr('class', 'inner-ring')\n    .attr('class', 'outer-ring')\n    .attr('fill', 'none')\n    .attr('stroke', '#bfbfbf')\n    .attr('stroke-width', '0.5')\n    .attr('r', innerRingRadius + 'px')\n    .attr('cx', centerX)\n    .attr('cy', centerY);\n\n  //Create an SVG path (based on bl.ocks.org/mbostock/2565344)\n  // OUTER RING TEXT PATH\n  g.append('path')\n    .attr('id', 'outerRingLabelPath') //Unique id of the path\n    .style('fill', 'none')\n    .style('stroke', 'none')\n    .attr('d', circlePath(centerX, centerY, outerRingRadius + (baseFontSize * 1.5)));\n\n  //Create an SVG text element and append a textPath element\n  // OUTER RING TEXT\n  g.append('text')\n   .append('textPath') //append a textPath to the text element\n    .attr('class', 'ring-label')\n    .attr('xlink:href', '#outerRingLabelPath') //place the ID of the path here\n    .style('text-anchor','middle')\n    .attr('startOffset', '25%')\n    .text('Lower Similarity')\n    .style('font-size', baseFontSize * 1.25 + 'px')\n    .style('font-weight', '600')\n    .style('text-transform', 'uppercase')\n    .style('fill', primaryColorLight)\n    .style('pointer-events', 'none');\n\n  //Create an SVG path (based on bl.ocks.org/mbostock/2565344)\n  // INNER RING TEXT PATH\n  g.append('path')\n    .attr('id', 'innerRingLabelPath') //Unique id of the path\n    .style('fill', 'none')\n    .style('stroke', 'none')\n    .attr('d', circlePath(centerX, centerY, innerRingRadius + (baseFontSize * 1.5)));\n\n  //Create an SVG text element and append a textPath element\n  // INNER RING TEXT\n  g.append('text')\n   .append('textPath') //append a textPath to the text element\n    .attr('class', 'ring-label')\n    .attr('xlink:href', '#innerRingLabelPath') //place the ID of the path here\n    .style('text-anchor','middle')\n    .attr('startOffset', '25%')\n    .text('Higher Similarity')\n    .style('font-size', baseFontSize * 1.25 + 'px')\n    .style('font-weight', '600')\n    .style('text-transform', 'uppercase')\n    .style('fill', primaryColorLight)\n    .style('pointer-events', 'none');\n\n  g.selectAll('.city-node')\n    .data(nodes)\n    .enter().append('circle')\n      .attr('class', 'city-node')\n      .attr('cx', d => d.x )\n      .attr('cy', d => d.y )\n      .attr('r', d => d.radius ? d.radius : radius)\n      .attr('fill', d => d.color ? d.color : 'gray')\n      .attr('display', d => d.shown ? 'block' : 'none')\n      .on('mousemove', d => {\n        // add one to the rank to account for 0 start arrays\n        const rankInFiltered = filtered.findIndex(dd => dd.id === d.id) + 1;\n        const rankInAll = data.nodes.findIndex(dd => dd.id === d.id) + 1;\n        const rows = [['Year:', defaultYear.toString()]];\n        if (rankInFiltered > 0) {\n          rows.push(\n            [\n              'Similarity rank,<br />filtered cities only:',\n              // the current city has already been deducted from the count\n              ordinalNumber([rankInFiltered]) + ' of ' + filtered.length],\n            [\n              'Similarity rank,<br />all Metroverse cities:',\n              // subtract one to not include the current city\n              ordinalNumber([rankInAll]) + ' of ' + (data.nodes.length - 1)],\n          );\n        }\n        tooltipEl.innerHTML = getStandardTooltip({\n          title: d.name + ', ' + d.country,\n          color: rgba(d.color, 0.3),\n          rows,\n          boldColumns: [1],\n          simple: true,\n        });\n        tooltipEl.style.display = 'block';\n        tooltipEl.style.top = d3.event.pageY + 'px';\n        tooltipEl.style.left = d3.event.pageX + 'px';\n      })\n      .on('mouseleave', () => {\n        tooltipEl.style.display = 'none';\n      });\n\n  const nodeLabels = g.append('g')\n    .attr('class', 'city-nodes-label-group');\n\n  let maxCharLength = 8;\n  if (window.innerHeight > 700 && window.innerWidth > 1200) {\n    maxCharLength = 15;\n  } else if (window.innerHeight > 600) {\n    maxCharLength = 10;\n  }\n\n  nodeLabels.selectAll('.city-nodes-label')\n    .data(nodes)\n    .enter().append('text')\n      .attr('class', 'city-nodes-label')\n      .style('font-size', baseFontSize * 0.9 + 'px')\n      .style('fill', '#444')\n      .style('paint-order', 'stroke')\n      .style('text-anchor', 'middle')\n      .attr('display', d => d.shown ? 'block' : 'none')\n      .text(d => ellipsisText(d.name as string, maxCharLength))\n      .attr('x', d => d.x)\n      .attr('y', d => d.y + (d.radius ? d.radius : radius) + (baseFontSize * 1.25));\n\n};\n\nexport default createChart;\n","import React, {useRef, useEffect, useState} from 'react';\nimport CitySpaceMap from 'react-city-space-mapbox';\nimport useLayoutData from './useLayoutData';\nimport styled from 'styled-components/macro';\nimport {breakPoints} from '../../../styling/GlobalGrid';\nimport MapOptionsAndSettings from './MapOptionsAndSettings';\nimport {getStandardTooltip} from '../../../utilities/rapidTooltip';\nimport {rgba} from 'polished';\nimport useProximityData, {SuccessResponse} from './useProximityData';\nimport SimilarCitiesRings from '../simpleRings/SimilarCitiesRings';\nimport CityProximityLegend from '../legend/CityProximityLegend';\nimport FilterBar from './FilterBar';\nimport {extent} from 'd3-array';\nimport {RapidTooltipRoot} from '../../../utilities/rapidTooltip';\nimport {defaultYear} from '../../../Utils';\nimport useCurrentCityId from '../../../hooks/useCurrentCityId';\nimport {ordinalNumber} from '../../../hooks/useFluent';\nimport orderBy from 'lodash/orderBy';\nimport upperFirst from 'lodash/upperFirst';\nimport {\n  backgroundDark,\n  secondaryFont,\n  lightBorderColor,\n} from '../../../styling/styleUtils';\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  grid-column: 1;\n  grid-row: 2;\n  position: relative;\n\n  @media ${breakPoints.small} {\n    grid-row: 3;\n    grid-column: 1;\n  }\n`;\n\nconst MapContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n\n  .mapboxgl-control-container {\n    .mapboxgl-ctrl-group:not(:empty) {\n      background: none;\n      box-shadow: none;\n      margin-top: 2rem;\n    }\n    .mapboxgl-ctrl-zoom-in,\n    .mapboxgl-ctrl-zoom-out,\n    .mapboxgl-ctrl-compass {\n      width: 75px;\n      height: 18px;\n      color: ${backgroundDark};\n      text-transform: uppercase;\n      font-family: ${secondaryFont};\n      letter-spacing: -0.3px;\n      display: flex;\n      align-items: center;\n      border: solid 1px ${lightBorderColor};\n      background-color: #fff;\n      font-size: 0.65rem;\n      font-weight: 600;\n      padding: 0.1rem 0.4rem;\n      margin-bottom: 0.45rem;\n\n      &:hover {\n        background-color: ${backgroundDark};\n        color: #fff;\n      }\n\n      span {\n        display: none;\n      }\n    }\n    .mapboxgl-ctrl-zoom-in {\n      &::after {\n        text-align: center;\n        content: '+ Zoom In';\n      }\n    }\n    .mapboxgl-ctrl-zoom-out {\n      &:after {\n        text-align: center;\n        content: '- Zoom Out';\n      }\n    }\n    .mapboxgl-ctrl-compass {\n      display: none;\n    }\n  }\n`;\n\nconst Map = styled.div`\n  width: 100%;\n  height: 450px;\n  height: clamp(300px, 70vh, 800px);\n`;\n\nconst RingsContainer = styled.div`\n  width: 100%;\n  height: 450px;\n  height: clamp(300px, 70vh, 800px);\n  background-color: #fff;\n  z-index: 5;\n`;\n\nlet staticProximityData: SuccessResponse | undefined;\nlet staticFilterValues: FilterValues | undefined;\nlet staticCityId: string | null;\n\ninterface FilterValues {\n  selectedRegionIds:  string[];\n  selectedCountryIds:  string[];\n  minMaxPopulation: [number, number];\n  minMaxGdppc: [number, number];\n}\n\nconst SimilarCitiesMap = () => {\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\n  const {data} = useLayoutData();\n  const {data: proximityData} = useProximityData();\n  const [filterValues, setFilterValues] = useState<FilterValues | undefined>(undefined);\n  const cityId = useCurrentCityId();\n\n  useEffect(() => {\n    staticProximityData = proximityData;\n  }, [proximityData, cityId]);\n\n  useEffect(() => {\n    staticFilterValues = filterValues;\n  }, [filterValues, cityId]);\n\n  useEffect(() => {\n    staticCityId = cityId;\n  }, [cityId]);\n\n  const renderTooltipContent =\n    (node: {id: string, country: string, city: string, fill: string}) => {\n    if (data && staticProximityData) {\n      const sorted = orderBy(data.cityGeoJson.features, (d: any) => {\n        const proximityDatum = (staticProximityData as SuccessResponse).cities.find(\n          dd => dd.partnerId === d.properties.id);\n        if (proximityDatum) {\n          return proximityDatum.eucdist;\n        } else {\n          return 100;\n        }\n      });\n\n      const filtered = sorted.filter(({properties: d}: any) => {\n        const shown =\n          d.id !== staticCityId &&\n          (staticFilterValues === undefined || (\n          d.population >= staticFilterValues.minMaxPopulation[0] &&\n          d.population <= staticFilterValues.minMaxPopulation[1] &&\n          d.gdppc >= staticFilterValues.minMaxGdppc[0] &&\n          d.gdppc <= staticFilterValues.minMaxGdppc[1] &&\n          (!staticFilterValues.selectedRegionIds.length ||\n            (d.region !== null && staticFilterValues.selectedRegionIds.includes(d.region.toString()))) &&\n          (!staticFilterValues.selectedCountryIds.length ||\n            (d.countryId !== null && d.countryId !== undefined &&\n              staticFilterValues.selectedCountryIds.includes(d.countryId)))\n            ))\n              ? true : false;\n        return shown;\n      });\n      // add one to the rank to account for 0 start arrays\n      const rankInFiltered =\n        filtered.findIndex((dd: any) => dd.properties.id === node.id) + 1;\n      const rankInAll =\n        sorted.findIndex((dd: any) => dd.properties.id === node.id) + 1;\n      const rows = [['Year:', defaultYear.toString()]];\n      if (rankInFiltered > 0) {\n        rows.push(\n          [\n            'Similarity rank,<br />filtered cities only:',\n            // the current city has already been deducted from the count\n            ordinalNumber([rankInFiltered]) + ' of ' + filtered.length],\n          [\n            'Similarity rank,<br />all Metroverse cities:',\n            // subtract one to not include the current city\n            ordinalNumber([rankInAll]) + ' of ' + (sorted.length - 1)],\n        );\n      }\n      if (rankInFiltered > 0 || node.id === staticCityId) {\n        return getStandardTooltip({\n          title: node.city + ', ' + node.country,\n          color: rgba(node.fill, 0.35),\n          rows,\n          boldColumns: [1],\n          hideArrow: true,\n          simple: true,\n        });\n      } else  return null;\n    }\n    return null;\n  };\n\n  let rings: React.ReactElement<any> | null = null;\n  let filterBar: React.ReactElement<any> | null;\n  if (filterValues) {\n    rings = (\n      <RingsContainer>\n        <SimilarCitiesRings\n          selectedRegionIds={filterValues.selectedRegionIds}\n          selectedCountryIds={filterValues.selectedCountryIds}\n          minMaxPopulation={filterValues.minMaxPopulation}\n          minMaxGdppc={filterValues.minMaxGdppc}\n          tooltipNode={tooltipRef.current}\n        />\n      </RingsContainer>\n    );\n  }\n  if (data) {\n    let currentCity: {city: string, population: number, gdppc: number} | undefined;\n    const allPopulations: number[] = [];\n    const allGdppc: number[] = [];\n    data.cityGeoJson.features.forEach((d: any) => {\n      if (d.properties.id === cityId) {\n        currentCity = d.properties;\n      }\n      if (!isNaN(d.properties.population)) {\n        allPopulations.push(d.properties.population);\n        if (!isNaN(d.properties.gdppc)) {\n          allGdppc.push(d.properties.gdppc);\n        }\n      }\n    });\n\n    const populationRange = extent(allPopulations) as [number, number];\n    const gdppcRange = extent(allGdppc) as [number, number];\n    const regions = data.regions.map(d => ({...d, label: upperFirst(d.label)}));\n    const countries = data.countries;\n    filterBar = (\n      <FilterBar\n        // adjust min max values so that all other values fall within them\n        populationMin={Math.floor(populationRange[0]) - 1000}\n        populationMax={Math.ceil(populationRange[1]) + 100000}\n        gdppcMin={Math.floor(gdppcRange[0]) - 1000}\n        gdppcMax={Math.ceil(gdppcRange[1]) + 100000}\n        regions={regions}\n        countries={countries}\n        setFilterValues={setFilterValues}\n        currentCity={currentCity}\n      />\n    );\n    if (!filterValues) {\n      rings = (\n        <RingsContainer>\n          <SimilarCitiesRings\n            selectedRegionIds={[]}\n            selectedCountryIds={[]}\n            minMaxPopulation={populationRange}\n            minMaxGdppc={gdppcRange}\n            tooltipNode={tooltipRef.current}\n          />\n        </RingsContainer>\n      );\n    }\n  } else {\n    filterBar = null;\n  }\n\n  return (\n    <>\n      <Root>\n        <MapContainer>\n          <CityProximityLegend isRings={false} />\n          <Map ref={rootRef} />\n          {rings}\n          <CityProximityLegend isRings={true} />\n        </MapContainer>\n      </Root>\n      <CitySpaceMap\n        accessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN as  string}\n        mapStyle={'mapbox://styles/harvardgrowthlab/ckelvcgh70cg019qgiu39035a'}\n        rootRef={rootRef}\n        cityGeoJson={data ? data.cityGeoJson : undefined}\n        cityUMapJson={data ? data.cityUMapJson : undefined}\n        getPopupHTMLContent={renderTooltipContent}\n      >\n        <MapOptionsAndSettings />\n        {filterBar}\n      </CitySpaceMap>\n      <RapidTooltipRoot ref={tooltipRef} />\n    </>\n  );\n};\n\nexport default SimilarCitiesMap;","import React, {useEffect, useState, useRef} from 'react';\nimport createChart, {\n  defaultNodeRadius,\n} from './createChart';\nimport {SuccessResponse} from '../similarCitiesMap/useProximityData';\nimport useCurrentCityId from '../../../hooks/useCurrentCityId';\nimport useGlobalLocationData, {getPopulationScale, getGdpPppScale} from '../../../hooks/useGlobalLocationData';\nimport {\n  lightBaseColor,\n} from '../../../styling/styleUtils';\nimport orderBy from 'lodash/orderBy';\nimport {createProximityScale} from '../similarCitiesMap/Utils';\nimport useQueryParams from '../../../hooks/useQueryParams';\nimport {\n  CityNodeSizing,\n  defaultCityNodeSizing,\n} from '../../../routing/routes';\n\ntype Chart = {\n  initialized: false;\n} | {\n  initialized: true;\n};\n\ninterface Props {\n  width: number;\n  height: number;\n  data: SuccessResponse | undefined;\n  selectedRegionIds: string[];\n  selectedCountryIds: string[];\n  minMaxPopulation: [number, number];\n  minMaxGdppc: [number, number];\n  tooltipNode: HTMLDivElement | null;\n}\n\nconst Chart = (props: Props) => {\n  const {\n    width, height, data, minMaxPopulation, minMaxGdppc, selectedRegionIds,\n    tooltipNode, selectedCountryIds,\n  } = props;\n\n  const cityId = useCurrentCityId();\n  const {city_node_sizing} = useQueryParams();\n  const cityData = useGlobalLocationData();\n  const chartRef = useRef<HTMLDivElement | null>(null);\n  const [chart, setChart] = useState<Chart>({initialized: false});\n\n  useEffect(() => {\n    const chartNode = chartRef.current;\n\n    const [minPop, maxPop] = minMaxPopulation;\n    const [minGdppc, maxGdppc] = minMaxGdppc;\n\n    if (chartNode) {\n      if (chartNode && tooltipNode && data !== undefined && cityId && cityData.data && (\n          (chart.initialized === false && width && height)\n      )) {\n        let radiusScale: (value: number) => number;\n        const nodeSizing = city_node_sizing ? city_node_sizing : defaultCityNodeSizing;\n        if (nodeSizing === CityNodeSizing.population) {\n          radiusScale =\n            getPopulationScale(\n              cityData.data, defaultNodeRadius * 0.45, defaultNodeRadius * 1.25) as ((val: number) => number);\n        } else if (nodeSizing === CityNodeSizing.gdpPpp) {\n          radiusScale =\n            getGdpPppScale(\n              cityData.data, defaultNodeRadius * 0.45, defaultNodeRadius * 1.25) as ((val: number) => number);\n        } else {\n          radiusScale = (_unused: any) => defaultNodeRadius;\n        }\n        const colorScale = createProximityScale([\n          data.cityPartnerEucdistScale.p20GlobalEucdist,\n          data.cityPartnerEucdistScale.p40GlobalEucdist,\n          data.cityPartnerEucdistScale.p60GlobalEucdist,\n          data.cityPartnerEucdistScale.p80GlobalEucdist,\n        ]);\n        const nodes = orderBy(data.cities, ['eucdist'], ['asc']).map(c => {\n          const city = cityData.data ? cityData.data.cities.find(cc => cc.cityId === c.partnerId) : undefined;\n          const country = cityData.data && city && city.countryId\n            ? cityData.data.countries.find(cc => city.countryId !== null && cc.countryId === city.countryId.toString())\n            : undefined;\n          const radius = city\n            ? nodeSizing === CityNodeSizing.population ? city.population as number : city.gdppc as number\n            : defaultNodeRadius;\n          const population = city && city.population ? city.population : 0;\n          const gdppc = city && city.gdppc ? city.gdppc : 0;\n          const region = city && city.region !== null ? city.region.toString() : null;\n          const shown =\n            population >= minPop && population <= maxPop &&\n            gdppc >= minGdppc && gdppc <= maxGdppc &&\n            (!selectedRegionIds.length || (region !== null && selectedRegionIds.includes(region))) &&\n            (!selectedCountryIds.length ||\n              (country !== null && country !== undefined && selectedCountryIds.includes(country.countryId)))\n                ? true : false;\n          return {\n            primary: c.partnerId === cityId,\n            id: c.partnerId,\n            name: city && city.name ? city.name : c.partnerId,\n            country: country && country.nameShortEn ? country.nameShortEn : '',\n            color: colorScale(c.eucdist ? c.eucdist : 100),\n            proximity: c.eucdist ? c.eucdist : 100,\n            radius: radiusScale(radius),\n            shown: c.partnerId === cityId || shown,\n          };\n        });\n        const primaryCity = cityData.data ? cityData.data.cities.find(cc => cc.cityId === cityId) : undefined;\n        const primaryCountry = cityData.data && primaryCity && primaryCity.countryId\n          ? cityData.data.countries.find(\n              cc => primaryCity.countryId !== null && cc.countryId === primaryCity.countryId.toString(),\n          ) : undefined;\n\n        const radiusValue = primaryCity\n          ? nodeSizing === CityNodeSizing.population ? primaryCity.population as number : primaryCity.gdppc as number\n          : defaultNodeRadius;\n        if (primaryCity) {\n          nodes.push({\n            primary: true,\n            id: cityId,\n            name: primaryCity.name ? primaryCity.name : cityId,\n            country: primaryCountry && primaryCountry.nameShortEn ? primaryCountry.nameShortEn : '',\n            color: lightBaseColor,\n            proximity: 0,\n            radius: radiusScale(radiusValue),\n            shown: true,\n          });\n        }\n        chartNode.innerHTML = '';\n        createChart({\n          rootEl: chartNode,\n          data: {nodes},\n          rootWidth: width,\n          rootHeight: height,\n          tooltipEl: tooltipNode,\n        });\n        setChart({initialized: true });\n      }\n    }\n  }, [chartRef, chart, width, height, data, cityId, cityData, city_node_sizing,\n      minMaxPopulation, minMaxGdppc, selectedRegionIds, tooltipNode, selectedCountryIds]);\n\n  return (\n    <>\n      <div\n        ref={chartRef}\n        style={{height}}\n      />\n    </>\n  );\n};\n\nexport default Chart;\n","import React, {useRef, useEffect, useState} from 'react';\nimport {useWindowWidth} from '../../../contextProviders/appContext';\nimport styled, {keyframes} from 'styled-components/macro';\nimport Chart from './Chart';\nimport useProximityData from '../similarCitiesMap/useProximityData';\nimport useCurrentCityId from '../../../hooks/useCurrentCityId';\nimport useQueryParams from '../../../hooks/useQueryParams';\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n\n  100% {\n    opacity: 1;\n  }\n`;\nconst Root = styled.div`\n  width: 100%;\n  height: 450px;\n  height: clamp(300px, 70vh, 800px);\n`;\n\nconst RingsContainer = styled.div`\n  opacity: 0;\n  animation: ${fadeIn} 0.2s ease-in-out 1 forwards;\n\n  div {\n    max-width: 100%;\n\n    svg {\n      max-width: 100%;\n    }\n  }\n`;\n\ninterface Props {\n  selectedRegionIds: string[];\n  selectedCountryIds: string[];\n  minMaxPopulation: [number, number];\n  minMaxGdppc: [number, number];\n  tooltipNode: HTMLDivElement | null;\n}\n\nconst SimpleRings = (props: Props) => {\n  const {selectedRegionIds, selectedCountryIds, minMaxPopulation, minMaxGdppc, tooltipNode} = props;\n  const windowDimensions = useWindowWidth();\n  const rootRef = useRef<HTMLDivElement | null>(null);\n  const [dimensions, setDimensions] = useState<{width: number, height: number} | undefined>(undefined);\n  const cityId = useCurrentCityId();\n  const {city_node_sizing} = useQueryParams();\n  const chartKey = dimensions\n    ? cityId + 'industry-space-sized-to-container-key' +\n        dimensions.width.toString() + dimensions.height.toString() + city_node_sizing\n          + JSON.stringify({selectedRegionIds, selectedCountryIds, minMaxPopulation, minMaxGdppc})\n    : cityId + 'industry-space-sized-to-container-key-0-0' + city_node_sizing\n      + JSON.stringify({selectedRegionIds, selectedCountryIds, minMaxPopulation, minMaxGdppc});\n\n  const {data} = useProximityData();\n\n  useEffect(() => {\n    const node = rootRef.current;\n    if (node) {\n      setTimeout(() => {\n        const nodeAtTimeout = rootRef.current;\n        if (nodeAtTimeout) {\n          const {width, height} = nodeAtTimeout.getBoundingClientRect();\n          setDimensions({width, height});\n        }\n      }, 0);\n    }\n  }, [rootRef, windowDimensions]);\n\n  return (\n    <Root ref={rootRef} key={chartKey}>\n      <RingsContainer>\n        <Chart\n          width={dimensions ? dimensions.width : 0}\n          height={dimensions ? dimensions.height : 0}\n          data={data}\n          selectedRegionIds={selectedRegionIds}\n          selectedCountryIds={selectedCountryIds}\n          minMaxPopulation={minMaxPopulation}\n          minMaxGdppc={minMaxGdppc}\n          tooltipNode={tooltipNode}\n        />\n      </RingsContainer>\n    </Root>\n  );\n};\n\nexport default SimpleRings;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport {breakPoints} from '../../../styling/GlobalGrid';\nimport {proximityColors} from '../similarCitiesMap/Utils';\nimport useFluent from '../../../hooks/useFluent';\nimport useCurrentCity from '../../../hooks/useCurrentCity';\nimport ArrowSVG from '../../../assets/icons/arrow.svg';\nimport TextLoading from '../../transitionStateComponents/SimpleTextLoading';\nimport {joyrideClassNames} from '../../navigation/secondaryHeader/guide/CitiesGuide';\nimport UtilityBar from '../../navigation/secondaryHeader/UtilityBar';\nimport { backgroundMedium } from '../../../styling/styleUtils';\n\nconst RootBase = styled.div`\n  grid-row: 3;\n  display: grid;\n  grid-template-columns: auto 1fr auto;\n  margin: 1.5rem 0;\n\n  @media ${breakPoints.small} {\n    grid-row: 4;\n  }\n`;\n\nconst StandardRoot = styled(RootBase)`\n  grid-column: 1;\n\n  @media (max-width: 1200px) {\n    grid-column: 1 / -1;\n  }\n`;\n\nconst FullWidthRoot = styled(RootBase)`\n  grid-column: 1 / -1;\n`;\n\nconst Content = styled.div`\n  padding: 0.875rem 0;\n`;\n\nconst Bar = styled.div`\n  width: 100%;\n  height: 0.6rem;\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n`;\n\nconst Segment = styled.div`\n  border: solid 1px #fff;\n`;\n\nconst Labels = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-size: 0.85rem;\n  margin-bottom: 0.3rem;\n  text-transform: uppercase;\n`;\n\nconst YourLocation = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n  height: 100%;\n  font-size: 0.75rem;\n  font-weight: 600;\n  padding-right: 2rem;\n`;\n\nconst Arrow = styled.img`\n  width: 1.2rem;\n  height: 1.2rem;\n  margin-right: 0.5rem;\n`;\n\nconst Circle = styled.div`\n  width: 1.5rem;\n  height: 1.5rem;\n  margin-right: 0.5rem;\n  background-color: gray;\n  border-radius: 1000px;\n`;\n\nconst Utilities = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 0.3rem 0.2rem;\n  margin: 0 1rem;\n  background-color: ${backgroundMedium};\n`;\n\ninterface Props {\n  fullWidth?: boolean;\n  isRings: boolean;\n}\n\nconst IntensityLegend = (props: Props) => {\n  const {fullWidth, isRings} = props;\n  const Root = fullWidth ? FullWidthRoot : StandardRoot;\n  const getString = useFluent();\n  const {loading, city} = useCurrentCity();\n\n  const icon = isRings ? (\n    <Circle />\n  ) : (\n    <Arrow src={ArrowSVG} alt='' title='' />\n  );\n\n  let cityName: React.ReactElement<any>;\n  if (loading) {\n    cityName = <TextLoading />;\n  } else if (city && city.name) {\n    cityName = <div>{city.name}</div>;\n  } else {\n    cityName = <div>{getString('global-your-city')}</div>;\n  }\n\n  return (\n    <Root className={joyrideClassNames.colorLegendNoFilter}>\n      <Content>\n        <YourLocation>\n          {icon}\n          {cityName}\n        </YourLocation>\n      </Content>\n      <Content>\n        <Labels>\n          <div>{getString('global-similarity-low')}</div>\n          <div>{getString('global-similarity-high')}</div>\n        </Labels>\n        <Bar>\n          <Segment style={{backgroundColor: proximityColors[4]}} />\n          <Segment style={{backgroundColor: proximityColors[3]}} />\n          <Segment style={{backgroundColor: proximityColors[2]}} />\n          <Segment style={{backgroundColor: proximityColors[1]}} />\n          <Segment style={{backgroundColor: proximityColors[0]}} />\n        </Bar>\n      </Content>\n      <Content>\n        <Utilities>\n          <UtilityBar returnInline={true} hideGuide={true} />\n        </Utilities>\n      </Content>\n    </Root>\n  );\n};\n\nexport default IntensityLegend;\n","import React from 'react';\nimport styled from 'styled-components';\nimport useCurrentCity from '../../../../hooks/useCurrentCity';\nimport SimpleTextLoading from '../../../../components/transitionStateComponents/SimpleTextLoading';\nimport useFluent from '../../../../hooks/useFluent';\n\nconst Root = styled.div`\n  grid-column: 1 / -1;\n`;\n\nconst H1 = styled.h1`\n  margin-top: 0;\n`;\n\nconst Header = () => {\n  const {loading, city} = useCurrentCity();\n  const getString = useFluent();\n  if (loading) {\n    return (\n      <Root>\n        <H1><SimpleTextLoading /></H1>\n      </Root>\n    );\n  } else {\n    return (\n      <Root>\n        <H1>{getString('city-similarity-title', {name: city?.name})}</H1>\n      </Root>\n    );\n  }\n\n};\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\nimport useFluent from '../../../../hooks/useFluent';\nimport { breakPoints } from '../../../../styling/GlobalGrid';\nimport SimilarCitiesMap from '../../../../components/dataViz/similarCitiesMap';\nimport Header from './Header';\n\nconst Root = styled.div`\n  grid-column: 2;\n\n  @media ${breakPoints.small} {\n    grid-column: 1;\n  }\n`;\n\nconst Visualizations = () => {\n  const getString = useFluent();\n  return (\n    <Root>\n      <Header />\n      <p dangerouslySetInnerHTML={{ __html: getString('city-similarity-para-1')}} />\n      <SimilarCitiesMap />\n    </Root>\n  );\n};\n\nexport default Visualizations;\n","import {DefaultContentWrapper} from '../../../../styling/GlobalGrid';\nimport useCurrentCityId from '../../../../hooks/useCurrentCityId';\nimport SimpleError from '../../../../components/transitionStateComponents/SimpleError';\nimport {LoadingOverlay} from '../../../../components/transitionStateComponents/VizLoadingBlock';\nimport React from 'react';\nimport {\n  ContentScrollGrid,\n} from '../../../../styling/styleUtils';\nimport UtilityBar from '../../../../components/navigation/secondaryHeader/UtilityBar';\nimport FilterBar from './FilterBar';\nimport Visualizations from './Visualizations';\n\nconst SimilarCities = () => {\n  const cityId = useCurrentCityId();\n\n  if (cityId === null) {\n    return (\n      <DefaultContentWrapper>\n        <LoadingOverlay>\n          <SimpleError fluentMessageId={'global-ui-error-invalid-city'} />\n        </LoadingOverlay>\n      </DefaultContentWrapper>\n    );\n  }\n\n  return (\n    <DefaultContentWrapper>\n      <ContentScrollGrid>\n        <FilterBar />\n        <Visualizations />\n      </ContentScrollGrid>\n      <UtilityBar />\n    </DefaultContentWrapper>\n  );\n};\n\nexport default SimilarCities;\n","import React from 'react';\nimport InformationalPage from '../../../components/templates/informationalPage';\nimport SimilarCities from './similarCities';\n\nconst SimilarCity = () => {\n  return (\n    <InformationalPage contentFull={true}>\n      <SimilarCities />\n    </InformationalPage>\n  );\n};\n\nexport default SimilarCity;\n","import React, {useEffect, useState} from 'react';\nimport styled from 'styled-components/macro';\nimport {Link, useHistory} from 'react-router-dom';\nimport {\n  primaryColor,\n  backgroundMedium,\n  backgroundDark,\n} from '../../../styling/styleUtils';\nimport debounce from 'lodash/debounce';\nimport {rootId} from './';\n\nconst StickyContainer = styled.div`\n  position: sticky;\n  top: 1rem;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst LinkBase = styled(Link)`\n  padding: 0.75rem 0.65rem;\n  border-left: solid 4px rgba(0, 0, 0, 0);\n  text-transform: uppercase;\n  color: ${backgroundDark};\n  text-decoration: none;\n  margin-bottom: 0.65rem;\n  font-size: 1.1rem;\n\n  &:hover,\n  &.active {\n    background-color: ${backgroundMedium};\n    border-left-color: ${primaryColor};\n  }\n\n  @media (max-width: 760px) {\n    font-size: 0.9rem;\n    padding: 0.5rem 0.35rem;\n  }\n\n  @media (max-width: 400px) {\n    font-size: 0.75rem;\n    padding: 0.35rem 0.15rem;\n  }\n`;\n\nexport interface Section {\n  label: string;\n  route: string;\n  active: boolean;\n  Component: (props: any) => JSX.Element;\n  ref: React.MutableRefObject<HTMLDivElement | null>;\n}\n\ninterface Props {\n  sections: Section[];\n}\n\nconst Content = (props: Props) => {\n  const {sections} = props;\n  const {replace} = useHistory();\n  const [firstRender, setFirstRender] = useState<boolean>(true);\n\n  useEffect(() => {\n    const node = document.querySelector('#' + rootId);\n    const onScroll = debounce(() => {\n      if (node) {\n        const currentSection = [...sections].reverse().find(({ref}) => {\n          const section = ref.current;\n          if (section && section.offsetTop < node.scrollTop + 200) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n        if (currentSection) {\n          replace(currentSection.route);\n        }\n      }\n    }, 50);\n    if (node) {\n      node.addEventListener('scroll', onScroll);\n    }\n    return () => {\n      if (node) {\n        node.removeEventListener('scroll', onScroll);\n      }\n    };\n  }, [sections, replace]);\n\n  useEffect(() => {\n    if (firstRender) {\n      const currentSection = sections.findIndex(({active}) => active);\n      if (currentSection !== -1 && sections[currentSection]) {\n        const node = sections[currentSection].ref.current;\n        const root = document.querySelector('#' + rootId);\n        if (currentSection === 0 && root) {\n          root.scrollTo({top: 0, behavior: 'smooth'});\n        } else if (node) {\n          node.scrollIntoView({behavior: 'smooth'});\n        }\n      }\n      setFirstRender(false);\n    }\n  }, [sections, firstRender]);\n\n  const navLinks: React.ReactElement<any>[] = [];\n  const contentSections: React.ReactElement<any>[] = [];\n  sections.forEach(({route, label, active, ref, Component}) => {\n    navLinks.push(\n      <LinkBase\n        to={route}\n        key={'side-nav-to-' + route}\n        className={active ? 'active' : undefined}\n        onClick={() => setFirstRender(true)}\n      >\n        {label}\n      </LinkBase>,\n    );\n    contentSections.push(<div key={'component-for-' + route} ref={ref}><Component /></div>);\n  });\n  return (\n    <>\n      <div>\n        {contentSections}\n      </div>\n      <div>\n        <StickyContainer>\n          {navLinks}\n        </StickyContainer>\n      </div>\n    </>\n  );\n};\n\nexport default Content;\n","import React from 'react';\nimport useFluent from '../../../hooks/useFluent';\n\nconst AboutWhatIs = () => {\n  const getString = useFluent();\n  return (\n    <>\n      <h1>{getString('about-what-is-title')}</h1>\n      <div dangerouslySetInnerHTML={{__html: getString('about-what-is-html')}} />\n    </>\n  );\n};\n\nexport default AboutWhatIs;\n","import React from 'react';\nimport useFluent from '../../../hooks/useFluent';\nimport styled from 'styled-components/macro';\nimport {baseColor} from '../../../styling/styleUtils';\n\nconst Content = styled.div`\n  .team-member-name {\n    color: ${baseColor};\n  }\n`;\n\nconst AboutTeam = () => {\n  const getString = useFluent();\n  return (\n    <>\n      <h1>{getString('about-team-title')}</h1>\n      <Content dangerouslySetInnerHTML={{__html: getString('about-team-html')}} />\n    </>\n  );\n};\n\nexport default AboutTeam;\n","import React from 'react';\nimport useFluent from '../../../hooks/useFluent';\n\nconst AboutPilotUserGroup = () => {\n  const getString = useFluent();\n  return (\n    <>\n      <h1>{getString('about-pilot-user-group-title')}</h1>\n      <div dangerouslySetInnerHTML={{__html: getString('about-pilot-user-group-html')}} />\n    </>\n  );\n};\n\nexport default AboutPilotUserGroup;\n","import React from 'react';\nimport useFluent from '../../../hooks/useFluent';\n\nconst AboutResearch = () => {\n  const getString = useFluent();\n  return (\n    <>\n      <h1>{getString('about-research-title')}</h1>\n      <div dangerouslySetInnerHTML={{__html: getString('about-research-html')}} />\n    </>\n  );\n};\n\nexport default AboutResearch;\n","import React from 'react';\nimport useFluent from '../../../hooks/useFluent';\n\nconst AboutGrowthLab = () => {\n  const getString = useFluent();\n  return (\n    <>\n      <h1>{getString('about-growth-lab-title')}</h1>\n      <div dangerouslySetInnerHTML={{__html: getString('about-growth-lab-html')}} />\n      {/*buffer needed in order to compensate for such a small amount of content*/}\n      <div style={{height: '25vh'}} />\n    </>\n  );\n};\n\nexport default AboutGrowthLab;\n","import React, {useRef} from 'react';\nimport Content, {Section} from '../../../components/templates/informationalPage/Content';\nimport {AboutRoutes} from '../../../routing/routes';\nimport {useRouteMatch} from 'react-router-dom';\nimport Helmet from 'react-helmet';\nimport useFluent from '../../../hooks/useFluent';\nimport AboutWhatIs from './AboutWhatIs';\nimport AboutTeam from './AboutTeam';\nimport AboutPilotUserGroup from './AboutPilotUserGroup';\nimport AboutResearch from './AboutResearch';\nimport AboutGrowthLab from './AboutGrowthLab';\n\nconst About = () => {\n  const getString = useFluent();\n  const sections: Section[] = [\n    {\n      label: getString('about-what-is-title'),\n      route: AboutRoutes.AboutWhatIs,\n      active: Boolean(useRouteMatch(AboutRoutes.AboutWhatIs)),\n      Component: AboutWhatIs,\n      ref: useRef<HTMLDivElement | null>(null),\n    },\n    {\n      label: getString('about-team-title'),\n      route: AboutRoutes.AboutTeam,\n      active: Boolean(useRouteMatch(AboutRoutes.AboutTeam)),\n      Component: AboutTeam,\n      ref: useRef<HTMLDivElement | null>(null),\n    },\n    {\n      label: getString('about-pilot-user-group-title'),\n      route: AboutRoutes.AboutPilotUserGroup,\n      active: Boolean(useRouteMatch(AboutRoutes.AboutPilotUserGroup)),\n      Component: AboutPilotUserGroup,\n      ref: useRef<HTMLDivElement | null>(null),\n    },\n    {\n      label: getString('about-research-title'),\n      route: AboutRoutes.AboutResearch,\n      active: Boolean(useRouteMatch(AboutRoutes.AboutResearch)),\n      Component: AboutResearch,\n      ref: useRef<HTMLDivElement | null>(null),\n    },\n    {\n      label: getString('about-growth-lab-title'),\n      route: AboutRoutes.AboutGrowthLab,\n      active: Boolean(useRouteMatch(AboutRoutes.AboutGrowthLab)),\n      Component: AboutGrowthLab,\n      ref: useRef<HTMLDivElement | null>(null),\n    },\n  ];\n\n  return (\n    <>\n      <Helmet>\n        <title>{'About | ' + getString('meta-data-title-default-suffix')}</title>\n        <meta property='og:title' content={'About | ' + getString('meta-data-title-default-suffix')} />\n      </Helmet>\n      <Content\n        sections={sections}\n      />\n    </>\n  );\n};\n\nexport default About;\n","import React from 'react';\nimport useFluent from '../../../hooks/useFluent';\nimport Helmet from 'react-helmet';\n\nconst Contact = () => {\n  const getString = useFluent();\n  return (\n    <div>\n      <Helmet>\n        <title>{getString('navigation-contact') + ' | ' + getString('meta-data-title-default-suffix')}</title>\n        <meta\n          property='og:title'\n          content={getString('navigation-contact') + ' | ' + getString('meta-data-title-default-suffix')}\n        />\n      </Helmet>\n      <h1>{getString('contact-us-title')}</h1>\n      <p\n        dangerouslySetInnerHTML={{__html: getString('contact-us-para-1')}}\n      />\n      <p\n        dangerouslySetInnerHTML={{__html: getString('contact-us-para-2')}}\n      />\n    </div>\n  );\n};\n\nexport default Contact;\n","import React, { useLayoutEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nexport const borderColor = '#999';\n\nconst LargeTerm = styled.dt`\n  font-size: 1.5rem;\n  line-height: 1.14;\n  color: rgb(51, 51, 51);\n  border-top: 1px solid ${borderColor};\n  background-color: rgba(90, 111, 140, 0.1);\n  padding: 1rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  &:hover {\n    background-color: rgba(90, 111, 140, 0.35);\n    cursor: pointer;\n  }\n`;\nconst SmallTerm = styled(LargeTerm)`\n  font-size: 1rem;\n  padding: 0.75rem;\n  line-height: 0.75rem;\n`;\n\nconst Definition = styled.dd`\n  transition: height 200ms ease-in-out;\n  overflow: hidden;\n  box-sizing: border-box;\n  margin-left: 0;\n\n  a {\n    color: rgb(39, 86, 197);\n\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n\nconst Paragraph = styled.p`\n  padding: 1rem;\n  border-top: 1px solid ${borderColor};\n`;\n\nconst Icon = styled.div`\n  font-size: 2rem;\n`;\n\nexport interface IProps {\n  term: string;\n  definition: string;\n  smallLabel?: boolean;\n}\n\nconst GlossaryItem = (props: IProps) => {\n  const {term, definition, smallLabel} = props;\n\n  const [domElmHeight, setDomElmHeight] = useState<number>(0);\n  const [expandedHeight, setExpandedHeight] = useState<'auto' | number>('auto');\n  const [icon, setIcon] = useState<'+' | '-'>('+');\n  const definitionElm = useRef<HTMLElement | null>(null);\n\n  useLayoutEffect(() => {\n    const node = definitionElm.current;\n    if (node !== null) {\n      setDomElmHeight(node.clientHeight);\n      setExpandedHeight(0);\n    }\n\n  }, [definitionElm]);\n\n  const toggleDefinition = () => {\n    if (expandedHeight === 0) {\n      setExpandedHeight(domElmHeight);\n      setIcon('-');\n    } else {\n      setExpandedHeight(0);\n      setIcon('+');\n    }\n  };\n\n  const Term = smallLabel === true ? SmallTerm : LargeTerm;\n\n  return (\n    <>\n      <Term onClick={toggleDefinition}>\n        {term}\n        <Icon>\n          {icon}\n        </Icon>\n      </Term>\n      <Definition ref={definitionElm} style={{height: expandedHeight}}>\n        <Paragraph dangerouslySetInnerHTML={{__html: definition}} />\n      </Definition>\n    </>\n  );\n};\n\nexport default GlossaryItem;\n","import React from 'react';\nimport useFluent from '../../../hooks/useFluent';\nimport Helmet from 'react-helmet';\nimport Item from './GlossaryItem';\n\ninterface IDatum {\n  question: string;\n  answer: string;\n}\n\nconst Faq = () => {\n  const getString = useFluent();\n\n  const content: IDatum[] = [\n    {\n      question: getString('faq-list-Q1-q'),\n      answer: getString('faq-list-Q1-a'),\n    },\n    {\n      question: getString('faq-list-Q2-q'),\n      answer: getString('faq-list-Q2-a'),\n    },\n    {\n      question: getString('faq-list-Q3-q'),\n      answer: getString('faq-list-Q3-a'),\n    },\n    {\n      question: getString('faq-list-Q4-q'),\n      answer: getString('faq-list-Q4-a'),\n    },\n    {\n      question: getString('faq-list-Q5-q'),\n      answer: getString('faq-list-Q5-a'),\n    },\n    {\n      question: getString('faq-list-Q6-q'),\n      answer: getString('faq-list-Q6-a'),\n    },\n    {\n      question: getString('faq-list-Q7-q'),\n      answer: getString('faq-list-Q7-a'),\n    },\n    {\n      question: getString('faq-list-Q8-q'),\n      answer: getString('faq-list-Q8-a'),\n    },\n    {\n      question: getString('faq-list-Q9-q'),\n      answer: getString('faq-list-Q9-a'),\n    },\n    {\n      question: getString('faq-list-Q10-q'),\n      answer: getString('faq-list-Q10-a'),\n    },\n  ];\n\n  const pairs = content.map(({question, answer}, index) => (\n    <Item\n      key={index}\n      term={question}\n      definition={answer}\n    />\n  ));\n\n  return (\n    <div>\n      <Helmet>\n        <title>{getString('navigation-faq') + ' | ' + getString('meta-data-title-default-suffix')}</title>\n        <meta\n          property='og:title'\n          content={getString('navigation-faq') + ' | ' + getString('meta-data-title-default-suffix')}\n        />\n      </Helmet>\n      <h1>{getString('faq-title')}</h1>\n      {pairs}\n      <div style={{marginBottom: '5rem'}} />\n    </div>\n  );\n};\n\nexport default Faq;\n","import React from 'react';\nimport {\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport {Routes} from '../../routing/routes';\nimport InformationalPage from '../../components/templates/informationalPage';\nimport About from './about';\nimport Contact from './contact';\nimport Faq from './faq';\n\nconst City = () => {\n\n  return (\n    <InformationalPage>\n      <Switch>\n        <Route path={Routes.AboutBase} component={About} />\n        <Route path={Routes.ContactBase} component={Contact} />\n        <Route path={Routes.FaqBase} component={Faq} />\n      </Switch>\n    </InformationalPage>\n  );\n};\n\nexport default City;\n","import React from 'react';\nimport { Popover } from '@typeform/embed-react';\n\nconst SurveyWidget = () => {\n  return (\n    <Popover\n      id='IXO2eJuk'\n      className={'typeform-survey-button'}\n    />\n  );\n};\n\nexport default SurveyWidget;\n","import React from 'react';\nimport GlobalStyles from './styling/GlobalStyles';\nimport Helmet from 'react-helmet';\nimport {\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport Landing from './pages/landing';\nimport City from './pages/cities/profiles';\nimport SimilarCities from './pages/cities/similarity';\nimport Informational from './pages/informational';\nimport {Routes} from './routing/routes';\nimport './styling/fonts/fonts.css';\nimport AppContext, {useWindowWidth} from './contextProviders/appContext';\nimport {OverlayPortal} from './components/standardModal';\nimport useFluent from './hooks/useFluent';\nimport ReactGA from 'react-ga';\nimport TrackedRoute from './routing/TrackedRoute';\nimport SurveyWidget from './components/analytics/SurveyWidget';\n\nReactGA.initialize('UA-41291966-12', {debug: false});\n\nfunction App() {\n  const windowDimensions = useWindowWidth();\n  const getString = useFluent();\n  const defaultMetaTitle = getString('meta-data-title-default');\n  return (\n    <>\n      <Helmet>\n        {/* Set default meta data values */}\n        <title>{defaultMetaTitle}</title>\n        <meta property='og:title' content={defaultMetaTitle} />\n      </Helmet>\n      <GlobalStyles />\n      <AppContext.Provider value={{windowDimensions}}>\n        <Switch>\n          <TrackedRoute exact path={Routes.Landing} component={Landing} />\n          <Route path={Routes.CitySimilarCities} component={SimilarCities} />\n          <Route path={Routes.CityBase} component={City} />\n          <TrackedRoute path={Routes.AboutBase} component={Informational} />\n          <TrackedRoute path={Routes.ContactBase} component={Informational} />\n          <TrackedRoute path={Routes.FaqBase} component={Informational} />\n          <TrackedRoute component={Landing} />\n        </Switch>\n        <OverlayPortal />\n        <SurveyWidget />\n      </AppContext.Provider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {\n  appLocalizationAndBundle as fluentValue,\n  AppLocalizationAndBundleContext as FluentText,\n} from './contextProviders/getFluentLocalizationContext';\nimport {\n  BrowserRouter,\n} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_API_URL,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render((\n  <ApolloProvider client={client}>\n    <FluentText.Provider value={fluentValue}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </FluentText.Provider>\n  </ApolloProvider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/benchmark_comparator.1146d6d7.svg\";"],"sourceRoot":""}